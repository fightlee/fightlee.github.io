<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java前端复习篇-html01</title>
    <url>/java%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E7%AF%87-html01.html</url>
    <content><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201024230008.png" alt="20201024230008"></p>
<a id="more"></a>

<h1 id="HTML5-一"><a href="#HTML5-一" class="headerlink" title="HTML5(一)"></a>HTML5(一)</h1><h4 id="html5兼容性"><a href="#html5兼容性" class="headerlink" title="html5兼容性"></a>html5兼容性</h4><blockquote>
<p>一些浏览器可能对Html5并不友好,所以我们需要一些特殊手段来保证Html5在低版本浏览器上的运行</p>
</blockquote>
<h5 id="方法1-使用CSS"><a href="#方法1-使用CSS" class="headerlink" title="方法1 : 使用CSS"></a>方法1 : 使用CSS</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">section</span>, <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">hgroup</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="方法2-使用script脚本"><a href="#方法2-使用script脚本" class="headerlink" title="方法2 : 使用script脚本"></a>方法2 : 使用script脚本</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">&lt;script src="http://apps.bdimg.com/libs/html5shiv/3.7/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="方法3-添加noscript标签给与适当提示"><a href="#方法3-添加noscript标签给与适当提示" class="headerlink" title="方法3 : 添加noscript标签给与适当提示"></a>方法3 : 添加noscript标签给与适当提示</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment"> &lt;script src="http://apps.bdimg.com/libs/html5shiv/3.7/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">  &lt;noscript&gt;</span></span><br><span class="line"><span class="comment">     &lt;strong&gt;Warning !&lt;/strong&gt;</span></span><br><span class="line"><span class="comment">     Because your browser does not support HTML5, some elements are simulated using JScript.</span></span><br><span class="line"><span class="comment">     Unfortunately your browser has disabled scripting. Please enable it in order to display this page.</span></span><br><span class="line"><span class="comment">  &lt;/noscript&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="html5语义话标签"><a href="#html5语义话标签" class="headerlink" title="html5语义话标签"></a>html5语义话标签</h4><table>
<thead>
<tr>
<th>标签名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>header</strong></td>
<td>放在页面或布局的顶部，一般放置导航栏或标题.</td>
</tr>
<tr>
<td><strong>nav</strong></td>
<td>页面导航,一般在header或者aside中使用.</td>
</tr>
<tr>
<td><strong>aside</strong></td>
<td>放在网站侧边区域,比如侧边栏,广告,友情链接.</td>
</tr>
<tr>
<td><strong>footer</strong></td>
<td>底部信息,比如版权,联系方式等.</td>
</tr>
<tr>
<td>article</td>
<td>放在一个独立,完整的区域,比如一篇新闻,一个帖子,一条评论,可以认为是更强调独立性区域性的section.</td>
</tr>
<tr>
<td>hgroup</td>
<td>用来放置一组连续的标题.</td>
</tr>
<tr>
<td><strong>section</strong></td>
<td>表示一组或者一节内容,或者就是一块区域.</td>
</tr>
<tr>
<td><strong>main</strong></td>
<td>表示页面的主体内容区域,一个页面只能有一个main</td>
</tr>
<tr>
<td>mark</td>
<td>高亮文本</td>
</tr>
<tr>
<td>figure&amp;figcaption</td>
<td>规定独立的流内容(一些图片,图标,代码等)&amp;标题</td>
</tr>
<tr>
<td>address</td>
<td>个人邮箱地址信息</td>
</tr>
<tr>
<td>progress</td>
<td>进度,max最大值,value当前进度</td>
</tr>
</tbody></table>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201025000435.png" alt="20201025000435"></p>
<h4 id="html5中新属性"><a href="#html5中新属性" class="headerlink" title="html5中新属性"></a>html5中新属性</h4><table>
<thead>
<tr>
<th>属性名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>contenteditable</td>
<td>内容是否可编辑</td>
</tr>
<tr>
<td>data-*</td>
<td>嵌入自定义数据</td>
</tr>
<tr>
<td>draggable</td>
<td>内容是否可拖拽</td>
</tr>
<tr>
<td>hidden</td>
<td>隐藏元素</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-name</span>=<span class="string">"zhangsan"</span> <span class="attr">id</span>=<span class="string">"labelDiv"</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"editDiv"</span> <span class="attr">contenteditable</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid red; width: 150px;height: 50px;overflow: scroll;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">hidden</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> labelDiv = <span class="built_in">document</span>.getElementById(<span class="string">"labelDiv"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> editDiv = <span class="built_in">document</span>.getElementById(<span class="string">"editDiv"</span>)</span></span><br><span class="line">    editDiv.innerHTML = labelDiv.dataset.name</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="html5中表单新特性"><a href="#html5中表单新特性" class="headerlink" title="html5中表单新特性"></a>html5中表单新特性</h4><ul>
<li>datalist</li>
</ul>
<blockquote>
<p><code>datalist</code>标签规定了 <code>input</code>元素可能的选项列表。</p>
<p><code>datalist</code>标签被用来在为<code>input</code>元素提供”自动完成”的特性。用户能看到一个下拉列表，里边的选项是预先定义好的，将作为用户的输入数据。</p>
<p>请使用<code>input</code>元素的 list 属性来绑定<code>datalist</code>元素。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"keywords"</span> <span class="attr">list</span>=<span class="string">"keywordsList"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"keywordsList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"java"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"python"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"html"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="html5中表单-amp-输入框新属性"><a href="#html5中表单-amp-输入框新属性" class="headerlink" title="html5中表单&amp;输入框新属性"></a>html5中表单&amp;输入框新属性</h4><blockquote>
<p>除了添加一些input中验证的新属性,如</p>
<ul>
<li>required</li>
<li>pattern</li>
<li>placeholder</li>
</ul>
<p>还有input中一些新的type类型</p>
<ul>
<li>email : 邮箱</li>
<li>color : 取色器</li>
<li>date : 日期</li>
<li>range : 范围选择框 , 进度调节器</li>
<li>tel : 电话</li>
<li>time : 时间</li>
<li>week : 周</li>
<li>month : 月</li>
<li>url : url地址</li>
</ul>
</blockquote>
<h5 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h5><table>
<thead>
<tr>
<th>form属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>autocomplete</td>
<td>自动补全,默认开启 autocomplete = “on”</td>
</tr>
<tr>
<td>novalidate</td>
<td>不需要验证.</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">autocomplete</span>=<span class="string">"on"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">    用户名 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    邮箱 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h5><table>
<thead>
<tr>
<th>input属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>formmethod</td>
<td>提交方式</td>
</tr>
<tr>
<td>formenctype</td>
<td>提交内容类型</td>
</tr>
<tr>
<td>formaction</td>
<td>提交路径</td>
</tr>
<tr>
<td>formnovalidate</td>
<td>提交不需要验证</td>
</tr>
<tr>
<td>formtarget</td>
<td>打开方式 , “_self”,”_blank”</td>
</tr>
<tr>
<td>autofocus</td>
<td>自动聚焦</td>
</tr>
</tbody></table>
<h4 id="html5中DOM操作"><a href="#html5中DOM操作" class="headerlink" title="html5中DOM操作"></a>html5中DOM操作</h4><blockquote>
<p>和jquery一样</p>
</blockquote>
<ul>
<li>querySelector(‘选择器’) : 获取单个元素</li>
<li>queryAllSelector(‘选择器’) : 获取多个元素</li>
</ul>
<h4 id="classList"><a href="#classList" class="headerlink" title="classList"></a>classList</h4><blockquote>
<p>classList 属性返回元素的类名，作为 DOMTokenList 对象。</p>
<p>该属性用于在元素中添加，移除及切换 CSS 类。</p>
<p>classList 属性是只读的，但你可以使用 add() 和 remove() 方法修改它。</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>add(<em>class1, class2, …</em>)</td>
<td>添加一个或者多个类名</td>
</tr>
<tr>
<td>boolean contains(<em>class</em>)</td>
<td>判断是否存在指定类名</td>
</tr>
<tr>
<td>remove(<em>class1, class2, …</em>)</td>
<td>移除一个或者多个类名</td>
</tr>
<tr>
<td>toggle(<em>class,</em>boolean flag)</td>
<td>切换类名,第二个值代表是否强制添加或移除</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="selector-class">.active</span>&#123;</span></span><br><span class="line">				background-color: lightblue;</span><br><span class="line">				color: brown;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"testDiv"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>演示DIV<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"toggleClass();"</span>&gt;</span>切换样式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">toggleClass</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> testDiv = <span class="built_in">document</span>.querySelector(<span class="string">'#testDiv'</span>);</span></span><br><span class="line"><span class="actionscript">				testDiv.classList.toggle(<span class="string">"active"</span>);</span></span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="data"><a href="#data" class="headerlink" title="data-*"></a>data-*</h4><blockquote>
<p>data-* 属性用于存储页面或应用程序的私有自定义数据。</p>
<p>data-* 属性赋予我们在所有 HTML 元素上嵌入自定义 data 属性的能力。</p>
<p>存储的（自定义）数据能够被页面的 JavaScript 中利用，以创建更好的用户体验（不进行 Ajax 调用或服务器端数据库查询）。</p>
<p>data-* 属性包括两部分：</p>
<ul>
<li>属性名不应该包含任何大写字母，并且在前缀 “data-“ 之后必须有至少一个字符</li>
<li>属性值可以是任意字符串</li>
<li>data-*后接入了多个字符串,调用时需去除-,并改为驼峰进行使用.</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h4</span>&gt;</span>获取data属性的值<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">data-user-name</span>=<span class="string">"zhangsan"</span> <span class="attr">id</span>=<span class="string">"divEle"</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"getData"</span>&gt;</span>GetData<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">h4</span>&gt;</span>根据button中的data的值切换图片显示<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">data-img-url</span> = <span class="string">"img/1.jpg"</span>&gt;</span>显示图片1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">data-img-url</span> = <span class="string">"img/2.jpg"</span>&gt;</span>显示图片2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">data-img-url</span> = <span class="string">"img/3.jpg"</span>&gt;</span>显示图片3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"bgImg"</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">"暂时没有图片信息"</span> <span class="attr">width</span>=<span class="string">"50px"</span> <span class="attr">height</span>=<span class="string">"50px"</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">h4</span>&gt;</span>设置data属性值<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"setDate"</span>&gt;</span>SetData<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"testDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">//取出div中的data值显示到p标签中</span></span></span><br><span class="line"><span class="javascript">			<span class="built_in">document</span>.querySelector(<span class="string">'#getData'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">document</span>.querySelector(<span class="string">'#p1'</span>).innerHTML = <span class="built_in">document</span>.querySelector(<span class="string">'#divEle'</span>).dataset.userName;</span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//获取所有按钮添加点击事件,并动态切换img图片</span></span></span><br><span class="line"><span class="javascript">			<span class="built_in">document</span>.querySelectorAll(<span class="string">'.btn'</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">				x.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">document</span>.querySelector(<span class="string">'#bgImg'</span>).src = x.dataset.imgUrl;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line"><span class="actionscript">			<span class="comment">//设置testDiv的属性值</span></span></span><br><span class="line"><span class="javascript">			<span class="built_in">document</span>.querySelector(<span class="string">'#setDate'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">document</span>.querySelector(<span class="string">'#testDiv'</span>).dataset.url = <span class="string">'http://www.baidu.com'</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h4><h5 id="File-介绍"><a href="#File-介绍" class="headerlink" title="File 介绍"></a>File 介绍</h5><blockquote>
<p>文件<strong><code>File</code></strong>接口提供有关文件的信息，并允许网页中的 JavaScript 访问其内容</p>
</blockquote>
<h5 id="File-构造"><a href="#File-构造" class="headerlink" title="File 构造"></a>File 构造</h5><blockquote>
<p>File() 返回一个文件对象.</p>
</blockquote>
<h5 id="File-属性"><a href="#File-属性" class="headerlink" title="File 属性"></a>File 属性</h5><table>
<thead>
<tr>
<th>属性名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>File.lastModified</td>
<td>返回当前File对象的最后修改时间,返回类型为毫秒值</td>
</tr>
<tr>
<td>File.lastModifiedDate</td>
<td>返回当前File对象的最后修改时间,返回类型为<code>Date</code></td>
</tr>
<tr>
<td>File.name</td>
<td>File对象引用文件的名称</td>
</tr>
<tr>
<td>File.size</td>
<td>文件大小</td>
</tr>
<tr>
<td>File.type</td>
<td>MIME类型</td>
</tr>
<tr>
<td>File.webkitRelativePath</td>
<td>File相关的path或者URL</td>
</tr>
</tbody></table>
<h5 id="FileReader-介绍"><a href="#FileReader-介绍" class="headerlink" title="FileReader 介绍"></a>FileReader 介绍</h5><blockquote>
<p>对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 <code>File</code>或 <code>Blob</code> 对象指定要读取的文件或数据。 </p>
</blockquote>
<h5 id="FileReader-构造"><a href="#FileReader-构造" class="headerlink" title="FileReader 构造"></a>FileReader 构造</h5><blockquote>
<p>FileReader() 返回一个文件读取对象</p>
</blockquote>
<h5 id="FileReader-属性"><a href="#FileReader-属性" class="headerlink" title="FileReader 属性"></a>FileReader 属性</h5><table>
<thead>
<tr>
<th>属性名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>FileReader.error</td>
<td>读取文件时发生的错误</td>
</tr>
<tr>
<td>FileReader.readyState</td>
<td>状态值, <code>0</code>:没有加载任何数据 <code>1</code>:数据正在加载 <code>2</code>:加载完成 ,对应的常量名 : <code>EMPTY</code>,<code>LOADING</code>,<code>DONE</code></td>
</tr>
<tr>
<td>FileReader.result</td>
<td>文件的内容.<strong>该属性必须在读取完成后才有效</strong></td>
</tr>
</tbody></table>
<h5 id="FileReader中的事件"><a href="#FileReader中的事件" class="headerlink" title="FileReader中的事件"></a>FileReader中的事件</h5><table>
<thead>
<tr>
<th>事件名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>FileReader.onabort</td>
<td>读取操作被中断时触发</td>
</tr>
<tr>
<td>FileReader.onerror</td>
<td>读取操作发生错误时触发</td>
</tr>
<tr>
<td>FileReader.onload</td>
<td>读取操作完成时触发</td>
</tr>
<tr>
<td>FileReader.onloadstart</td>
<td>读取操作开始时触发</td>
</tr>
<tr>
<td>FileReader.onloadend</td>
<td>读取操作结束时（要么成功，要么失败）触发</td>
</tr>
<tr>
<td>FileReader.onprogress</td>
<td>在读取<code>Blob</code>时触发</td>
</tr>
</tbody></table>
<h5 id="FileReader中的方法"><a href="#FileReader中的方法" class="headerlink" title="FileReader中的方法"></a>FileReader中的方法</h5><table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>FileReader.abort()</td>
<td>中止操作,返回时,readyState属性为<code>DONE</code></td>
</tr>
<tr>
<td>FileReader.readAsArrayBuffer()</td>
<td>开始读取,读取完成后,result属性中<code>ArrayBuffer</code>对象.</td>
</tr>
<tr>
<td>FileReader.readAsBinaryString)</td>
<td>开始读取,读取完成后,result属性中为原始二进制数据内容.</td>
</tr>
<tr>
<td>FileReader.readAsDataURL()</td>
<td>开始读取,读取完成后,result属性中为一个<code>data</code>:URL格式的Base64字符串以表示所读取文件的内容</td>
</tr>
<tr>
<td>FileReader.readAsText()</td>
<td>开始读取,读取完成后,result属性中为字符串文本内容</td>
</tr>
</tbody></table>
<h5 id="通过input中type为file来读取文件"><a href="#通过input中type为file来读取文件" class="headerlink" title="通过input中type为file来读取文件"></a>通过input中type为file来读取文件</h5><blockquote>
<p>步骤 : </p>
<ol>
<li>监听上传文件框的<code>onchange</code>事件</li>
<li>调用输入框中的<code>files</code>属性获取文件列表(<strong>可以通过multiple属性设置上传多个文件</strong>)</li>
<li>遍历文件<code>FileList</code>获取上传的文件列表</li>
<li>创建<code>FileReader</code>,调用<code>readAsText</code>方法读取文本内容</li>
<li>监听<code>FileReader</code>的<code>onload</code>事件,当文件读取完成,调用<code>result</code>属性读取文件内容</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    上传文件 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload"</span> <span class="attr">id</span>=<span class="string">"upload"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'#upload'</span>).onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(<span class="keyword">this</span>.files.length &gt; <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="keyword">this</span>.files.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> file = <span class="keyword">this</span>.files[i];</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line"><span class="actionscript">                fileReader.readAsText(file,<span class="string">'gbk'</span>);</span></span><br><span class="line"><span class="actionscript">                fileReader.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.result);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="通过拖拽来读取文件"><a href="#通过拖拽来读取文件" class="headerlink" title="通过拖拽来读取文件"></a>通过拖拽来读取文件</h5><blockquote>
<p>步骤 : </p>
<ol>
<li>监听div拖拽事件<code>ondragover</code>和<code>ondrop</code><ul>
<li>ondragover : 当有被拖拽的元素在监听的元素上时</li>
<li>ondrop : 当被拖拽的元素放下时</li>
</ul>
</li>
<li>在<code>function</code>中的<code>event</code>参数中获取<code>DataTransfer</code>对象</li>
<li>通过<code>DataTransfer</code>对象中的<code>files</code>属性获取文件列表</li>
<li>同上</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">style</span>=<span class="string">"width: 150px;height: 150px; border: 1px solid red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> contentDiv = <span class="built_in">document</span>.querySelector(<span class="string">'#content'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    contentDiv.ondragover = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        e.preventDefault();<span class="comment">//阻止默认行为</span></span></span><br><span class="line"><span class="actionscript">        e.stopPropagation();<span class="comment">//停止事件冒泡</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//设置拖动后的操作效果的字符串</span></span></span><br><span class="line">        /*</span><br><span class="line">         cpoy : 在新位置生成源项的副本</span><br><span class="line">         move : 将项目移动到新位置</span><br><span class="line">         link : 在新位置建立源项目的链接</span><br><span class="line">        */</span><br><span class="line"><span class="actionscript">        e.dataTransfer.dropEffect = <span class="string">'copy'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    contentDiv.ondrop = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//获取文件</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> fileList = e.dataTransfer.files;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//遍历</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; fileList.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> file = fileList[i];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line"><span class="actionscript">            fileReader.readAsText(file,<span class="string">'gbk'</span>);</span></span><br><span class="line"><span class="actionscript">            fileReader.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.result);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="网络状态"><a href="#网络状态" class="headerlink" title="网络状态"></a>网络状态</h4><blockquote>
<p>监听用户浏览器的网络状态 : <code>window.navigator.onLine</code></p>
</blockquote>
<h4 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h4><h5 id="geolocation-对象获取"><a href="#geolocation-对象获取" class="headerlink" title="geolocation 对象获取"></a>geolocation 对象获取</h5><blockquote>
<p>通过 <code>window.navigator.geolocation</code> 返回</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断浏览器是否支持定位</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.navigator.geolocation)&#123;</span><br><span class="line">    <span class="comment">//如果支持,通过getCurrentPosition()函数获取地理位置</span></span><br><span class="line">    navigator.geolocation.getCurrentPosition(success)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'不支持'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pos : 当前位置, coords : 当前坐标</span></span><br><span class="line"><span class="comment">latitude : 纬度</span></span><br><span class="line"><span class="comment">longitude : 经度</span></span><br><span class="line"><span class="comment">accuracy : 精度</span></span><br><span class="line"><span class="comment">speed : 速度 , 以 米/秒 计算</span></span><br><span class="line"><span class="comment">altitude : 海拔 , 以 米 计算</span></span><br><span class="line"><span class="comment">altitudeAccuracy : 海拔精度</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">pos</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    <span class="keyword">var</span> crd = pos.coords;</span><br><span class="line">    <span class="built_in">console</span>.log(crd.latitude);</span><br><span class="line">    <span class="built_in">console</span>.log(crd.longitude);</span><br><span class="line">    <span class="built_in">console</span>.log(crd.accuracy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="百度地图"><a href="#百度地图" class="headerlink" title="百度地图"></a>百度地图</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1.0, user-scalable=no"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">body</span>, <span class="selector-tag">html</span>,<span class="selector-id">#allmap</span> &#123;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">overflow</span>: hidden;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">font-family</span>:<span class="string">"微软雅黑"</span>;&#125;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//api.map.baidu.com/api?v=2.0&amp;ak=bNF3YZLp4U3fe0tt8a8rZvoWYRWTtf0Y"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>浏览器定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"allmap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="comment">// 百度地图API功能</span></span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"allmap"</span>);</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> point = <span class="keyword">new</span> BMap.Point(<span class="number">116.331398</span>,<span class="number">39.897445</span>);</span></span><br><span class="line">	map.centerAndZoom(point,12);</span><br><span class="line"><span class="actionscript">	map.enableScrollWheelZoom(<span class="literal">true</span>); </span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> geolocation = <span class="keyword">new</span> BMap.Geolocation();</span></span><br><span class="line"><span class="actionscript">	geolocation.getCurrentPosition(<span class="function"><span class="keyword">function</span><span class="params">(r)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">		<span class="keyword">if</span>(<span class="keyword">this</span>.getStatus() == BMAP_STATUS_SUCCESS)&#123;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> mk = <span class="keyword">new</span> BMap.Marker(r.point);</span></span><br><span class="line">			map.addOverlay(mk);</span><br><span class="line">			map.panTo(r.point);</span><br><span class="line"><span class="actionscript">			alert(<span class="string">'您的位置：'</span>+r.point.lng+<span class="string">','</span>+r.point.lat);</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="actionscript">		<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">			alert(<span class="string">'failed'</span>+<span class="keyword">this</span>.getStatus());</span></span><br><span class="line">		&#125;        </span><br><span class="line"><span class="actionscript">	&#125;,&#123;enableHighAccuracy: <span class="literal">true</span>&#125;)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h4><h5 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h5><blockquote>
<p>通过<code>window.localStorage</code>获取</p>
</blockquote>
<ul>
<li>存储的数据一直有效</li>
<li>多窗口共享</li>
<li>存储数据容量约为20M</li>
</ul>
<h5 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h5><blockquote>
<p>通过<code>window.sessionStorage</code>获取</p>
</blockquote>
<ul>
<li>关闭浏览器之前有效</li>
<li>同一窗口</li>
<li>存储数据容量约为5M</li>
</ul>
<h5 id="通用API"><a href="#通用API" class="headerlink" title="通用API"></a>通用API</h5><table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>setItem(<em>key</em>,<em>value</em>)</td>
<td>存数据</td>
</tr>
<tr>
<td>getItem(<em>key</em>)</td>
<td>取数据</td>
</tr>
<tr>
<td>removeItem(<em>key</em>)</td>
<td>删除数据</td>
</tr>
<tr>
<td>clear()</td>
<td>清空数据</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">			UserName : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">id</span>=<span class="string">"userName"</span>&gt;</span></span><br><span class="line">			Password : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"login"</span> <span class="attr">id</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"logout"</span> <span class="attr">id</span>=<span class="string">"logout"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">			showUserInfo();</span><br><span class="line">		</span><br><span class="line"><span class="javascript">			<span class="built_in">document</span>.querySelector(<span class="string">'#login'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取用户名和密码</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> userName = <span class="built_in">document</span>.querySelector(<span class="string">'#userName'</span>).value;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> password = <span class="built_in">document</span>.querySelector(<span class="string">'#password'</span>).value;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//封装成json对象并转成字符串</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> jsonString = <span class="built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line">					userName:userName,</span><br><span class="line">					password:password</span><br><span class="line">				&#125;)</span><br><span class="line"><span class="actionscript">				<span class="comment">//保存用户信息</span></span></span><br><span class="line"><span class="javascript">				<span class="built_in">window</span>.localStorage.setItem(<span class="string">'userInfo'</span>,jsonString);</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//显示用户信息</span></span></span><br><span class="line">				showUserInfo();</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line"><span class="javascript">			<span class="built_in">document</span>.querySelector(<span class="string">'#logout'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//清空用户数据</span></span></span><br><span class="line"><span class="javascript">				<span class="built_in">window</span>.localStorage.clear();</span></span><br><span class="line">				showUserInfo();</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">showUserInfo</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> userInfo = <span class="built_in">window</span>.localStorage.getItem(<span class="string">'userInfo'</span>);</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> a_user = <span class="built_in">document</span>.querySelector(<span class="string">'#user'</span>);</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> input_login = <span class="built_in">document</span>.querySelector(<span class="string">'#login'</span>);</span></span><br><span class="line"><span class="javascript">				<span class="keyword">if</span>(<span class="built_in">JSON</span>.parse(userInfo))&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//有用户信息</span></span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">'用户已登录'</span>);</span></span><br><span class="line"><span class="actionscript">					a_user.style.display = <span class="string">'inline'</span>;</span></span><br><span class="line"><span class="javascript">					a_user.innerHTML = <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(<span class="string">'userInfo'</span>)).userName;</span></span><br><span class="line"><span class="actionscript">					input_login.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="actionscript">				&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//没有用户信息</span></span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">'用户未登陆'</span>);</span></span><br><span class="line"><span class="actionscript">					a_user.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="actionscript">					input_login.style.display = <span class="string">'inline'</span>;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title>javaee-spring02</title>
    <url>/javaee-spring02.html</url>
    <content><![CDATA[<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/wallhaven-g8rvjq.jpg" alt="wallhaven-g8rvjq"  />

<a id="more"></a>

<h1 id="Javaee-Spring02"><a href="#Javaee-Spring02" class="headerlink" title="Javaee-Spring02"></a>Javaee-Spring02</h1><h2 id="在Java中使用Spring"><a href="#在Java中使用Spring" class="headerlink" title="在Java中使用Spring"></a>在Java中使用Spring</h2><blockquote>
<p>上篇文章主要阐述了为什么在Java中需要使用Spring,使用Spring涉及到的依赖倒置原则,和控制反转,依赖注入等原理.</p>
<p>这篇文章主要教大家如何在Java中使用和应用Spring来进行开发</p>
</blockquote>
<h3 id="使用Spring的几个步骤"><a href="#使用Spring的几个步骤" class="headerlink" title="使用Spring的几个步骤"></a>使用Spring的几个步骤</h3><ol>
<li>在pom.xml中添加Spring相关的依赖,没有maven的同学在项目中添加spring相关的Jar包即可.</li>
<li>创建spring的配置文件,使用spring的配置文件来管理在项目中使用到的对象.(IOC容器)</li>
<li>加载spring配置文件 , 获取spring的上下文对象.</li>
<li>通过ApplicationContext对象根据getBean()方法获取对象.</li>
</ol>
<p><strong>0 ) Student.class</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Integer id, String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>1 ) 在pom.xml中导入相关依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2 ) 创建spring配置文件applicationContext.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3 ) 加载spring配置文件, 获取上下文对象,</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassPathXmlApplicationContext context = </span><br><span class="line">        					<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationCotext.xml"</span>);</span><br></pre></td></tr></table></figure>

<p><strong>4 ) 通过ApplicationContext对象根据id获取IOC容器中的对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过id获取Bean对象</span></span><br><span class="line">Student stu = (Student) context.getBean(<span class="string">"student"</span>);</span><br><span class="line">System.out.println(stu);</span><br><span class="line"><span class="comment">//通过id和Bean的字节码文件获取Bean对象 , 好处不需要强转</span></span><br><span class="line">Student student = context.getBean(<span class="string">"student"</span>, Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">输出 : </span><br><span class="line">Student&#123;id=null, name='null', age=null&#125;</span><br></pre></td></tr></table></figure>

<h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><blockquote>
<p>从以上步骤中获取的Student对象是一个空对象,那么我们可以通过依赖注入的方式给Student对象的属性赋值.</p>
</blockquote>
<h4 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h4><blockquote>
<p>构造注入就是通过对象的构造函数来给属性赋值,有三种方式.</p>
</blockquote>
<h5 id="1-名称赋值-推荐"><a href="#1-名称赋值-推荐" class="headerlink" title="1 ) 名称赋值 (推荐)"></a>1 ) 名称赋值 (推荐)</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"12"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">输出 : </span><br><span class="line">Student&#123;id=1, name='zhangsan', age=12&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-下标赋值"><a href="#2-下标赋值" class="headerlink" title="2 ) 下标赋值"></a>2 ) 下标赋值</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"lisi"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">输出 : </span><br><span class="line">Student&#123;id=2, name='lisi', age=22&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-类型赋值"><a href="#3-类型赋值" class="headerlink" title="3 ) 类型赋值"></a>3 ) 类型赋值</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"lisi"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">value</span>=<span class="string">"33"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">输出 : </span><br><span class="line">Student&#123;id=3, name='lisi', age=33&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-ref属性"><a href="#4-ref属性" class="headerlink" title="4 ) ref属性"></a>4 ) ref属性</h5><p><strong>Student.class</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Grade grade;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Integer id, String name, Integer age, Grade grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Grade <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(Grade grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", grade="</span> + grade +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Grade.class</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer gradeId;</span><br><span class="line">    <span class="keyword">private</span> String gradeName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Grade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Grade</span><span class="params">(Integer gradeId, String gradeName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gradeId = gradeId;</span><br><span class="line">        <span class="keyword">this</span>.gradeName = gradeName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getGradeId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gradeId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGradeId</span><span class="params">(Integer gradeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gradeId = gradeId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGradeName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gradeName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGradeName</span><span class="params">(String gradeName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gradeName = gradeName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Grade&#123;"</span> +</span><br><span class="line">                <span class="string">"gradeId="</span> + gradeId +</span><br><span class="line">                <span class="string">", gradeName='"</span> + gradeName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用构造注入,注入Grade</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"grade"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Grade"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"gradeId"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"gradeName"</span> <span class="attr">value</span>=<span class="string">"一年级"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhaoliu"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"44"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"grade"</span> <span class="attr">ref</span>=<span class="string">"grade"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">输出 : </span><br><span class="line">Student&#123;id=4, name='zhaoliu', age=44, grade=Grade&#123;gradeId=1, gradeName='一年级'&#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h4><blockquote>
<p>通过Bean中的set方法给属性注入值</p>
</blockquote>
<p><strong>Student.class</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Grade grade;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] booksArray = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; booksList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer,String&gt; booksMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; booksSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Grade <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(Grade grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getBooksArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> booksArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooksArray</span><span class="params">(String[] booksArray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.booksArray = booksArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getBooksList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> booksList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooksList</span><span class="params">(List&lt;String&gt; booksList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.booksList = booksList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Integer, String&gt; <span class="title">getBooksMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> booksMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooksMap</span><span class="params">(Map&lt;Integer, String&gt; booksMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.booksMap = booksMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getBooksSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> booksSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooksSet</span><span class="params">(Set&lt;String&gt; booksSet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.booksSet = booksSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">getProps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProps</span><span class="params">(Properties props)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.props = props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", grade="</span> + grade +</span><br><span class="line">                <span class="string">", address="</span> + address +</span><br><span class="line">                <span class="string">", booksArray="</span> + Arrays.toString(booksArray) +</span><br><span class="line">                <span class="string">", booksList="</span> + booksList +</span><br><span class="line">                <span class="string">", booksMap="</span> + booksMap +</span><br><span class="line">                <span class="string">", booksSet="</span> + booksSet +</span><br><span class="line">                <span class="string">", props="</span> + props +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="setter注入-重点"><a href="#setter注入-重点" class="headerlink" title="setter注入(重点)"></a>setter注入(重点)</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:utils</span>=<span class="string">"http://www.springframework.org/schema/util"</span> <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"grade"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Grade"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"gradeId"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"gradeName"</span> <span class="attr">value</span>=<span class="string">"一年级"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stu1"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--普通值注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--空字符串注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--空值注入--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="age" value=""&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引用类型注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"grade"</span> <span class="attr">ref</span>=<span class="string">"grade"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--内部Bean--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Address"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addrId"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addrName"</span> <span class="attr">value</span>=<span class="string">"长沙"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数组注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"booksArray"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java从入门到放弃<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Mysql从建库到删库到跑路<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Spring从春天到冬天<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--list集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"booksList"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Set集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"booksSet"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>母猪的产后护理<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>宠物心得<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>论家猫和主人的地位<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Map集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"booksMap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"语文"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"数学"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"3"</span> <span class="attr">value</span>=<span class="string">"英语"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Properties集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driverClassName"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"url"</span>&gt;</span>jdbc:mysql://localhost:3306/mydb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--p命名空间赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stu2"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span> <span class="attr">p:name</span>=<span class="string">"zhangsanfeng"</span> <span class="attr">p:age</span>=<span class="string">"82"</span> <span class="attr">p:id</span>=<span class="string">"9"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"booksList"</span> <span class="attr">ref</span>=<span class="string">"boosListUtils"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--c命名空间赋值 和p类似,p使用set注入,c使用构造注入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过名称赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address1"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Address"</span> <span class="attr">c:addrId</span>=<span class="string">"2"</span> <span class="attr">c:addrName</span>=<span class="string">"北京"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过下标赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address2"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Address"</span> <span class="attr">c:_0</span>=<span class="string">"3"</span> <span class="attr">c:_1</span>=<span class="string">"上海"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--util命名空间创建外部集合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">utils:list</span> <span class="attr">id</span>=<span class="string">"boosListUtils"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>十万个为什么<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">utils:list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><blockquote>
<p>给Bean在xml文件中注入属性属实麻烦,Spring给我们提供了其他几种方式来简化注入的操作.</p>
<ul>
<li>xml文件<ul>
<li>byName</li>
<li>byType</li>
<li>byConstructor</li>
</ul>
</li>
<li>注解<ul>
<li>@Autowired注解</li>
<li>@Resource注解</li>
</ul>
</li>
</ul>
</blockquote>
<p><strong>Customer.class</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line">    <span class="keyword">private</span> BuyCart cart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ByName"><a href="#ByName" class="headerlink" title="ByName"></a>ByName</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"order"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"orderId"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"orderName"</span> <span class="attr">value</span>=<span class="string">"00fefx"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cart"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.BuyCart"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proName"</span> <span class="attr">value</span>=<span class="string">"wahaha"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	byName : 根据名称来自动装配 属性的名称和对应的bean对象的id要一致</span></span><br><span class="line"><span class="comment">	byType : 根据类型来自动装配 前提,确保当前配置文件中不会存在多个相同类型的bean对象</span></span><br><span class="line"><span class="comment">	constructor : 根据构造器来自动装配(不推荐)</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Customer"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="ByType"><a href="#ByType" class="headerlink" title="ByType"></a>ByType</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Customer"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Autowired注解注入-重点"><a href="#Autowired注解注入-重点" class="headerlink" title="@Autowired注解注入(重点)"></a>@Autowired注解注入(重点)</h4><blockquote>
<p>@Autowired 使用特点</p>
<ul>
<li>@Autowired注解为Spring中的注解,<strong>需要在spring配置文件中开启注解配置方可使用</strong>.</li>
<li>@Autowired注解优先使用byType注入</li>
<li>在容器中有多个相同类型bean时,如果此时有一个的bean id 和属性名称相等,则使用byName注入</li>
<li>如果又有多个相同类型bean,并且名称和属性不一致,则需要配合@Qualifier(value = “xxx”)注解一起使用</li>
<li>@Autowired注解中可以通过required属性配置此值能不能为null.</li>
</ul>
</blockquote>
<p><strong>一定要记住在xml文件中配置&lt;context:annotation-config /&gt;!!!</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  开启注解支持  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"order"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"orderId"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"orderName"</span> <span class="attr">value</span>=<span class="string">"00fefx"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cart"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.BuyCart"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proName"</span> <span class="attr">value</span>=<span class="string">"wahaha"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Customer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Customer.class</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//如果xml中的该类型的对象不唯一,且没有同名属性和id则需要配合@Qualifier(value="xxx")注解使用</span></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)<span class="comment">//通过required属性配置该值可不可以为null</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"order1"</span>)</span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BuyCart cart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Resource注解-重点"><a href="#Resource注解-重点" class="headerlink" title="@Resource注解(重点)"></a>@Resource注解(重点)</h4><blockquote>
<p>@Resource使用特点 : </p>
<ul>
<li>为Java jdk中提供的注解.但仍需在配置文件中配置.</li>
<li>直接在注解参数中使用name来配置要注入的bean的id , @Resource(name = “xxx”)</li>
<li>@Resource优先使用byName的方式来装配,如果名称不匹配则使用byType.</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"order1"</span>)</span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"cart"</span>)</span><br><span class="line">    <span class="keyword">private</span> BuyCart cart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="scope-作用域"><a href="#scope-作用域" class="headerlink" title="scope(作用域)"></a>scope(作用域)</h3><blockquote>
<p>在bean标签中可以通过scope属性配置bean的初始化方式.</p>
<ul>
<li>singleton : 单例,在容器初始化时,对象就被创建了. <strong>为spring容器默认的初始化方式</strong></li>
<li>prototype : 原型,可以理解为普通对象创建(多个实例).在调用getBean()获取对象时,才创建对象.</li>
<li>request</li>
<li>session</li>
<li>application</li>
<li>websocket</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stu1"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stu1"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Test.class</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ClassPathXmlApplicationContext context </span><br><span class="line">        = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="parent-amp-depends-on-继承-amp-依赖"><a href="#parent-amp-depends-on-继承-amp-依赖" class="headerlink" title="parent&amp;depends-on(继承&amp;依赖)"></a>parent&amp;depends-on(继承&amp;依赖)</h3><blockquote>
<p>使用<strong>parent</strong>属性和<strong>depends-on</strong>属性可以配置某些bean之间的关系</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 继承  parent属性</span></span><br><span class="line"><span class="comment">	 作用 : 一般用来配置一些模板类 , 父类一般使用abstract修饰</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"parentDog"</span> <span class="attr">class</span>=<span class="string">"com.java.spring.extend.Dog"</span> <span class="attr">abstract</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"旺财"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"com.java.spring.extend.Dog"</span> <span class="attr">parent</span>=<span class="string">"parentDog"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"公"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"weight"</span> <span class="attr">value</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 依赖 </span></span><br><span class="line"><span class="comment">	depends-on属性</span></span><br><span class="line"><span class="comment">	作用 : 当实例化的bean与bean之间并没有明显的相互依赖的关系,可以通过depends-on属性来决定bean初始化的顺序</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	bean : a</span></span><br><span class="line"><span class="comment">	bean : b</span></span><br><span class="line"><span class="comment">	要求 a 和 b 之间没有直接关系, 但是在实例化 b 之前 必须要先实例化 a.</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"settingsInit"</span> <span class="attr">class</span>=<span class="string">"com.java.spring.depends.SettingsInit"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testSystem"</span> <span class="attr">class</span>=<span class="string">"com.java.spring.depends.TestSystem"</span> <span class="attr">depends-on</span>=<span class="string">"settingsInit"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 程序中的一个设置类</span></span><br><span class="line"><span class="comment"> * 系统设置 : 比如说 系统更新的时间</span></span><br><span class="line"><span class="comment"> *  现在这个REFRESH_CYCLE这个参数比较死板,为了设计更为灵活,可以把参数设置到数据库中,</span></span><br><span class="line"><span class="comment"> *  每一次启动系统的时候,都去数据库中更新REFRESH_CYCLE中的值</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Settings</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> REFRESH_CYCLE = <span class="number">100</span>;<span class="comment">//s min day</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 对系统参数值进行一个数据库的更新</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SettingsInit</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SettingsInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"settingsInit初始化了"</span>);</span><br><span class="line">		<span class="comment">//从数据库中加载值来对REFRESH_CYCLE进行更新</span></span><br><span class="line">		Settings.REFRESH_CYCLE = <span class="number">2000</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定时任务类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 线程 Runnable接口  </span></span><br><span class="line"><span class="comment"> * new Thread(new MyRunnable()&#123;</span></span><br><span class="line"><span class="comment"> * 		@Override</span></span><br><span class="line"><span class="comment">		public void run() &#123;</span></span><br><span class="line"><span class="comment">			System.out.println("程序更新了.....");</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment"> * &#125;)</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"程序更新了....."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSystem</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * 最初 Settings中有变量 a , 任务调用</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * 现在 Settings中有变量a , 经过 SettingsInit类来更新变量a的值, 任务调用</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//1.定义一个定时任务</span></span><br><span class="line">		Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">		TimerTask task = <span class="keyword">new</span> UpdateTask();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2.周期性的执行定时任务</span></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * scheduleAtFixedRate(timerTask,delay,period);</span></span><br><span class="line"><span class="comment">		 * timerTask : 要执行的定时任务 , 一般是继承了TimerTask类的对象</span></span><br><span class="line"><span class="comment">		 * delay : 延迟时间</span></span><br><span class="line"><span class="comment">		 * period : 运行周期</span></span><br><span class="line"><span class="comment">		 * */</span></span><br><span class="line">		timer.scheduleAtFixedRate(task, <span class="number">0</span>, Settings.REFRESH_CYCLE);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="context-placeholder-引用外部文件"><a href="#context-placeholder-引用外部文件" class="headerlink" title="context:placeholder(引用外部文件)"></a>context:placeholder(引用外部文件)</h3><blockquote>
<p>使用该标签可以读取其他配置文件的信息,比如xx.properties文件.通过${key}的方式给bean的属性赋值</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用外部文件扫描来给类中的属性注入值 </span></span><br><span class="line"><span class="comment">作用 : 在ssh中或者ssm中 用它给hibernate或者mybatis中的数据源需要的参数赋值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db_server.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcUtils"</span> <span class="attr">class</span>=<span class="string">"com.java.spring.placeholder.JDBCUtils"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;driverClassName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Componet注解的使用"><a href="#Componet注解的使用" class="headerlink" title="@Componet注解的使用"></a>@Componet注解的使用</h3><blockquote>
<p>在上面的案例中,我们介绍了可以将IOC容器中的bean对象通过@Autowired注解或者@Resource注解自动注入注解所引用的对象中.这里我们介绍@Componet注解以及其他注解的使用</p>
<ul>
<li><p>前提 : 必须在xml中加入 <strong>context:component-scan</strong> 标签 , 开启扫描</p>
</li>
<li><p>@Componet : 将Java中的类注入到IOC容器中</p>
<ul>
<li>@Service : 适用于MVC架构中的Service层实现类使用,例 : StudentServiceImp,ProductServiceImp</li>
<li>@Repository : Dao层实现类使用 , 例 :  StudentDaoImp,ProductDaoImp..</li>
<li>@Controller : Controller层使用 ,UserController等.</li>
</ul>
</li>
<li><p>@Value : 给对象注入属性值 , 可以在属性上或者其对应的setter方法上使用</p>
</li>
</ul>
</blockquote>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><strong>Student.class</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"zhangsan"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString()...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student student = context.getBean(<span class="string">"student"</span>, Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure>

<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">输出 : </span><br><span class="line">Student&#123;id=null, name='zhangsan', age=1&#125;</span><br></pre></td></tr></table></figure>

<p><strong>StudentService &amp; StudentDao</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"studentDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStu</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"addStu 成功执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"studentService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"studentDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentDao</span><span class="params">(StudentDao studentDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentDao = studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        studentDao.addStu(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StudentService studentService = context.getBean(<span class="string">"studentService"</span>, StudentService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">studentService.addStudent(<span class="keyword">new</span> Student());</span><br></pre></td></tr></table></figure>

<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">输出 : </span><br><span class="line">addStu 成功执行</span><br></pre></td></tr></table></figure>

<h3 id="idea控制台不输出错误具体信息"><a href="#idea控制台不输出错误具体信息" class="headerlink" title="idea控制台不输出错误具体信息"></a>idea控制台不输出错误具体信息</h3><blockquote>
<p>pom.xml中添加插件</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>javaweb篇-反射(三)</title>
    <url>/javaweb%E7%AF%87-reflection3.html</url>
    <content><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/wallhaven-xlx8ez.png" alt="wallhaven-xlx8ez"></p>
<a id="more"></a>

<h1 id="JavaWeb-反射-三"><a href="#JavaWeb-反射-三" class="headerlink" title="JavaWeb-反射(三)"></a>JavaWeb-反射(三)</h1><h2 id="Java内省机制"><a href="#Java内省机制" class="headerlink" title="Java内省机制"></a>Java内省机制</h2><blockquote>
<p>维基百科解释 :  在计算机科学中，内省是指计算机程序在运行时（Runtime）检查对象（Object）类型的一种能力，通常也可以称作“运行时类型检查”。一些编程语言如C++、Java、Ruby、PHP、Objective-C、Perl等等具有这种特性。</p>
<p>不应该将内省和反射混淆。相对于内省，反射更进一步，是指计算机程序在运行时（Runtime）可以访问、检测和修改它本身状态或行为的一种能力。</p>
</blockquote>
<blockquote>
<p>Java内省机制和反射其实差不多,反射是在运行状态中动态的对任意已知路径的字节码文件中的信息进行获取,比如属性,构造,注解,方法等.而内省主要针对Java项目中比较特殊的一种类,JavaBean类的信息的获取.</p>
<p>JavaBean是些什么类?这些类又有一些什么特征?</p>
<ul>
<li>在JavaBean中会提供一个默认的无参构造函数</li>
<li>需要被序列化所以应实现<strong>Serializable</strong>接口</li>
<li>应当有一系列的可读写的属性</li>
<li>与其中属性对应的<strong>getter</strong>/<strong>setter</strong>方法</li>
</ul>
<p>例如 : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.smbms.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String email;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> email;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.email = email;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="内省机制中相关的类-接口"><a href="#内省机制中相关的类-接口" class="headerlink" title="内省机制中相关的类/接口"></a>内省机制中相关的类/接口</h2><blockquote>
<p>跟内省机制相关的类都存放在<strong>java.beans</strong>包中,主要有以下几个类/接口 : </p>
<ul>
<li>Introspector类</li>
<li>BeanInfo接口</li>
<li>PropertyDescriptor类</li>
</ul>
</blockquote>
<h3 id="Introspector类"><a href="#Introspector类" class="headerlink" title="Introspector类"></a>Introspector类</h3><blockquote>
<p>The Introspector class provides a standard way for tools to learn about the properties, events, and methods supported by a target Java Bean.</p>
<p>Introspector类提供了一种标准方法来了解目标javabean中的属性、事件和方法。</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td>static BeanInfo <strong>getBeanInfo</strong>(beanClass)</td>
<td align="center">获取beanClass,以及其父类的字节码文件的基本信息</td>
</tr>
<tr>
<td>static BeanInfo <strong>getBeanInfo</strong>(beanClass,stopClass)</td>
<td align="center">获取beanClass到stopClass截止的字节码文件的基本信息,包含beanClass不包含stopClass</td>
</tr>
</tbody></table>
<h3 id="BeanInfo接口"><a href="#BeanInfo接口" class="headerlink" title="BeanInfo接口"></a>BeanInfo接口</h3><blockquote>
<p>Use the <code>BeanInfo</code> interface to create a <code>BeanInfo</code> class and provide explicit information about the methods, properties, events, and other features of your beans. </p>
<p>使用BeanInfo接口创建BeanInfo类，并提供对应JavaBean中的方法、属性、事件和其他特征的明确信息。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PropertyDescriptor[] getPropertyDescriptors()</td>
<td align="center">获取属性描述器数组</td>
</tr>
</tbody></table>
<h3 id="PropertyDescriptor类"><a href="#PropertyDescriptor类" class="headerlink" title="PropertyDescriptor类"></a>PropertyDescriptor类</h3><blockquote>
<p>A PropertyDescriptor describes one property that a Java Bean exports via a pair of accessor methods.</p>
<p>一个PropertyDescriptor描述一个属性，一个javabean的出口通过一对访问方法</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td>Method getWriteMethod()</td>
<td align="center">获取这个属性可访问的setter方法</td>
</tr>
<tr>
<td>Method getReadMethod()</td>
<td align="center">获取这个属性可访问的getter方法</td>
</tr>
<tr>
<td>String getDisplayName() / String getName()</td>
<td align="center">获取这个属性的名称</td>
</tr>
<tr>
<td>Class&lt;?&gt; getPropertyType()</td>
<td align="center">获取这个属性的类型</td>
</tr>
</tbody></table>
<blockquote>
<p>总的归纳  : </p>
<ol>
<li>我们可以通过<code>Introspector</code>类中的<strong>getBeanInfo</strong>()方法来获取当前bean的基本信息<code>BeanInfo</code>对象</li>
<li>通过<code>BeanInfo</code>对象中的<strong>getPropertyDescriptors</strong>()方法来获取当前bean中的<strong>每个属性</strong>的描述器<code>PropertyDescriptor</code></li>
<li>通过<code>PropertyDescriptor</code>获取其属性所对应的<strong>getter</strong>/<strong>setter</strong>方法,来对属性进行赋值的操作.</li>
<li>尤其注意通过<strong>getBeanInfo(Class beanClass)</strong>不仅能获取这个<strong>beanClass</strong>中的信息还有其父类的信息.如果只需要获取当前这个<strong>beanClass</strong>中的信息,应当使用<strong>getBeanInfo(Class beanClass,Class stopClass)</strong>,stopClass为其父类的字节码文件.</li>
</ol>
</blockquote>
<h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><h4 id="获取Student类中的所有属性以及其类型和其getter-setter方法"><a href="#获取Student类中的所有属性以及其类型和其getter-setter方法" class="headerlink" title="获取Student类中的所有属性以及其类型和其getter/setter方法"></a>获取Student类中的所有属性以及其类型和其getter/setter方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> IntrospectionException </span>&#123;</span><br><span class="line">    Class beanClass = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    BeanInfo beanInfo = Introspector.getBeanInfo(beanClass,beanClass.getSuperclass());</span><br><span class="line">    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">    <span class="comment">//输出Student.class中所有的属性及其类型</span></span><br><span class="line">    Arrays.asList(propertyDescriptors).forEach(x -&gt; System.out.println(x.getName() + <span class="string">" : "</span> + x.getPropertyType()));</span><br><span class="line">    <span class="comment">//输出Student.class中所有的属性对应的getter/setter方法</span></span><br><span class="line">    Arrays.asList(propertyDescriptors).forEach(x -&gt; &#123;</span><br><span class="line">        System.out.println(x.getReadMethod());</span><br><span class="line">        System.out.println(x.getWriteMethod());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong>:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">email : class java.lang.String</span><br><span class="line">id : class java.lang.Integer</span><br><span class="line">name : class java.lang.String</span><br><span class="line"></span><br><span class="line">public java.lang.String com.java.refleciton.Student.getEmail()</span><br><span class="line">public void com.java.refleciton.Student.setEmail(java.lang.String)</span><br><span class="line">public java.lang.Integer com.java.refleciton.Student.getId()</span><br><span class="line">public void com.java.refleciton.Student.setId(java.lang.Integer)</span><br><span class="line">public java.lang.String com.java.refleciton.Student.getName()</span><br><span class="line">public void com.java.refleciton.Student.setName(java.lang.String)</span><br></pre></td></tr></table></figure>

<h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><h4 id="1-使用Java内省机制将Student中的属性和其属性值存入到map中"><a href="#1-使用Java内省机制将Student中的属性和其属性值存入到map中" class="headerlink" title="1) 使用Java内省机制将Student中的属性和其属性值存入到map中"></a>1) 使用Java内省机制将Student中的属性和其属性值存入到map中</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    student.setId(<span class="number">1</span>);</span><br><span class="line">    student.setName(<span class="string">"zhangsan"</span>);</span><br><span class="line">    student.setEmail(<span class="string">"zhangsan@qq.com"</span>);</span><br><span class="line">    Map&lt;String,Object&gt; map = bean2Map(student);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">bean2Map</span><span class="params">(Student stu)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前对象的字节码文件</span></span><br><span class="line">    Class&lt;? extends Student&gt; clazz = stu.getClass();</span><br><span class="line">    <span class="comment">//1.获取当前字节码文件的BeanInfo对象</span></span><br><span class="line">    BeanInfo beanInfo = Introspector.getBeanInfo(clazz,clazz.getSuperclass());</span><br><span class="line">    <span class="comment">//2.获取beanInfo中的所有属性的描述器</span></span><br><span class="line">    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">    <span class="comment">//3.遍历&amp;创建Map对象</span></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    Arrays.asList(propertyDescriptors).forEach(pd -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取属性的getter方法并调用得到属性的值</span></span><br><span class="line">            Method readMethod = pd.getReadMethod();</span><br><span class="line">            Object value = readMethod.invoke(stu);</span><br><span class="line">            <span class="comment">//获取属性的名称</span></span><br><span class="line">            String key = pd.getName();</span><br><span class="line">            <span class="comment">//map的key为 : 属性的名称, value为属性的值</span></span><br><span class="line">            map.put(key,value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-使用Java内省机制将map中的值保存到Student的属性中"><a href="#2-使用Java内省机制将map中的值保存到Student的属性中" class="headerlink" title="2)  使用Java内省机制将map中的值保存到Student的属性中"></a>2)  使用Java内省机制将map中的值保存到Student的属性中</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"id"</span>, <span class="number">2</span>);</span><br><span class="line">    map.put(<span class="string">"name"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">    map.put(<span class="string">"email"</span>, <span class="string">"zhangsan@qq.com"</span>);</span><br><span class="line">    Student stu = map2Bean(Student<span class="class">.<span class="keyword">class</span>,<span class="title">map</span>)</span>;</span><br><span class="line">    System.out.println(stu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">map2Bean</span><span class="params">(Class&lt;T&gt; clazz, Map&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    T t = clazz.newInstance();</span><br><span class="line">    <span class="comment">//1.获取当前字节码文件的BeanInfo对象</span></span><br><span class="line">    BeanInfo beanInfo = Introspector.getBeanInfo(clazz, clazz.getSuperclass());</span><br><span class="line">    <span class="comment">//2.获取beanInfo中的所有属性的描述器</span></span><br><span class="line">    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">    <span class="comment">//3.遍历</span></span><br><span class="line">    Arrays.asList(propertyDescriptors).forEach(pd -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取每一个属性的setter方法</span></span><br><span class="line">            Method writeMethod = pd.getWriteMethod();</span><br><span class="line">            <span class="comment">//根据属性的名称获取值</span></span><br><span class="line">            Object value = map.get(pd.getName());</span><br><span class="line">            <span class="comment">//调用方法给t对象赋值</span></span><br><span class="line">            writeMethod.invoke(t, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-案例2-2的改造"><a href="#3-案例2-2的改造" class="headerlink" title="3) 案例2.2的改造"></a>3) 案例2.2的改造</h4><blockquote>
<p>思考 : 在Map转Bean的过程中,我们Map中的对应key/属性的值的类型是一致,如果不一致,在调用对应的setter方法赋值时传入的参数类型不匹配就会有异常的出现,我们可以针对一些常见的类型进行显示的判断,再赋值</p>
</blockquote>
<p><strong>修改后的map2Bean</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"id"</span>, <span class="string">"2"</span>);</span><br><span class="line">    map.put(<span class="string">"name"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">    map.put(<span class="string">"email"</span>, <span class="string">"zhangsan@qq.com"</span>);</span><br><span class="line">    Student stu = map2Bean(Student<span class="class">.<span class="keyword">class</span>,<span class="title">map</span>)</span>;</span><br><span class="line">    System.out.println(stu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">map2Bean</span><span class="params">(Class&lt;T&gt; clazz, Map&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    T t = clazz.newInstance();</span><br><span class="line">    <span class="comment">//1.获取当前字节码文件的BeanInfo对象</span></span><br><span class="line">    BeanInfo beanInfo = Introspector.getBeanInfo(clazz, clazz.getSuperclass());</span><br><span class="line">    <span class="comment">//2.获取beanInfo中的所有属性的描述器</span></span><br><span class="line">    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">    <span class="comment">//3.遍历</span></span><br><span class="line">    Arrays.asList(propertyDescriptors).forEach(pd -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取每一个属性的setter方法</span></span><br><span class="line">            Method writeMethod = pd.getWriteMethod();</span><br><span class="line">            <span class="comment">//根据属性的名称获取值</span></span><br><span class="line">            Object value = map.get(pd.getName());</span><br><span class="line">            <span class="keyword">if</span>(value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//先获取属性的类型</span></span><br><span class="line">                Class&lt;?&gt; type = pd.getPropertyType();</span><br><span class="line">                <span class="comment">//判断属性是什么类型,再将value转换成对应类型</span></span><br><span class="line">                <span class="keyword">if</span>(type.isAssignableFrom(String<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="comment">//如果是字符串,转换成字符串赋值</span></span><br><span class="line">                    writeMethod.invoke(t, value.toString());</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.isAssignableFrom(<span class="keyword">int</span><span class="class">.<span class="keyword">class</span>) || <span class="title">type</span>.<span class="title">isAssignableFrom</span>(<span class="title">Integer</span>.<span class="title">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="comment">//如果是int或者Integer,则转换后赋值</span></span><br><span class="line">                    writeMethod.invoke(t, Integer.parseInt(value.toString()));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.isAssignableFrom(<span class="keyword">double</span><span class="class">.<span class="keyword">class</span>) || <span class="title">type</span>.<span class="title">isAssignableFrom</span>(<span class="title">Double</span>.<span class="title">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="comment">//如果是double或者Double,则转换后赋值</span></span><br><span class="line">                    writeMethod.invoke(t, Double.parseDouble(value.toString()));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.isAssignableFrom(<span class="keyword">boolean</span><span class="class">.<span class="keyword">class</span>) || <span class="title">type</span>.<span class="title">isAssignableFrom</span>(<span class="title">Boolean</span>.<span class="title">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="comment">//如果是Boolean或者boolean,则转换后赋值</span></span><br><span class="line">                    writeMethod.invoke(t, Boolean.parseBoolean(value.toString()));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.isAssignableFrom(Date<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="comment">//如果是Date类型,则转换后赋值</span></span><br><span class="line">                    Date date = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).parse(value.toString());</span><br><span class="line">                    writeMethod.invoke(t,date);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里特地在map中的id处,将int的值修改成String,运行后没有问题.</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>通过Introspector获取BeanInfo对象</li>
<li>通过BeanInfo获取Bean中所有属性的属性描述器PropertyDescriptor[]</li>
<li>遍历PropertyDescriptor数组,通过PropertyDescriptor对象获取属性的getter/setter方法,或者属性的类型和名称.</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础增强篇01</title>
    <url>/java%E5%9F%BA%E7%A1%80%E5%A2%9E%E5%BC%BA%E7%AF%8701.html</url>
    <content><![CDATA[<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/wallhaven-vg862p.jpg" alt="wallhaven-vg862p" style="zoom:80%;" />

<a id="more"></a>

<h1 id="Java基础增强"><a href="#Java基础增强" class="headerlink" title="Java基础增强"></a>Java基础增强</h1><h2 id="前文概述"><a href="#前文概述" class="headerlink" title="前文概述"></a>前文概述</h2><blockquote>
<p>本文主要针对于Java8的新特性进行部分讲解,在大部分大学和一些机构的教学过程中发现Java8的新特性很少有老师提起,但是现阶段的实际开发中Java8的新特性是必不可少的一部分,尤其是本文要提到的<strong>Lambda表达式</strong>以及<strong>函数式接口</strong>和一些其他内容.</p>
</blockquote>
<h2 id="内容概览"><a href="#内容概览" class="headerlink" title="内容概览"></a>内容概览</h2><ol>
<li>函数式接口&amp;Lambda表达式</li>
<li>default关键字</li>
<li>Stream流</li>
<li>Optional</li>
</ol>
<h2 id="1-函数式接口-amp-Lambda表达式"><a href="#1-函数式接口-amp-Lambda表达式" class="headerlink" title="1) 函数式接口 &amp; Lambda表达式"></a>1) 函数式接口 &amp; Lambda表达式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p><strong>函数式接口</strong> : 在Java8中,一个接口中只有一个需要被实现的方法,我们就可以认为其是一个函数式接口 . 比如一些常见的 线程中的 <strong>Runnable</strong> , 比较排序使用的<strong>Comparator</strong> 等接口.</p>
<p>当我们在自定义函数式接口时,为了避免自己或者其他人以后在此接口中加上其他接口方法,导致此接口变为<strong>非函数式接口</strong>,我们可以在此接口上加上<strong>@FunctionalInterface</strong>注解,加上后如果再向此接口中添加新的接口函数,编译会出错.</p>
<p><strong>Runnable接口的定义</strong> : </p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201017135620.png" alt="20201017135620"></p>
<p><strong>Comparator接口的定义</strong> : </p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201017135635.png" alt="20201017135635"></p>
<p>Java8之前,我们经常对Runnable或者Comparator这种单方法实现的接口使用匿名内部类的形式来使用,这种使用方式相对而言比较繁琐,从Java8之后,我们可以使用Lambda表达式来对这些操作进行简化.</p>
</blockquote>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用匿名内部类的形式创建Runnable</span></span><br><span class="line">    Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"线程要执行的任务"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//使用Lambda表达式创建Runnable</span></span><br><span class="line">    Runnable r1 = () -&gt; System.out.println(<span class="string">"线程要执行的任务"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Lambda表达式的演化过程"><a href="#Lambda表达式的演化过程" class="headerlink" title="Lambda表达式的演化过程"></a>Lambda表达式的演化过程</h3><blockquote>
<p> 我们可以从JavaScript中的声明式函数来推演出Java中的函数式接口的Lambda语法,JavaScript同理.</p>
</blockquote>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201017150802.png" alt="20201017150802"></p>
<h3 id="Lambda表达式的使用方式"><a href="#Lambda表达式的使用方式" class="headerlink" title="Lambda表达式的使用方式"></a>Lambda表达式的使用方式</h3><blockquote>
<p>Lambda表达式的使用方式主要从这几点考虑,接口的实现方法有没有形参?形参有几个?方法体中有几行代码?有没有返回值?不需要考虑返回值类型和参数类型</p>
<ul>
<li><p>只有1个或者没有形参,没有返回值,方法体中只有1行代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//没有形参</span></span><br><span class="line">Runnable r1 = () -&gt; System.out.println(<span class="string">"线程要执行的任务"</span>);</span><br><span class="line"><span class="comment">//只有1个形参,小括号可以省略</span></span><br><span class="line">TestInterface ti = x -&gt; System.out.println(x);</span><br></pre></td></tr></table></figure>
</li>
<li><p>有多个形参,有返回值,方法体中有多行代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestInterface ti = (x,y) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>有返回值,方法提中只有一个return的话可以省略return.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TestInterface ti = (x,y) -&gt; x + y;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h3 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h3><p><strong>现有若干个Student(int age , String name)保存在集合中,使用Collections对集合Student进行排序</strong></p>
<p><strong>案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Student stu1 = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>, <span class="number">12</span>);</span><br><span class="line">    Student stu2 = <span class="keyword">new</span> Student(<span class="string">"lisi"</span>, <span class="number">13</span>);</span><br><span class="line">    Student stu3 = <span class="keyword">new</span> Student(<span class="string">"wangwu"</span>, <span class="number">14</span>);</span><br><span class="line">    Student stu4 = <span class="keyword">new</span> Student(<span class="string">"wangba"</span>, <span class="number">14</span>);</span><br><span class="line">    List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(stu1);</span><br><span class="line">    list.add(stu2);</span><br><span class="line">    list.add(stu3);</span><br><span class="line">    list.add(stu4);</span><br><span class="line">    <span class="comment">//使用匿名内部类</span></span><br><span class="line">    Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = o1.getAge() - o2.getAge();</span><br><span class="line">            <span class="keyword">return</span> temp == <span class="number">0</span> ? o1.getName().compareTo(o2.getName()) : temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用lambda表达式</span></span><br><span class="line">Collections.sort(list,(o1,o2) -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> temp = o1.getAge() - o2.getAge();</span><br><span class="line">    <span class="keyword">return</span> temp == <span class="number">0</span> ? o1.getName().compareTo(o2.getName()) : temp;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Java8的函数式接口"><a href="#Java8的函数式接口" class="headerlink" title="Java8的函数式接口"></a>Java8的函数式接口</h3><blockquote>
<p>在lambda的表达式的实际使用中,我们不可能仅仅只对Java中的Comparator或者Runnable等现有函数式接口进行简化操作,我们还需要操作一些自定义的函数式接口,但是每一次使用时我们完成某一个逻辑实现时都需要自己定义一个函数式接口来操作,未免显得不太方便,如以下</p>
<p><strong>自定义函数式接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TestFunctionInterface</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果要使用的方法需要传参</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TestFunctionInterface</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果有返回值....等等</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>所以Java8中给我们提供了大量的函数式接口给我们在各种场景配合使用.</strong></p>
<table>
<thead>
<tr>
<th>序号</th>
<th>接口</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><strong>Consumer&lt; T &gt;</strong></td>
<td>代表了接受一个输入参数并且无返回的操作</td>
</tr>
<tr>
<td>2</td>
<td><strong>Predicate&lt; T &gt;</strong></td>
<td>接受一个输入参数，返回一个布尔值结果。</td>
</tr>
<tr>
<td>3</td>
<td><strong>Function&lt; T, R &gt;</strong></td>
<td>接受一个输入参数，返回一个结果。</td>
</tr>
<tr>
<td>4</td>
<td><strong>Supplier&lt; T &gt;</strong></td>
<td>无参数，返回一个结果。</td>
</tr>
</tbody></table>
<p>…剩下还有39个,我们先讲这4个.</p>
<h4 id="Consumer-lt-T-gt"><a href="#Consumer-lt-T-gt" class="headerlink" title="Consumer&lt; T &gt;"></a>Consumer&lt; T &gt;</h4><blockquote>
<p>Consumer : 消费者,顾客 . 代表了接受一个输入参数并且无返回的操作.</p>
<p>接口定义 : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> Consumer&lt;T&gt; <span class="title">andThen</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; after)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里接口中还有方法体是不是很神奇?这个和default这个关键字我们放到后面讲解.</p>
<p>使用场景 : 当我们需要使用Lambda表达式来操作一个传入一个参数但不需要返回值的方法,这里一般使用在forEach中对集合内部迭代对传入的参数做一些操作.后面会介绍.</p>
</blockquote>
<p><strong>使用小案例</strong> : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Consumer&lt;Integer&gt; consumer = x -&gt; &#123;</span><br><span class="line">        x = x + <span class="number">10</span>;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer.accept(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Predicate-lt-T-gt"><a href="#Predicate-lt-T-gt" class="headerlink" title="Predicate&lt; T &gt;"></a>Predicate&lt; T &gt;</h4><blockquote>
<p>Predicate :  表明,阐明,断言,判断 . 接受一个输入参数，返回一个布尔值结果.</p>
<p>接口定义 : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">and</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; !test(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">or</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">isEqual</span><span class="params">(Object targetRef)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">null</span> == targetRef)</span><br><span class="line">                ? Objects::isNull</span><br><span class="line">                : object -&gt; targetRef.equals(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用场景 : 当我们需要使用Lambda表达式来操作一个传入一个参数但需要返回布尔类型值的方法.</p>
</blockquote>
<p><strong>使用小案例</strong> : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Predicate&lt;Integer&gt; predicate = x -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(predicate.test(<span class="number">30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用Predicate来完成一些判断的功能</strong></p>
<p>1.判断传入的字符串的长度是不是大于5?</p>
<p>2.判断传入的数值是不是偶数?</p>
<p>3.判断传入的字符串是不是包含‘@’符号?</p>
<p><strong>传统做法</strong> : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">testStringLength</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.length() &gt; <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">testValueisEven</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.parseInt(value) % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">testValueisContains</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.contains(<span class="string">"@"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(testStringLength(<span class="string">"asd"</span>));;</span><br><span class="line">    System.out.println(testValueisEven(<span class="string">"122"</span>));;</span><br><span class="line">    System.out.println(testValueisContains(<span class="string">"asd"</span>));;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用Lambda表达式</strong> : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">testMethod</span><span class="params">(String value,Predicate&lt;String&gt; predicate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> predicate.test(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(testMethod(<span class="string">"asd"</span>,value -&gt; value.length() &gt; <span class="number">5</span>));</span><br><span class="line">    System.out.println(testMethod(<span class="string">"122"</span>,value -&gt; Integer.parseInt(value) % <span class="number">2</span> == <span class="number">0</span>));</span><br><span class="line">    System.out.println(testMethod(<span class="string">"asd@"</span>,value -&gt; value.contains(<span class="string">"@"</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Function-lt-T-R-gt"><a href="#Function-lt-T-R-gt" class="headerlink" title="Function&lt; T, R &gt;"></a>Function&lt; T, R &gt;</h4><blockquote>
<p>Function : 这个顾名思义 函数 , 接受一个输入参数，返回一个结果.</p>
<p>接口定义 : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;V, R&gt; <span class="title">compose</span><span class="params">(Function&lt;? <span class="keyword">super</span> V, ? extends T&gt; before)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(before);</span><br><span class="line">        <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;T, V&gt; <span class="title">andThen</span><span class="params">(Function&lt;? <span class="keyword">super</span> R, ? extends V&gt; after)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Function&lt;T, T&gt; <span class="title">identity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用场景 : 当我们需要使用Lambda表达式来操作一个传入一个参数但需要返回一个特定类型值的方法.</p>
</blockquote>
<p><strong>使用小案例</strong> : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Function&lt;String, String[]&gt; function = value -&gt; value.split(<span class="string">"-"</span>);</span><br><span class="line">    System.out.println(Arrays.asList(function.apply(<span class="string">"123-456-789"</span>)));;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用Function来完成一些字符串处理的操作</strong></p>
<p>1.将传入的字符串首字母大写然后在字符串前加上”set”返回</p>
<p>2.将传入的字符串从 “:” 切割后再去除两端空格返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMethod1</span><span class="params">(String value,Function&lt;String, String&gt; function)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> function.apply(value);</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.将传入的字符串首字母大写然后在字符串前加上"set"返回</span></span><br><span class="line">    System.out.println(testMethod1(<span class="string">"age"</span>,value -&gt; &#123;</span><br><span class="line">        <span class="keyword">char</span>[] charArray = value.toCharArray();</span><br><span class="line">        charArray[<span class="number">0</span>] = (<span class="keyword">char</span>) (charArray[<span class="number">0</span>] - <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"set"</span> + <span class="keyword">new</span> String(charArray);</span><br><span class="line">    &#125;));</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//2.将传入的字符串从 ":" 切割后再去除两端空格返回</span></span><br><span class="line">    System.out.println(testMethod1(<span class="string">"redirect:login.jsp"</span>, value -&gt; &#123;</span><br><span class="line">        <span class="keyword">int</span> index = value.indexOf(<span class="string">":"</span>);</span><br><span class="line">        <span class="keyword">return</span> value.substring(index + <span class="number">1</span>);</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Supplier-lt-T-gt"><a href="#Supplier-lt-T-gt" class="headerlink" title="Supplier&lt; T &gt;"></a>Supplier&lt; T &gt;</h4><blockquote>
<p>Supplier :  供应者; 供货商; 供货方; 无参数,返回一个结果。</p>
<p>接口定义  : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用场景 :  当我们需要使用Lambda表达式来操作不需要传入参数但能返回一个特定类型值的方法.</p>
</blockquote>
<p><strong>使用小案例</strong> : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Supplier&lt;Double&gt; supplier = () -&gt; Math.PI; </span><br><span class="line">    System.out.println(supplier.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用Supplier来完成获取一些值的操作</strong></p>
<p>1.获取一个UUID随机字符串值,只获取最后一个 “-“ 后的字符串.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test09</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(testMethod2(() -&gt; &#123;</span><br><span class="line">        String uuidStr = UUID.randomUUID().toString();</span><br><span class="line">        <span class="keyword">return</span> uuidStr.substring(uuidStr.lastIndexOf(<span class="string">"-"</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;));</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMethod2</span><span class="params">(Supplier&lt;String&gt; supplier)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> supplier.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后再来提几个</p>
<h4 id="BiConsumer-lt-T-R-gt"><a href="#BiConsumer-lt-T-R-gt" class="headerlink" title="BiConsumer&lt;T,R&gt;"></a>BiConsumer&lt;T,R&gt;</h4><blockquote>
<p>和<strong>Consumer</strong>类似,唯一不同就是 Consumer 传入一个参数,BiConsumer传入2个参数</p>
<p>使用场景 : 迭代Map</p>
</blockquote>
<p><strong>这里补充一下Consumer的迭代操作</strong></p>
<p>1.使用Consumer迭代List集合</p>
<p>2.使用BiConsumer迭代Map集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">"aaa"</span>);</span><br><span class="line">    list.add(<span class="string">"bbb"</span>);</span><br><span class="line">    list.add(<span class="string">"ccc"</span>);</span><br><span class="line">    list.add(<span class="string">"ddd"</span>);</span><br><span class="line">    list.forEach(x -&gt; System.out.print(x + <span class="string">" "</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(<span class="string">"----------"</span>);</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"username"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">    map.put(<span class="string">"password"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    map.put(<span class="string">"gender"</span>, <span class="string">"male"</span>);</span><br><span class="line">    map.put(<span class="string">"email"</span>, <span class="string">"zhangsan@qq.com"</span>);</span><br><span class="line">    map.forEach((key,value) -&gt; System.out.println(key + <span class="string">" : "</span> + value));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">aaa bbb ccc ddd </span><br><span class="line">----------</span><br><span class="line">password : 123456</span><br><span class="line">gender : male</span><br><span class="line">email : zhangsan@qq.com</span><br><span class="line">username : zhangsan</span><br></pre></td></tr></table></figure>

<p><strong>从这里可以看出使用Lambda表达式迭代集合不要太爽好不好?</strong></p>
<h4 id="UnaryOperator-lt-T-gt"><a href="#UnaryOperator-lt-T-gt" class="headerlink" title="UnaryOperator&lt; T &gt;"></a>UnaryOperator&lt; T &gt;</h4><blockquote>
<p>此接口继承了<strong>Function</strong>接口 , 与其不同的就是,Function是传入一个T类型,返回R类型.而UnaryOperator则是传入T类型返回T类型</p>
</blockquote>
<p><strong>案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test11</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(testMethod3(<span class="number">100</span>,x -&gt; x * <span class="number">2</span>));</span><br><span class="line">    System.out.println(testMethod3(<span class="number">100</span>,x -&gt; x + <span class="number">1</span>));</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">testMethod3</span><span class="params">(Integer value,UnaryOperator&lt;Integer&gt; unaryOperator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unaryOperator.apply(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>剩下还有很多函数式接口不一一列举,可以自行在表格中查看用法</strong></p>
<table>
<thead>
<tr>
<th>接口</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td>ToDoubleBiFunction&amp;ToIntBiFunction&amp;ToLongBiFunction</td>
<td align="center">接收2个输入参数,返回double,int,long类型结果</td>
</tr>
<tr>
<td>ToDoubleFunction&amp;ToIntFunction&amp;ToLongFunction</td>
<td align="center">接受1个输入参数,返回double,int,long类型结果</td>
</tr>
<tr>
<td>ObjDoubleConsumer&amp;ObjIntConsumer&amp;ObjLongConsumer</td>
<td align="center">接受1个object类型和一个doube,int,long的输入参数，无返回值。</td>
</tr>
<tr>
<td>BiFunction&lt;T,U,R&gt;</td>
<td align="center">代表了一个接受两个输入参数的方法，并且返回一个结果</td>
</tr>
<tr>
<td>BinaryOperator&lt; T &gt;</td>
<td align="center">代表了一个作用于于两个同类型操作符的操作，并且返回了操作符同类型的结果</td>
</tr>
<tr>
<td>BiPredicate&lt;T,U&gt;</td>
<td align="center">代表了一个两个参数的boolean值方法</td>
</tr>
</tbody></table>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>带Bi的就多一个参数.</li>
<li>带Function接收一个输入参数,返回一个特定类型.</li>
<li>带Consumer接收一个输入参数,无返回值.</li>
<li>带Predicate接收一个输入参数,返回boolean类型值.</li>
<li>带Supplier无输入参数,返回一个特定类型.</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java8新特性</tag>
      </tags>
  </entry>
  <entry>
    <title>javaee-spring01</title>
    <url>/javaee-spring01.html</url>
    <content><![CDATA[<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/wallhaven-6k91p6.png" alt="wallhaven-6k91p6" style="zoom:80%;" />

<a id="more"></a>

<h1 id="Javaee-Spring01"><a href="#Javaee-Spring01" class="headerlink" title="Javaee-Spring01"></a>Javaee-Spring01</h1><h2 id="概念阐述"><a href="#概念阐述" class="headerlink" title="概念阐述"></a>概念阐述</h2><h3 id="什么是Spring框架"><a href="#什么是Spring框架" class="headerlink" title="什么是Spring框架?"></a>什么是Spring框架?</h3><blockquote>
<p>来自维基百科的解释 : <strong>Spring框架</strong>是Java平台的一个开源的全栈(Full-stack)应用程序框架和控制反转容器实现,一般被直接称为 Spring,是针对bean的生命周期进行管理的轻量级容器(lightweight container).</p>
<p>那么简单来说 : <strong>Spring就是一个管理bean的容器,作为控制反转的容器实现</strong></p>
</blockquote>
<h3 id="为什么要使用Spring-Spring解决了什么问题"><a href="#为什么要使用Spring-Spring解决了什么问题" class="headerlink" title="为什么要使用Spring?Spring解决了什么问题?"></a>为什么要使用Spring?Spring解决了什么问题?</h3><blockquote>
<p>在解释为什么要使用Spring之前,我们不妨先来了解一种设计模式原则 : <strong>依赖倒置原则(Dependency Inversion Principle)</strong>.</p>
<p>那什么是<strong>依赖倒置原则</strong>呢?该原则包含如下2个原则 : </p>
<ul>
<li>上层模块不应该依赖底层模块，两者都应依赖于抽象</li>
<li>抽象不应该依赖细节,细节应该依赖抽象</li>
</ul>
<p>厚礼蟹!听起来有点厉害的样子,那么在Java中我们如何来描述这些含义呢?</p>
<p><strong>上层和底层</strong> : </p>
<p>无论哪一个实现逻辑下都是由表现层(上层)到底层,比如我们已经学过的JavaWeb的小案例中,在传统的MVC架构模式里,上层我们可以认为是Controller层,也就是我们的Servlet,在Servlet我们获取客户端中用户的输入对数据进行处理,通常我们处理的方式都是调用下层的代码来对该业务进行实现.比如在Servlet中调用Service层的实现,而在Service层中调用Dao层的实现.</p>
<p><strong>细节和抽象</strong> : </p>
<p>在Java中抽象代表抽象类或者接口,那么细节就代表抽象类或者接口对应的实现类,那么对应第二个含义的解释就为,抽象类和接口不应该依赖于其实现类,而实现类应该依赖其接口或抽象类.</p>
<p><strong>依赖倒置原则的中心思想为 : 面向接口编程</strong></p>
<p>瓦特法克?面向对象已经够难了?那么什么是面向接口呢?我们通过一个小案例来进行阐述.</p>
</blockquote>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>三年二班有位小周同学沉迷于电脑游戏,最近迷上了一款网游,于是迫不及待的登录游戏,创建角色开始游戏.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*网络游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetGame</span></span>&#123;</span><br><span class="line">	<span class="comment">//开始游戏</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"单机游戏开始"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//玩网络游戏</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(NetGame game)</span> </span>&#123;</span><br><span class="line">		game.startGame();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">		xiaoZhou.playGame(<span class="keyword">new</span> NetGame());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小周经过同学的介绍又迷上了另一款单机游戏,于是又连忙找到资源down下来开始玩耍,从此从早到晚玩的不亦乐乎.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*单机游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleGame</span></span>&#123;</span><br><span class="line">	<span class="comment">//开始游戏</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"单机游戏开始"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*网络游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetGame</span></span>&#123;</span><br><span class="line">	<span class="comment">//开始游戏</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"网络游戏开始"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//玩网络游戏</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(NetGame game)</span> </span>&#123;</span><br><span class="line">		game.startGame();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//玩单机游戏</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(SingleGame game)</span> </span>&#123;</span><br><span class="line">		game.startGame();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">		xiaoZhou.playGame(<span class="keyword">new</span> NetGame());</span><br><span class="line">		xiaoZhou.playGame(<span class="keyword">new</span> SingleGame());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好家伙,每当小周同学找到一款新类型的游戏,我们的程序将会越来越臃肿,那么问题在哪呢?我们看人物类Person是一个上层模块,并且是一个细节实现类,而Person类中的代码实现又依赖于NetGame&amp;SingleGame2个细节实现类,因此导致小周同学每一次开始玩新类型游戏都需要修改上层模块Person类的代码.很明显这有悖于我们上文提到的依赖倒置的原则.那么如何去修改呢?</p>
<h5 id="细节转抽象"><a href="#细节转抽象" class="headerlink" title="细节转抽象"></a>细节转抽象</h5><p>我们发现在NetGame和SingleGame中都具备开始游戏(startGame)的功能,那么我们可以将该功能抽取至接口IGame中,让NetGame和SingleGame实现该接口,在Person中的playGame方法中修改参数类型为该接口类型.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*游戏接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*单机游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleGame</span> <span class="keyword">implements</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line">	<span class="comment">//开始游戏</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"单机游戏开始"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*网络游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetGame</span> <span class="keyword">implements</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line">	<span class="comment">//开始游戏</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"网络游戏开始"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//玩游戏</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(IGame game)</span> </span>&#123;</span><br><span class="line">		game.startGame();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">		xiaoZhou.playGame(<span class="keyword">new</span> NetGame());</span><br><span class="line">		xiaoZhou.playGame(<span class="keyword">new</span> SingleGame());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过细节转抽象后,即时小周同学下次再发现了新游戏,我们上层模块(Person类)也不再需要修改.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*游戏接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*手机游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MobileGame</span> <span class="keyword">implements</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line">	<span class="comment">//开始游戏</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"手机游戏开始"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*单机游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleGame</span> <span class="keyword">implements</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line">	<span class="comment">//开始游戏</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"单机游戏开始"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*网络游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetGame</span> <span class="keyword">implements</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line">	<span class="comment">//开始游戏</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"网络游戏开始"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//玩游戏</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(IGame game)</span> </span>&#123;</span><br><span class="line">		game.startGame();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">		xiaoZhou.playGame(<span class="keyword">new</span> NetGame());</span><br><span class="line">		xiaoZhou.playGame(<span class="keyword">new</span> SingleGame());</span><br><span class="line">		xiaoZhou.playGame(<span class="keyword">new</span> MobileGame());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在依赖倒置原则中,依赖关系的传递有三种方式 : </p>
<ul>
<li>通过接口传递关系(就如上面的例子)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(IGame game)</span> </span>&#123;</span><br><span class="line">		game.startGame();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">    xiaoZhou.playGame(<span class="keyword">new</span> NetGame());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过构造函数传递关系</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> IGame game;	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(IGame game)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.game = game; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		game.startGame();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person xiaoZhou = <span class="keyword">new</span> Person(<span class="keyword">new</span> NetGame());</span><br><span class="line">    xiaoZhou.playGame();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过Setter方法传递关系</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;	</span><br><span class="line">	<span class="keyword">private</span> IGame game;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGame</span><span class="params">(IGame game)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.game = game;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		game.startGame();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">    xiaoZhou.setGame(<span class="keyword">new</span> NetGame());</span><br><span class="line">    xiaoZhou.playGame();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="上层不依赖底层"><a href="#上层不依赖底层" class="headerlink" title="上层不依赖底层"></a>上层不依赖底层</h5><p>解决了细节转抽象后,那么依赖倒置呢?我们继续修改代码.</p>
<p>小周同学接触了网络游戏后,创建游戏角色,然后操作游戏角色拿起武器攻击怪物,怪物的掉血量根据武器的攻击来决定.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*武器类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weapon</span></span>&#123;</span><br><span class="line">	<span class="comment">//武器攻击</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> ad = <span class="number">30</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"怪物掉"</span> + ad + <span class="string">"滴血!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*英雄类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Weapon weapon;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		weapon = <span class="keyword">new</span> Weapon();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		weapon.show();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*网络游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetGame</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Hero hero;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">NetGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		hero = <span class="keyword">new</span> Hero();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//开始游戏</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		hero.attack();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> NetGame game;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		game = <span class="keyword">new</span> NetGame();</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//玩游戏</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		game.startGame();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*测试类*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">		xiaoZhou.playGame();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>上面的代码我用图片来给大家解释</strong></p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201019021441.png" alt="20201019021441"></p>
<p>这类型的代码结构就是典型的上层依赖下层,那么这种结构有什么问题呢?假设我们将Weapon类修改一下,由原先的默认ad = 30攻击,改为通过构造函数的形式传入具体的攻击力.</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201019023211.png" alt="20201019023211"></p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201019023348.png" alt="20201019023348"></p>
<p>从上图可以看出,当仅仅修改了底层Weapon类的结构时,上层的每一层的构造函数都需要重新编写,这种设计在后期维护中简直就是灾难.如果在实际开发中,这样的类结构可能是成百上千个,如果每次为了修改一个类而导致依赖他的每个类都要进行修改,维护的成本未免太大.</p>
<p><strong>那么如何进行修改呢?</strong></p>
<p>既然我们不能上层依赖下层,那么将依赖的关系反转过来,由下层依赖上层,换种说法就是让上层控制下层.这里我们用<strong>依赖注入</strong>来实现控制反转.<strong>所谓的依赖注入,就是将下层类作为参数传入到上层类,从而实现上层对下层的控制</strong>.重新编写各层级代码.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*武器类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weapon</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> ad;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Weapon</span><span class="params">(<span class="keyword">int</span> ad)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.ad = ad;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"怪物掉"</span> + ad + <span class="string">"滴血!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*英雄类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Weapon weapon;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(Weapon weapon)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		weapon.show();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*网络游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetGame</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Hero hero;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">NetGame</span><span class="params">(Hero hero)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.hero = hero;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		hero.attack();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> NetGame game;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(NetGame game)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.game = game;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		game.startGame();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*测试类*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Weapon weapon = <span class="keyword">new</span> Weapon(<span class="number">50</span>);</span><br><span class="line">		Hero hero = <span class="keyword">new</span> Hero(weapon);</span><br><span class="line">		NetGame game = <span class="keyword">new</span> NetGame(hero);</span><br><span class="line">		Person xiaoZhou = <span class="keyword">new</span> Person(game);</span><br><span class="line">		xiaoZhou.playGame();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>看图</strong></p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201019025713.png" alt="20201019025713"></p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><blockquote>
<p>案例来到这里我们来进行简单的总结,其实由以上的案例我们不仅解释了什么是<strong>依赖倒置原则</strong>,还顺带讲解了2个概念.</p>
<ul>
<li><p><strong>控制反转</strong>:  <strong>Inversion of Control</strong>   , 我们可以通过控制反转的思路来实现依赖倒置.</p>
</li>
<li><p><strong>依赖注入</strong>:  <strong>Dependency Injection</strong>  , 要想实现控制反转,可以通过依赖注入的形式将低层的对象注入到上层,由上层管理下层.</p>
</li>
</ul>
<p>那么这些又和Spring有什么关系呢?接着往下看咯</p>
</blockquote>
<h4 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h4><blockquote>
<p>从上个案例中我们使用控制反转的思路,利用依赖注入的方式实现了依赖倒置.但是在测试类中我们在方法体内创建了大量的对象.看测试类代码</p>
</blockquote>
<p><strong>测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Weapon weapon = <span class="keyword">new</span> Weapon(<span class="number">50</span>);</span><br><span class="line">		Hero hero = <span class="keyword">new</span> Hero(weapon);</span><br><span class="line">		NetGame game = <span class="keyword">new</span> NetGame(hero);</span><br><span class="line">		Person xiaoZhou = <span class="keyword">new</span> Person(game);</span><br><span class="line">		xiaoZhou.playGame();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个测试类中的体现就是 , 小周同学为了玩这个网络游戏,不仅要自己创建网络游戏,还得创建英雄,还得创建一把武器.</p>
<p>再好比,今天客户(Customer)想要买条内裤,结果首先跑去市场(Market)然后去了店铺(Store),接着找到店员(Salesman),最后买了一条内裤(Underware).</p>
<p>但是在现在的信息化和互联网时代,这种操作是不是很费时间的操作?如果我们找一个”可靠”的<strong>第三方平台</strong>(TaoBao),在平台上搜索想要购买的商品,点击购买,最后内裤(Underware)邮寄到手上,尽管可能在<strong>第三方平台</strong>中会产生很多其他的对象,比如也有商铺(Store),客服(CustomerService),快递公司(Express)…等等对象,但Customer根本不需要操心这些对象是如何运行和操作的,只要内裤到手就OK!</p>
<p>那么这个管理这些对象的<strong>第三方平台</strong>是什么?对了,就是今天要讲的Spring.</p>
<p>再来回顾<strong>Spring</strong>的概念 : <strong>Spring就是一个管理bean的容器,作为控制反转的容器实现.</strong>也就是说Spring就是一个大的容器帮助我们管理一些bean对象,而这些bean对象一般都是为了实现控制反转所创建的.也就是这些.    </p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201019214510.png" alt="20201019214510" style="zoom: 80%;" />

<p><strong>有了这个容器后,就可以自动对我们代码里的对象进行初始化</strong>,当然我们需要通过<strong>配置</strong>来对这些对象进行自动化处理,不再需要我们手动的在代码中去写大量的new来实现,<strong>并且我们在使用最上层的实例时也不需要去关心其实现细节</strong>.这就是<strong>控制反转容器</strong>,而其实现就是我们大名鼎鼎的<strong>Spring</strong>了.</p>
<h4 id="最终总结"><a href="#最终总结" class="headerlink" title="最终总结"></a>最终总结</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201019220631.png" alt="20201019220631"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>javaweb篇-反射(二)</title>
    <url>/javaweb%E7%AF%87-reflection2.html</url>
    <content><![CDATA[<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/wallhaven-q61qg7.jpg" alt="wallhaven-q61qg7" style="zoom:80%;" />

<a id="more"></a>

<h1 id="JavaWeb-反射-二"><a href="#JavaWeb-反射-二" class="headerlink" title="JavaWeb-反射(二)"></a>JavaWeb-反射(二)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>本文继续深入学习反射&amp;使用反射改造之前Servlet案例中的代码结构</p>
</blockquote>
<h3 id="回顾前文"><a href="#回顾前文" class="headerlink" title="回顾前文"></a>回顾前文</h3><ul>
<li><p>从前文已经了解想要创建一个类的对象,并不是只有通过<strong>new</strong>关键字才能创建.</p>
</li>
<li><p>想要调用一个类的属性和其方法,只需先拿到该类的字节码文件即可.</p>
</li>
<li><p>获取Class对象的三种方式中其中一种只需要直到该Class所在的路径名即可.</p>
</li>
</ul>
<h3 id="问题解析"><a href="#问题解析" class="headerlink" title="问题解析"></a>问题解析</h3><blockquote>
<p>前文一开始抛出了3个Servlet相关的问题,我们按照之前的学习一个一个解答</p>
</blockquote>
<ol>
<li><p>Servlet中的service()方法怎么调用的?</p>
<p>答 : service()方法能够成功运行,即证明在Servlet被访问时,该Servlet对象被创建,并调用了service()方法</p>
</li>
<li><p>service()方法能调用的话?Servlet对象在哪里创建的?</p>
<p>答 : Servlet的创建很明显不是由我们当前Web应用手动通过new来创建的,是装载Servlet的容器Tomcat帮助我们创建了该Servlet对象.</p>
</li>
<li><p>为什么需要在web.xml中配置Servlet?</p>
<p>答 : Tomcat要想创建当前访问的Servlet对象,就需要知道该Servlet的字节码文件路径,通过路径名就可以获取该Servlet的字节码文件对象,然后通过反射中的newInstance()方法创建其对象,并获取Servlet中的service()方法对应的Method对象,再执行,所以我们需要在web.xml中对Servlet路径进行配置.</p>
</li>
</ol>
<h3 id="问题模拟"><a href="#问题模拟" class="headerlink" title="问题模拟"></a>问题模拟</h3><p><strong>模拟Tomcat容器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.refleciton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 模拟Tomcat容器</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWeb</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//1.通过解析web.xml文件得到Servlet的路径(这里采用jsoup框架解析)</span></span><br><span class="line">		<span class="comment">//a.通过pares方法得到文档document对象</span></span><br><span class="line">		Document document = Jsoup.parse(<span class="keyword">new</span> File(<span class="string">"web.xml"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line">		<span class="comment">//b.通过document对象获取标签中的内容---和js类似</span></span><br><span class="line">		Elements elements = document.getElementsByTag(<span class="string">"servlet-name"</span>);</span><br><span class="line">		String className = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">			<span class="comment">//找到匹配的servlet-name标签</span></span><br><span class="line">			<span class="keyword">if</span>(<span class="string">"ServletDemo"</span>.equals(element.html())) &#123;</span><br><span class="line">				<span class="comment">//该元素的下一个元素标签中的html内容即为全路径.</span></span><br><span class="line">				className = element.nextElementSibling().html();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(className != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">//2.根据路径名获取对应Servlet的Class对象</span></span><br><span class="line">			Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">			<span class="comment">//3.使用Class对象创建Servlet的实例</span></span><br><span class="line">			Object obj = clazz.newInstance();</span><br><span class="line">			<span class="comment">//4.获取Servlet中的service方法</span></span><br><span class="line">			Method method = clazz.getMethod(<span class="string">"service"</span>, Object<span class="class">.<span class="keyword">class</span>,<span class="title">Object</span>.<span class="title">class</span>)</span>;</span><br><span class="line">			<span class="comment">//5.调用service , 使用1 和 2 模拟request和response对象</span></span><br><span class="line">			method.invoke(obj, <span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>模拟Servlet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.refleciton.other;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 模拟Web应用中的Servlet</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(Object request,Object response)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"service run .... "</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>模拟web.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.java.refleciton.other.ServletDemo<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>aaa.bbb.ccc<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>输出结果</strong></p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">service run ....</span><br></pre></td></tr></table></figure>

<p><strong>结论</strong></p>
<ol>
<li>模拟时解析使用的是jsoup爬虫框架,使用方式参考JS&amp;JQuery</li>
<li>Tomcat容器中的代码只有一处需要改动,就是if判断中的Servlet的名称,实际上Tomcat容器可以根据web.xml中的url-parttern中的虚拟路径上的servlet-mapping标签获取servlet-name.这里简化了操作.</li>
<li>只是Java环境,所以使用了Object对象代替了HttpServletRequest&amp;HttpServletResponse对象</li>
</ol>
<p><strong>有图有真相</strong></p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201010160719.png" alt="20201010160719"></p>
<h2 id="案例改造"><a href="#案例改造" class="headerlink" title="案例改造"></a>案例改造</h2><blockquote>
<p>之前在servlet4中我们实现了一个登录注册的小案例,本篇文章中我们来对此案例利用反射进行优化改造.</p>
<p>优化内容 : </p>
<ol>
<li>对于Servlet的优化</li>
<li>应用程序中的对象的创建优化</li>
<li>数据库查询的优化</li>
</ol>
</blockquote>
<h3 id="1-Servlet的优化"><a href="#1-Servlet的优化" class="headerlink" title="1)Servlet的优化"></a>1)Servlet的优化</h3><h4 id="优化背景"><a href="#优化背景" class="headerlink" title="优化背景"></a>优化背景</h4><blockquote>
<p>在案例中,我们仅仅完成了一些用户相关的需求就创建了多个Servlet,开发后期用户相关的业务增加的同时,会导致Servlet也同时对比增加,会导致项目越来越庞大,后期的可维护性也非常差,当对业务进行增删时,同时需要对项目中的Servlet进行频繁的修改,比如</p>
<ol>
<li>登录业务–LoginServlet</li>
<li>注册业务–RegisterServlet</li>
<li>修改用户信息业务–UpdateUserServlet</li>
<li>删除用户信息业务–DeleteUserByIdServlet</li>
<li>等等..</li>
</ol>
<p>所以在此背景下,我们需要思考如何将所有业务相关的Servlet整合到一个Servlet中,比如用户相关的就封装为UserServlet,商品相关的就封装为ProductServlet,等等.</p>
</blockquote>
<h4 id="优化步骤"><a href="#优化步骤" class="headerlink" title="优化步骤"></a>优化步骤</h4><ol>
<li>将多个相关的业务Servlet整合到一个Servlet中,如将LoginServlet&amp;RegisterServlet整合为UserServlet</li>
</ol>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201015221102.png" alt="20201015221102"></p>
<p><strong>初步改造后的UserServlet.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.java.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.java.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.java.service.imp.UserServiceImp;</span><br><span class="line"><span class="keyword">import</span> com.java.utils.ResponseData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//将2个业务中都有的设置字符集代码抽取出来</span></span><br><span class="line">		request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">		response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//1.获取请求参数中的方法名</span></span><br><span class="line">		String methodName = request.getParameter(<span class="string">"method"</span>);</span><br><span class="line">		<span class="comment">//2.根据methodName决定要执行的方法</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"doLogin"</span>.equals(methodName)) &#123;</span><br><span class="line">			doLogin(request, response);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"doRegister"</span>.equals(methodName)) &#123;</span><br><span class="line">			doRegister(request, response);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//...等等其他业务</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doLogin</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//2.获取请求中的表单参数</span></span><br><span class="line">		String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">		String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">		<span class="comment">//3.调用业务层UserService实现登录业务</span></span><br><span class="line">		UserService us = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line">		<span class="comment">//4.准备回传参数对象</span></span><br><span class="line">		ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			User user = us.loginByUserNameAndPassword(userName, password);</span><br><span class="line">			<span class="keyword">if</span>(user != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">//登录成功</span></span><br><span class="line">				responseData = responseData.success(<span class="string">"登陆成功"</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">//登录失败</span></span><br><span class="line">				responseData = responseData.fail(<span class="string">"用户名密码不正确..."</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//使用response的getWriter将其写回</span></span><br><span class="line">			<span class="comment">//使用第三方工具fastjson将对象转换成Json字符串</span></span><br><span class="line">			String jsonString = JSON.toJSONString(responseData);</span><br><span class="line">			<span class="comment">//写回字符串</span></span><br><span class="line">			response.getWriter().write(jsonString);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doRegister</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//2.获取请求中的表单参数</span></span><br><span class="line">		String userEmail = request.getParameter(<span class="string">"userEmail"</span>);</span><br><span class="line">		String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">		String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">		<span class="comment">//3.调用业务层UserService实现注册业务</span></span><br><span class="line">		UserService us = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line">		<span class="comment">//4.准备回传参数对象</span></span><br><span class="line">		ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">boolean</span> result = us.registerWithUserInfo(userName,password,userEmail);</span><br><span class="line">			<span class="keyword">if</span>(result) &#123;</span><br><span class="line">				responseData = responseData.success(<span class="string">"注册成功,请重新登陆.."</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				responseData = responseData.success(<span class="string">"注册失败,请稍后再试!"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//使用第三方工具fastjson将对象转换成Json字符串</span></span><br><span class="line">			String jsonString = JSON.toJSONString(responseData);</span><br><span class="line">			<span class="comment">//写回字符串</span></span><br><span class="line">			response.getWriter().write(jsonString);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>经过1步骤的优化后,项目开发中涉及到用户相关的业务操作全都可以封装在一个UserServlet中,并且通过不同方法名称就能调用对应的业务逻辑.</p>
</blockquote>
<ol start="2">
<li>如果在项目中有很多的Servlet,那我们可以对所有的Servlet中的代码继续进行抽取,比如doGet()和doPost()方法.</li>
</ol>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201015223414.png" alt="20201015223414" style="zoom: 67%;" />

<p><strong>抽取出的BaseServlet.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//将2个业务中都有的设置字符集代码抽取出来</span></span><br><span class="line">		request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">		response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//1.获取请求参数中的方法名</span></span><br><span class="line">			String methodName = request.getParameter(<span class="string">"method"</span>);</span><br><span class="line">			<span class="comment">//2.使用反射根据methodName决定要执行的方法</span></span><br><span class="line">			Class&lt;? extends BaseServlet&gt; clazz = <span class="keyword">this</span>.getClass();</span><br><span class="line">			Method method = clazz.getMethod(methodName, HttpServletRequest<span class="class">.<span class="keyword">class</span>,<span class="title">HttpServletResponse</span>.<span class="title">class</span>)</span>;</span><br><span class="line">			<span class="comment">//3.方法调用</span></span><br><span class="line">			method.invoke(<span class="keyword">this</span>, request,response);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>有了BaseServlet后,UserServlet或者其他的Servlet中就不需要再去重写doGet或者doPost方法,但要注意的是请求参数中的<strong>method的值必须和方法名一一对应</strong></p>
</blockquote>
<ol start="3">
<li>在前2步的基础上,我们可以对UserServlet下的doLogin方法或者其他业务逻辑方法的返回值进行相关的封装</li>
</ol>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201015225718.png" alt="20201015225718" style="zoom:80%;" />

<p><strong>优化后的BaseServlet.java和UserServlet.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//将2个业务中都有的设置字符集代码抽取出来</span></span><br><span class="line">		request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">		response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//1.获取请求参数中的方法名</span></span><br><span class="line">			String methodName = request.getParameter(<span class="string">"method"</span>);</span><br><span class="line">			<span class="comment">//2.使用反射根据methodName决定要执行的方法</span></span><br><span class="line">			Class&lt;? extends BaseServlet&gt; clazz = <span class="keyword">this</span>.getClass();</span><br><span class="line">			Method method = clazz.getMethod(methodName, HttpServletRequest<span class="class">.<span class="keyword">class</span>,<span class="title">HttpServletResponse</span>.<span class="title">class</span>)</span>;</span><br><span class="line">			<span class="comment">//3.方法调用</span></span><br><span class="line">			Object result = method.invoke(<span class="keyword">this</span>, request,response);</span><br><span class="line">			<span class="keyword">if</span>(result != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">//返回值内容是对象还是字符串?</span></span><br><span class="line">				<span class="keyword">if</span>(result <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">					<span class="comment">//如果是字符串---&gt;做路径的跳转,一种是重定向,一种请求转发</span></span><br><span class="line">					String contextPath = request.getContextPath();</span><br><span class="line">					String path = result.toString();</span><br><span class="line">					String viewName = <span class="keyword">null</span>;<span class="comment">//需要重新定下的视图名称</span></span><br><span class="line">					<span class="keyword">if</span>(path.contains(<span class="string">"redirect"</span>)) &#123;</span><br><span class="line">						<span class="comment">//重定向</span></span><br><span class="line">						viewName = path.substring(<span class="number">9</span>) + <span class="string">".jsp"</span>;</span><br><span class="line">						response.sendRedirect(contextPath + viewName);</span><br><span class="line">					&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">						<span class="comment">//请求转发</span></span><br><span class="line">						viewName = path + <span class="string">".jsp"</span>;</span><br><span class="line">						request.getRequestDispatcher(viewName).forward(request, response);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">//如果是对象---&gt;做Ajax请求,利用response对象写json字符串回去</span></span><br><span class="line">					response.getWriter().write(JSON.toJSONString(result));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.java.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.java.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.java.service.imp.UserServiceImp;</span><br><span class="line"><span class="keyword">import</span> com.java.utils.ResponseData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ResponseData <span class="title">doLogin</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//2.获取请求中的表单参数</span></span><br><span class="line">		String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">		String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">		<span class="comment">//3.调用业务层UserService实现登录业务</span></span><br><span class="line">		UserService us = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line">		<span class="comment">//4.准备回传参数对象</span></span><br><span class="line">		ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			User user = us.loginByUserNameAndPassword(userName, password);</span><br><span class="line">			<span class="keyword">if</span>(user != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">//登录成功,返回成功状态对象</span></span><br><span class="line">				<span class="keyword">return</span> responseData.success(<span class="string">"登陆成功"</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">//登录失败,返回失败状态对象</span></span><br><span class="line">				<span class="keyword">return</span> responseData.fail(<span class="string">"用户名密码不正确..."</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> responseData.fail(<span class="string">"服务器操作失败...请稍候再试!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ResponseData <span class="title">doRegister</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//2.获取请求中的表单参数</span></span><br><span class="line">		String userEmail = request.getParameter(<span class="string">"userEmail"</span>);</span><br><span class="line">		String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">		String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">		<span class="comment">//3.调用业务层UserService实现注册业务</span></span><br><span class="line">		UserService us = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line">		<span class="comment">//4.准备回传参数对象</span></span><br><span class="line">		ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">boolean</span> result = us.registerWithUserInfo(userName,password,userEmail);</span><br><span class="line">			<span class="keyword">if</span>(result) &#123;</span><br><span class="line">				<span class="keyword">return</span> responseData.success(<span class="string">"注册成功,请重新登陆.."</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> responseData.fail(<span class="string">"注册失败,请稍后再试!"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> responseData.fail(<span class="string">"服务器操作失败...请稍候再试!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>经过最终的优化,在Servlet中只需要通过对应的返回值就能决定当前是需要<strong>请求转发</strong>/<strong>重定向</strong>至某个路径,还是返回<strong>Json对象</strong>给前台使用.</p>
</blockquote>
<h3 id="2-数据库查询优化"><a href="#2-数据库查询优化" class="headerlink" title="2)数据库查询优化"></a>2)数据库查询优化</h3><blockquote>
<p>我们先来分析下原有的UserDao中的查询的实现,分析存在的问题</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 根据用户名密码查询用户</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="function">User <span class="title">getUserByUserNameAndPassword</span><span class="params">(String userName,String password)</span><span class="keyword">throws</span> SQLException</span>;</span><br></pre></td></tr></table></figure>

<h4 id="优化背景-1"><a href="#优化背景-1" class="headerlink" title="优化背景"></a>优化背景</h4><blockquote>
<p>   <strong>存在问题</strong> : </p>
<ol>
<li><p>如果在原有的接口中继续添加相关查询方法,比如根据邮箱密码查询用户,或者其他条件查询用户,需要增加其他方法.</p>
</li>
<li><p>在User相关dao操作中需要做查询返回对应User对象,其他比如Product,Order的相关dao操作中,也需要返回对应的Product或者Order对象,在业务逻辑中封装对象的操作非常繁琐.</p>
</li>
</ol>
</blockquote>
<h4 id="优化步骤-1"><a href="#优化步骤-1" class="headerlink" title="优化步骤"></a>优化步骤</h4><ol>
<li>修改方法的参数为可变参数</li>
</ol>
<p><strong>JDBCUtils.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取连接...</span></span><br><span class="line"><span class="comment">//释放资源...</span></span><br><span class="line"><span class="comment">//封装查询方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserByClause</span><span class="params">(Object... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果有Product</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">getProductByClause</span><span class="params">(Object... args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果有Order...</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>通过在参数中指定对应的字节码文件返回其对象</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装查询方法</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String sql, Class&lt;T&gt; clazz , Object... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1.声明T对象</span></span><br><span class="line">    T t = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//2.根据参数中传入的字节码文件 创建其对象</span></span><br><span class="line">    t = clazz.newInstance();</span><br><span class="line">    Connection conn = getConnection();</span><br><span class="line">    PreparedStatement pstmt = conn.prepareStatement(sql);</span><br><span class="line">    <span class="comment">//3.遍历传入的参数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">        pstmt.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.执行查询</span></span><br><span class="line">    ResultSet rs = pstmt.executeQuery();</span><br><span class="line">    <span class="comment">//5.获取结果集中的元数据对象</span></span><br><span class="line">    ResultSetMetaData metaData = rs.getMetaData();</span><br><span class="line">    <span class="keyword">if</span>(rs.next()) &#123;<span class="comment">//如果有数据</span></span><br><span class="line">        <span class="comment">//6.创建Map封装数据库中的字段名以及对应的值</span></span><br><span class="line">        Map&lt;String, Object&gt; map = getMapFromResultSet(rs, metaData);</span><br><span class="line">        <span class="comment">//7.遍历map,并将class字节码文件中的每个字段赋值</span></span><br><span class="line">        populateBean(clazz, t, map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">selectList</span><span class="params">(String sql, Class&lt;T&gt; clazz , Object... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1.声明集合对象</span></span><br><span class="line">    List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">    <span class="comment">//2.准备Connection&amp;Statement对象</span></span><br><span class="line">    Connection conn = getConnection();</span><br><span class="line">    PreparedStatement pstmt = conn.prepareStatement(sql);</span><br><span class="line">    <span class="comment">//3.判断&amp;遍历传入的参数</span></span><br><span class="line">    <span class="keyword">if</span>(args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            pstmt.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.执行查询</span></span><br><span class="line">    ResultSet rs = pstmt.executeQuery();</span><br><span class="line">    <span class="comment">//5.获取结果集中的元数据对象</span></span><br><span class="line">    ResultSetMetaData metaData = rs.getMetaData();</span><br><span class="line">    <span class="keyword">while</span>(rs.next()) &#123;<span class="comment">//如果有一行数据</span></span><br><span class="line">        <span class="comment">//6.创建一个对象</span></span><br><span class="line">        T t = clazz.newInstance();</span><br><span class="line">        <span class="comment">//7.使用Map封装表中字段和值</span></span><br><span class="line">        Map&lt;String, Object&gt; map = getMapFromResultSet(rs, metaData);</span><br><span class="line">        <span class="comment">//8.遍历Map给class中的字段赋值</span></span><br><span class="line">        populateBean(clazz, t, map);</span><br><span class="line">        <span class="comment">//9.集合保存对象</span></span><br><span class="line">        list.add(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*封装Bean*/</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">populateBean</span><span class="params">(Class&lt;T&gt; clazz, T t, Map&lt;String, Object&gt; map)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;String, Object&gt; entry : map.entrySet()) &#123;</span><br><span class="line">        Field field = clazz.getDeclaredField(entry.getKey());</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(t, entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*使用Map封装表中的字段名&amp;值,并返回*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">getMapFromResultSet</span><span class="params">(ResultSet rs, ResultSetMetaData metaData)</span> 	<span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; metaData.getColumnCount(); i++) &#123;</span><br><span class="line">        String labelName = metaData.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line">        Object value = rs.getObject(labelName);</span><br><span class="line">        map.put(labelName, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>优化后,涉及到查询的单个对象查询的操作可以使用selectOne,多个对象查询的操作可以使用selectList.在查询到对象的同时会根据表中和Bean中的字段自动封装并返回对象,是不是更为方便呢?</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>本篇文章继续使用反射对前文的问题进行解析,并对之前案例进行改造.</p>
</blockquote>
<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2>
<div style="position: relative; width: 100%; height: 0;padding-bottom: 75%;">
<iframe src="//player.bilibili.com/player.html?aid=669879000&bvid=BV1Na4y1L7jT&cid=246463513&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe>
</div>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>javaweb篇-反射(一)</title>
    <url>/javaweb%E7%AF%87-reflection.html</url>
    <content><![CDATA[<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/wallhaven-j5z6mq.jpg" alt="wallhaven-j5z6mq" style="zoom:80%;" />

<a id="more"></a>

<h1 id="JavaWeb-反射-一"><a href="#JavaWeb-反射-一" class="headerlink" title="JavaWeb-反射(一)"></a>JavaWeb-反射(一)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="学习反射之前的几个小反思"><a href="#学习反射之前的几个小反思" class="headerlink" title="学习反射之前的几个小反思"></a>学习反射之前的几个小反思</h4><ol>
<li>Servlet中的service()方法怎么调用的?</li>
<li>service()方法能调用的话?Servlet对象在哪里创建的?</li>
<li>为什么需要在web.xml中配置Servlet?</li>
</ol>
<h4 id="什么是反射？"><a href="#什么是反射？" class="headerlink" title="什么是反射？"></a>什么是反射？</h4><blockquote>
<p>在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。 (摘自其他.)</p>
<p><strong>简单来说就是在当前应用中只要给我某个类的名称,就相当于我已经知道了当前类中的所有属性和方法,并且还能创建其类的对象(不管该类有没有私有化构造函数.),还能随意调用其属性和方法.</strong>光这么一说是不是就觉得反射很霸道?嗯?还是不懂?继续往下看吧.</p>
</blockquote>
<h4 id="为什么要使用反射"><a href="#为什么要使用反射" class="headerlink" title="为什么要使用反射?"></a>为什么要使用反射?</h4><blockquote>
<p>在上面提到反射时,是不是就觉得反射有悖于面向对象的原则.学习面向对象时,面向对象的特征之一就是封装,而封装的好处就是隐藏类中某些方法的实现和属性,不直接暴露给外界调用,增强程序的安全性.但是一旦有了反射,类中的私有化设置将是一滩笑话,无论你是私有还是非私有,这个类就像一个摆在你面前被捆缚的小绵羊,任你宰割.</p>
<p>那么我们为什么还要去使用他呢?因为我们可以利用这些霸道的设定来完成很多我们之前完成不了的事情,让我们的程序更加智能化和自动化,是动态语言框架的关键&amp;基础.比如最开始上面的3个小问题,都是由反射来解决的.那么反射是如何做到这些的呢?继续往下分解</p>
</blockquote>
<h2 id="反射中的几个重要对象"><a href="#反射中的几个重要对象" class="headerlink" title="反射中的几个重要对象"></a>反射中的几个重要对象</h2><blockquote>
<p>反射的具体使用要从下面几个对象开始.</p>
</blockquote>
<h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><blockquote>
<p>Class 和 class , class是关键字,代表字节码文件,而Class则为描述class字节码文件的类,这个字节码文件既可以是类也可以是接口.</p>
</blockquote>
<h4 id="Class中的重要方法"><a href="#Class中的重要方法" class="headerlink" title="Class中的重要方法"></a>Class中的重要方法</h4><blockquote>
<p>Class类中有很多方法,挑几个我们学习时需要的.</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法</th>
<th>方法描述</th>
</tr>
</thead>
<tbody><tr>
<td>static Class&lt;?&gt; <strong>forName</strong>(String className)</td>
<td>根据类或者接口的全名返回相关的类对象</td>
</tr>
<tr>
<td>String <strong>getName</strong>()</td>
<td>获取类的全名(包名 + 类名)</td>
</tr>
<tr>
<td>T <strong>newInstance</strong>()</td>
<td>创建该字节码文件的对象</td>
</tr>
<tr>
<td>Class&lt;?&gt;[] <strong>getInterfaces</strong>()</td>
<td>获取该类上的所有接口字节码文件</td>
</tr>
<tr>
<td>ClassLoader <strong>getClassLoader</strong>()</td>
<td>获取类加载器</td>
</tr>
</tbody></table>
<blockquote>
<p>知道一些常用的方法后,如何去获取Class对象呢?</p>
</blockquote>
<ul>
<li>根据该类对象获取其Class字节码文件对象</li>
<li>根据类名.class直接返回Class字节码文件对象</li>
<li>使用Class.forName(String className)根据名称获取字节码文件对象</li>
</ul>
<p><strong>Student.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.refleciton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Student对象初始化了..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ReflectionDemo01.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.refleciton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取字节码文件对象,调用方法</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionDemo01</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//1.根据该类对象获取其Class字节码文件对象</span></span><br><span class="line">		Student student = <span class="keyword">new</span> Student();</span><br><span class="line">		Class clazz1 = student.getClass();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2.根据类名.class直接返回Class字节码文件对象</span></span><br><span class="line">		Class clazz2 = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//3.使用Class.forName(String className)根据名称获取字节码文件对象</span></span><br><span class="line">		Class clazz3 = Class.forName(<span class="string">"com.java.refleciton.Student"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//4.判断3个Class对象是否相等</span></span><br><span class="line">		System.out.println(clazz1 == clazz2 &amp;&amp; clazz2 == clazz3);<span class="comment">//true</span></span><br><span class="line">        </span><br><span class="line">        	<span class="comment">//5.调用newInstance()方法创建该类对象,类的空参构造运行则成功创建</span></span><br><span class="line">		Object obj = clazz1.newInstance();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出结果</strong></p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">Student对象初始化了...</span><br><span class="line">true</span><br><span class="line">Student对象初始化了...</span><br></pre></td></tr></table></figure>

<p><strong>结论</strong></p>
<ol>
<li>前3步分别通过不同方式获取的是同一个字节码文件</li>
<li>第3步中的forName()参数名称必须是该类的 完整路径名 = 包名 + 类名</li>
<li>第5步中的newInstance()方法和new Student()一样都是走的该类的空参构造函数</li>
</ol>
<h3 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h3><blockquote>
<p>在上文中提到获取了Class对象后,我们可以获取该Class对象中的任意方法和属性.</p>
</blockquote>
<h4 id="Class中获取Constructor涉及的方法"><a href="#Class中获取Constructor涉及的方法" class="headerlink" title="Class中获取Constructor涉及的方法"></a>Class中获取Constructor涉及的方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>方法描述</th>
</tr>
</thead>
<tbody><tr>
<td>Constructor <strong>getConstructor</strong>(Class… parameterTypes)</td>
<td>获取该字节码文件中对应参数公有构造器</td>
</tr>
<tr>
<td>Constructor[] <strong>getConstructors</strong>()</td>
<td>获取该字节码文件中所有公有构造器</td>
</tr>
<tr>
<td>Constructor <strong>getDeclaredConstructor</strong>(Class… parameterTypes)</td>
<td>获取该字节码文件中对应参数的构造器(无论私有公有)</td>
</tr>
<tr>
<td>Constructor[] <strong>getDeclaredConstructors</strong>()</td>
<td>获取该字节码文件中所有的构造器</td>
</tr>
</tbody></table>
<h4 id="Constructor中常用方法"><a href="#Constructor中常用方法" class="headerlink" title="Constructor中常用方法"></a>Constructor中常用方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>方法描述</th>
</tr>
</thead>
<tbody><tr>
<td>T <strong>newInstance</strong>(Object… initargs)</td>
<td>通过参数返回该字节码文件对象,并初始化</td>
</tr>
<tr>
<td><strong>setAccessible</strong>(boolean flag)</td>
<td>设置访问权限</td>
</tr>
</tbody></table>
<p><strong>Student.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.refleciton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"空参构造器"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age,String sex)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">		<span class="keyword">this</span>.sex = sex;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> sex;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.sex = sex;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Student [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">", sex="</span> + sex + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    	<span class="comment">/*空参无返回值方法*/</span></span><br><span class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">noReturnsWithoutArgs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"noReturnsWithoutArgs method run...."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*带参有返回值方法*/</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">returnStringWithArgs</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> msg + <span class="string">" run"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ReflectionDemo02.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.refleciton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionDemo02</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//1.获取字节码文件对象</span></span><br><span class="line">		Class clazz = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">		<span class="comment">//2.获取该字节码文件对象中对应参数列表的公有构造器 --这里调用2个参数的</span></span><br><span class="line">		Constructor constructor = clazz.getConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">		<span class="comment">//3.通过构造器创建其对象并强转</span></span><br><span class="line">		Student stu = (Student) constructor.newInstance(<span class="string">"张三"</span>,<span class="number">11</span>);</span><br><span class="line">		<span class="comment">//4.输出stu</span></span><br><span class="line">		System.out.println(stu);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//5.重新调用3个参数的私有构造器</span></span><br><span class="line">		Constructor constructor2 = clazz.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>,<span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">		<span class="comment">//6.访问私有的构造器必须先设置访问权限为可访问</span></span><br><span class="line">		constructor2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">		<span class="comment">//7.继续调用</span></span><br><span class="line">		Student stu1 = (Student) constructor2.newInstance(<span class="string">"王五"</span>,<span class="number">22</span>,<span class="string">"女"</span>);</span><br><span class="line">		<span class="comment">//8.查看输出</span></span><br><span class="line">		System.out.println(stu1);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//9.获取公有构造器数组</span></span><br><span class="line">		Constructor[] constructors = clazz.getConstructors();</span><br><span class="line">		System.out.println(Arrays.asList(constructors));</span><br><span class="line">		<span class="comment">//10.获取所有类中定义的构造器数组</span></span><br><span class="line">		Constructor[] declaredConstructors = clazz.getDeclaredConstructors();</span><br><span class="line">		System.out.println(Arrays.asList(declaredConstructors));</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出结果</strong></p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">Student [name=张三, age=11, sex=null]</span><br><span class="line">Student [name=王五, age=22, sex=女]</span><br><span class="line">[public com.java.refleciton.Student(java.lang.String,int), public com.java.refleciton.Student()]</span><br><span class="line">[private com.java.refleciton.Student(java.lang.String,int,java.lang.String), public com.java.refleciton.Student(java.lang.String,int), public com.java.refleciton.Student()]</span><br></pre></td></tr></table></figure>

<p><strong>结论</strong></p>
<ol>
<li>调用getConstructor()/getDeclaredConstructor()的参数为对应参数类型的字节码文件类型,如String.class,int.class等</li>
<li>调用newInstance()方法时,需传入对应参数类型的值</li>
<li>调用私有构造器需使用getDeclaredConstructor()方法</li>
<li>拿到私有构造器后,如需要使用该构造器对象必须先设置其访问权限为可访问,即setAccessible(true);</li>
</ol>
<h3 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h3><h4 id="Class中获取Field涉及的方法"><a href="#Class中获取Field涉及的方法" class="headerlink" title="Class中获取Field涉及的方法"></a>Class中获取Field涉及的方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>方法描述</th>
</tr>
</thead>
<tbody><tr>
<td>Field <strong>getField</strong>(String name)</td>
<td>根据字段名返回公有Field对象</td>
</tr>
<tr>
<td>Field[] <strong>getFields</strong>()</td>
<td>获取所有的公有Field对象</td>
</tr>
<tr>
<td>Field <strong>getDeclaredField</strong>(String name)</td>
<td>根据字段名返回<strong>任意</strong>Field对象</td>
</tr>
<tr>
<td>Field[] <strong>getDeclaredFields</strong>()</td>
<td>获取<strong>所有</strong>Field对象</td>
</tr>
</tbody></table>
<h4 id="Field中常用方法"><a href="#Field中常用方法" class="headerlink" title="Field中常用方法"></a>Field中常用方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>方法描述</th>
</tr>
</thead>
<tbody><tr>
<td>Object <strong>get</strong>(Object obj)</td>
<td>获取obj对象中对应字段的值</td>
</tr>
<tr>
<td><strong>set</strong>(Object obj, Object value)</td>
<td>给obj对象的当前字段赋值</td>
</tr>
<tr>
<td><strong>setAccessible</strong>(boolean flag)</td>
<td>设置访问权限</td>
</tr>
</tbody></table>
<p><strong>ReflectionDemo03.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.refleciton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionDemo03</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//1.获取字节码文件对象</span></span><br><span class="line">		Class clazz = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">		<span class="comment">//2.获取Student对象中私有的字段name,并赋值</span></span><br><span class="line">		Field field = clazz.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">		<span class="comment">//3.创建对象</span></span><br><span class="line">		Object obj = clazz.newInstance();</span><br><span class="line">		<span class="comment">//4.设置访问权限</span></span><br><span class="line">		field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">		<span class="comment">//5.赋值</span></span><br><span class="line">		field.set(obj, <span class="string">"李四"</span>);</span><br><span class="line">		<span class="comment">//6.查看输出</span></span><br><span class="line">		System.out.println((Student)obj);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出结果</strong></p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">Student [name=李四, age=0, sex=null]</span><br></pre></td></tr></table></figure>

<p><strong>结论</strong></p>
<ol>
<li>和Constructor一样,获取私有的字段需要使用getDeclaredField()/getDeclaredFields()方法</li>
<li>使用私有Field时时需要先<strong>设置访问权限</strong></li>
</ol>
<h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><h4 id="Class中获取Method涉及的方法"><a href="#Class中获取Method涉及的方法" class="headerlink" title="Class中获取Method涉及的方法"></a>Class中获取Method涉及的方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>方法描述</th>
</tr>
</thead>
<tbody><tr>
<td>Method <strong>getMethod</strong>(String name, Class… parameterTypes)</td>
<td>根据对应方法的参数类型和名称获取公有Method对象</td>
</tr>
<tr>
<td>Method[] <strong>getMethods</strong>()</td>
<td>获取所有公有Method对象</td>
</tr>
<tr>
<td>Method <strong>getDeclaredMethod</strong>(String name, Class… parameterTypes)</td>
<td>根据对应方法的参数类型和名称获取<strong>任意</strong>Method对象</td>
</tr>
<tr>
<td>Method[] <strong>getDeclaredMethods</strong>()</td>
<td>获取<strong>所有</strong>Method对象</td>
</tr>
</tbody></table>
<h4 id="Method中常用方法"><a href="#Method中常用方法" class="headerlink" title="Method中常用方法"></a>Method中常用方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>方法描述</th>
</tr>
</thead>
<tbody><tr>
<td>Object <strong>invoke</strong>(Object obj,Object… args)</td>
<td>执行Method对象所对应的的方法,并返回其结果</td>
</tr>
<tr>
<td><strong>setAccessible</strong>(boolean flag)</td>
<td>设置访问权限</td>
</tr>
</tbody></table>
<p><strong>ReflectionDemo04.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.refleciton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionDemo04</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//1.获取字节码文件对象</span></span><br><span class="line">		Class clazz = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">		<span class="comment">//2.获取noReturnsWithoutArgs方法对象</span></span><br><span class="line">		Method method = clazz.getMethod(<span class="string">"noReturnsWithoutArgs"</span>);</span><br><span class="line">		<span class="comment">//3.创建对象</span></span><br><span class="line">		Object obj = clazz.newInstance();</span><br><span class="line">		<span class="comment">//4.执行方法</span></span><br><span class="line">		Object returnValue = method.invoke(obj);</span><br><span class="line">		<span class="comment">//5.打印返回值</span></span><br><span class="line">		System.out.println(<span class="string">"returnValue : "</span> + returnValue);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//6.获取</span></span><br><span class="line">		Method method2 = clazz.getDeclaredMethod(<span class="string">"returnStringWithArgs"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="comment">//7.设置访问权限</span></span><br><span class="line">		method2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">		<span class="comment">//8.调用方法</span></span><br><span class="line">		Object returnValue2 = method2.invoke(obj,<span class="string">"This is another method"</span>);</span><br><span class="line">		<span class="comment">//9.查看返回值并输出</span></span><br><span class="line">		System.out.println(<span class="string">"returnValue2 : "</span> + returnValue2);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出结果</strong></p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">noReturnsWithoutArgs method run....</span><br><span class="line">returnValue : null</span><br><span class="line">returnValue2 : This is another method run</span><br></pre></td></tr></table></figure>

<p><strong>结论</strong></p>
<ol>
<li>和Constructor和Field一样,访问私有需使用getDeclaredMethod()/getDeclaredMethods()方法</li>
<li>使用私有Method前需要<strong>先设置访问权限</strong></li>
<li>和Constructor一样,想要调用对应的方法,不仅要给出正确的方法名称,还需要正确的参数列表(参数和参数类型).</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>Class对象的三种获取方式 &amp; 和Class对象中的一些常用方法</li>
<li>Constructor的获取 &amp; Constructor的使用</li>
<li>Field的获取 &amp; Field的使用</li>
<li>Method的获取 &amp; Method的使用</li>
<li>注意私有&amp;非私有对象的获取方式&amp;使用时访问权限的设置</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>javaweb篇-servlet4</title>
    <url>/javaweb%E7%AF%87-servlet4.html</url>
    <content><![CDATA[<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/wallhaven-5dpy89.jpg" alt="wallhaven-5dpy89" style="zoom:80%;" />
<a id="more"></a>

<h1 id="JavaWeb-Servlet-四"><a href="#JavaWeb-Servlet-四" class="headerlink" title="JavaWeb-Servlet(四)"></a>JavaWeb-Servlet(四)</h1><h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><blockquote>
<p>在前3篇文章中,我们应该已经掌握了Servlet和其中的Request和Response等对象的用法,这篇文章我们使用这些对象完成一个小案例.</p>
</blockquote>
<h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><blockquote>
<p>完成简单登录注册.</p>
<p>使用技术 :</p>
<ul>
<li>前端 : html + css + js + jQuery(Ajax)</li>
<li>后台 : Servlet + JDBC</li>
</ul>
<p>工具&amp;环境 : jdk1.8 + tomcat8.0 + Eclipse</p>
</blockquote>
<h4 id="看图说话"><a href="#看图说话" class="headerlink" title="看图说话"></a>看图说话</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201007005949.png" alt="20201007005949"></p>
<p><strong>根据图片的逻辑我们1步1步来完成</strong>..</p>
<h3 id="一-创建工程-amp-前期准备"><a href="#一-创建工程-amp-前期准备" class="headerlink" title="一 . 创建工程&amp;前期准备"></a>一 . 创建工程&amp;前期准备</h3><blockquote>
<p>步骤如下 :</p>
<ol>
<li>创建工程ServletTest</li>
<li>创建对应包, 如 dao,service,utils,bean,web等常用包</li>
<li>在<strong>WebContent</strong>目录下的<strong>WEB-INF</strong>文件中导入所需的jar包,数据库连接包,fastjson包等.</li>
<li>导入数据库的数据文件和db.properties等文件.</li>
</ol>
</blockquote>
<h4 id="数据库SQL"><a href="#数据库SQL" class="headerlink" title="数据库SQL"></a><strong>数据库SQL</strong></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for users</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`users`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span>  (</span><br><span class="line">  <span class="string">`userId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`userName`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`userEmail`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`userId`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">6</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = <span class="keyword">Compact</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of users</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`users`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'zhangsan'</span>, <span class="string">'zhangsan@qq.com'</span>, <span class="string">'123456'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`users`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'wangwu'</span>, <span class="string">'wangwu@qq.com'</span>, <span class="string">'666666'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`users`</span> <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'lisi'</span>, <span class="string">'lisi@qq.com'</span>, <span class="string">'666666'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`users`</span> <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'赵四'</span>, <span class="string">'zhaosi@qq.com'</span>, <span class="string">'999999'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`users`</span> <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">'老王'</span>, <span class="string">'laowang@qq.com'</span>, <span class="string">'laowang6666'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>将以上代码在sqlyog或者navicat等工具中直接运行即可,记住选中自己的数据库哦..</strong></p>
<h4 id="数据库配置文件—-db-properties"><a href="#数据库配置文件—-db-properties" class="headerlink" title="数据库配置文件—-db.properties"></a>数据库配置文件—-db.properties</h4><p><strong>注意此文件放置在src文件夹目录下</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/自己的数据库名</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">数据库用户名</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">数据库密码</span></span><br></pre></td></tr></table></figure>

<h4 id="数据库工具类—-JDBCUtils"><a href="#数据库工具类—-JDBCUtils" class="headerlink" title="数据库工具类—-JDBCUtils"></a>数据库工具类—-JDBCUtils</h4><p><strong>此文件放置在utils包下</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  简单的数据库连接工具类.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> String driverClassName = <span class="keyword">null</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="keyword">null</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> String username = <span class="keyword">null</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123; </span><br><span class="line">   <span class="comment">//使用类加载器来读取src文件夹路径</span></span><br><span class="line">   String path = JDBCUtils.class.getClassLoader().getResource("").getPath();</span><br><span class="line">   <span class="comment">//使用Properties对象读取db.properties文件</span></span><br><span class="line">   Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">   properties.load(<span class="keyword">new</span> FileReader(path + File.separator + <span class="string">"db.properties"</span>));</span><br><span class="line">   <span class="comment">//读取后给参数名赋值</span></span><br><span class="line">   driverClassName = properties.getProperty(<span class="string">"driverClassName"</span>);</span><br><span class="line">   url = properties.getProperty(<span class="string">"url"</span>);</span><br><span class="line">   username = properties.getProperty(<span class="string">"username"</span>);</span><br><span class="line">   password = properties.getProperty(<span class="string">"password"</span>);</span><br><span class="line">   <span class="comment">//加载数据库驱动</span></span><br><span class="line">   Class.forName(driverClassName);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">   <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//获取连接对象...</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//释放资源省略...</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这里主要注意(类加载器获取路径&amp;Properties对象的使用)</strong></p>
<h4 id="测试数据库是否可用"><a href="#测试数据库是否可用" class="headerlink" title="测试数据库是否可用"></a>测试数据库是否可用</h4><p><strong>在web.servlet包下创建TestServlet,在doGet方法中对数据库连接进行测试…</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   Connection connection = JDBCUtils.getConnection();</span><br><span class="line">   System.out.println(connection);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> doPost(...)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>web.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>TestServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.java.web.servlet.TestServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>测试结果 : 对TestServlet进行访问,查看结果 . no problem!</strong></p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201007014150.png" alt="20201007014150" style="zoom:80%;" />

<h4 id="定制回传参数工具类"><a href="#定制回传参数工具类" class="headerlink" title="定制回传参数工具类"></a>定制回传参数工具类</h4><p><strong>用于后台Servlet传回结果&amp;前端页面Ajax接收.</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseData</span> </span>&#123;</span><br><span class="line"> <span class="comment">//1.返回的状态码 code status 1 2 3 4</span></span><br><span class="line"> <span class="comment">//2.返回的具体内容 单个对象/集合</span></span><br><span class="line"> <span class="comment">//3.返回的具体消息 登录成功/注册失败...</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line"> <span class="keyword">private</span> Object data;</span><br><span class="line"> <span class="keyword">private</span> String message;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> status;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.status = status;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.data = data;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.message = message;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ResponseData</span><span class="params">(<span class="keyword">int</span> status, Object data, String message)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>();</span><br><span class="line">  <span class="keyword">this</span>.status = status;</span><br><span class="line">  <span class="keyword">this</span>.data = data;</span><br><span class="line">  <span class="keyword">this</span>.message = message;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ResponseData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>();</span><br><span class="line">  <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//1.普通的方法 返回默认的成功信息 不携带对象只携带状态码</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> ResponseData <span class="title">success</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.status = GlobleConstants.SUCCESS;<span class="comment">//代表操作成功</span></span><br><span class="line">  <span class="keyword">this</span>.message = message;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//2.携带对象和具体的信息</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> ResponseData <span class="title">success</span><span class="params">(Object data,String message)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.data = data;</span><br><span class="line">  <span class="keyword">this</span>.message = message;</span><br><span class="line">  <span class="keyword">this</span>.status = GlobleConstants.SUCCESS;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//3.失败的具体信息</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> ResponseData <span class="title">fail</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.status = GlobleConstants.FAIL;</span><br><span class="line">  <span class="keyword">this</span>.message = message;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>GlobleConstants.java</strong></p>
<p><strong>用于封装静态常量</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobleConstants</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SUCCESS = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FAIL = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用MVC设计模式编写Dao层-amp-Service层"><a href="#使用MVC设计模式编写Dao层-amp-Service层" class="headerlink" title="使用MVC设计模式编写Dao层&amp;Service层"></a>使用MVC设计模式编写Dao层&amp;Service层</h4><p><strong>Dao层</strong></p>
<p><strong>UserDao&amp;UserDaoImp</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function">User <span class="title">getUserByUserNameAndPassword</span><span class="params">(String userName,String password)</span><span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">addUser</span><span class="params">(String userName, String password, String userEmail)</span><span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImp</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 根据用户名密码查询用户</span></span><br><span class="line"><span class="comment">	 * */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getUserByUserNameAndPassword</span><span class="params">(String userName, String password)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		String sql = <span class="string">"select * from users where userName = ? and password = ?"</span>;</span><br><span class="line">		Connection conn = JDBCUtils.getConnection();</span><br><span class="line">		PreparedStatement pstmt = conn.prepareStatement(sql);</span><br><span class="line">		pstmt.setString(<span class="number">1</span>, userName);</span><br><span class="line">		pstmt.setString(<span class="number">2</span>, password);</span><br><span class="line">		ResultSet rs = pstmt.executeQuery();</span><br><span class="line">		<span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line">			User user = <span class="keyword">new</span> User();</span><br><span class="line">			user.setUserId(rs.getInt(<span class="number">1</span>));</span><br><span class="line">			user.setUserName(rs.getString(<span class="number">2</span>));</span><br><span class="line">			user.setUserEmail(rs.getString(<span class="number">3</span>));</span><br><span class="line">			user.setPassword(rs.getString(<span class="number">4</span>));</span><br><span class="line">			<span class="keyword">return</span> user;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 添加用户信息</span></span><br><span class="line"><span class="comment">	 * */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addUser</span><span class="params">(String userName, String password, String userEmail)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		String sql = <span class="string">"insert into users(userName,userEmail,password) values(?,?,?)"</span>;</span><br><span class="line">		Connection conn = JDBCUtils.getConnection();</span><br><span class="line">		PreparedStatement pstmt = conn.prepareStatement(sql);</span><br><span class="line">		pstmt.setString(<span class="number">1</span>, userName);</span><br><span class="line">		pstmt.setString(<span class="number">2</span>, userEmail);</span><br><span class="line">		pstmt.setString(<span class="number">3</span>, password);</span><br><span class="line">		<span class="keyword">int</span> rows = pstmt.executeUpdate();</span><br><span class="line">		<span class="keyword">return</span> rows &gt; <span class="number">0</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Service层</strong></p>
<p><strong>UserService&amp;UserServiceImp</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function">User <span class="title">loginByUserNameAndPassword</span><span class="params">(String userName,String password)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">registerWithUserInfo</span><span class="params">(String userName, String password, String userEmail)</span><span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImp</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> UserDao udao = <span class="keyword">new</span> UserDaoImp();</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">loginByUserNameAndPassword</span><span class="params">(String userName, String password)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> udao.getUserByUserNameAndPassword(userName, password);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">registerWithUserInfo</span><span class="params">(String userName, String password, String userEmail)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> udao.addUser(userName,password,userEmail);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试Dao-amp-Service是否可用"><a href="#测试Dao-amp-Service是否可用" class="headerlink" title="测试Dao&amp;Service是否可用"></a>测试Dao&amp;Service是否可用</h4><p><strong>修改TestServlet代码,测试UserService.</strong></p>
<p><strong>TestServlet.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   UserService us = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line">   User user = us.loginByUserNameAndPassword(<span class="string">"zhangsan"</span>, <span class="string">"123456"</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> doPost(...);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试结果 : no problem!</strong></p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201008112137.png" alt="20201008112137" style="zoom:67%;" />

<h4 id="工程前期准备此时截图"><a href="#工程前期准备此时截图" class="headerlink" title="工程前期准备此时截图"></a>工程前期准备此时截图</h4><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201008113914.png" alt="20201008113914" style="zoom:80%;" />

<h3 id="二-制作登录页面-amp-注册页面"><a href="#二-制作登录页面-amp-注册页面" class="headerlink" title="二. 制作登录页面&amp;注册页面"></a>二. 制作登录页面&amp;注册页面</h3><blockquote>
<p>登录页面主要使用html + css + js完成,页面的制作不是我们的重点,直接上代码,同学们熟练的话直接copy即可</p>
</blockquote>
<p><strong>在WebContent中创建登录页面&amp;注册页面</strong></p>
<p><strong>custom.css</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="comment">/* 背景图片自己选一张</span></span><br><span class="line"><span class="comment"> background: url("img/bg.jpg");</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">/*使用背景颜色*/</span></span><br><span class="line"> <span class="attribute">background-color</span>: pink;</span><br><span class="line"> <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line"> <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"> <span class="attribute">position</span>: absolute;</span><br><span class="line"> <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"> <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"> <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line"> <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"> <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">6</span>);</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line"> <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">30px</span>;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.inputBox</span> &#123;</span><br><span class="line"> <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.inputBox</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">border</span>: none;</span><br><span class="line"> <span class="attribute">outline</span>: none;</span><br><span class="line"> <span class="attribute">background-color</span>: transparent;</span><br><span class="line"> <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line"> <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.inputBox</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line"> <span class="attribute">position</span>: absolute;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"> <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line"> <span class="attribute">pointer-events</span>: none;</span><br><span class="line"> <span class="attribute">transition</span>: .<span class="number">4s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.inputBox</span> <span class="selector-tag">input</span><span class="selector-pseudo">:valid</span> ~ <span class="selector-tag">label</span>, <span class="selector-class">.box</span> <span class="selector-class">.inputBox</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> ~ <span class="selector-tag">label</span> &#123;</span><br><span class="line"> <span class="attribute">top</span>: -<span class="number">18px</span>;</span><br><span class="line"> <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#6AC653</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-id">#submit</span> &#123;</span><br><span class="line"> <span class="attribute">background-color</span>: transparent;</span><br><span class="line"> <span class="attribute">border</span>: none;</span><br><span class="line"> <span class="attribute">outline</span>: none;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"> <span class="attribute">background-color</span>: <span class="number">#6AC653</span>;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line"> <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>login.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入css --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/custom.css"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Log In<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputBox"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span>&gt;</span>UserName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputBox"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Log In"</span> <span class="attr">id</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>register.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入css --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/custom.css"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sign Up<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputBox"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span>&gt;</span>UserName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputBox"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputBox"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"userEmail"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Sign Up"</span> <span class="attr">id</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>↓ <strong>WebContent目录</strong> : ↓</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201008120929.png" alt="20201008120929" style="zoom:80%;" />

<p>↓ <strong>页面效果 :</strong>↓</p>
<p><strong>登录 :</strong></p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201008120821.png" alt="20201008120821" style="zoom:80%;" />

<p><strong>注册 :</strong></p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201008120843.png" alt="20201008120843" style="zoom:80%;" />

<h3 id="三-后台Servlet编写"><a href="#三-后台Servlet编写" class="headerlink" title="三. 后台Servlet编写"></a>三. 后台Servlet编写</h3><h4 id="登录前后台修改"><a href="#登录前后台修改" class="headerlink" title="登录前后台修改"></a>登录前后台修改</h4><p><strong>在web.servlet包下创建LoginServlet&amp;RegsiterServlet</strong></p>
<p><strong>LoginServlet.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.java.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.java.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.java.service.imp.UserServiceImp;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 登录后台逻辑处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  <span class="comment">//1.设置字符集</span></span><br><span class="line">  request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">  response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">  <span class="comment">//2.获取请求中的表单参数</span></span><br><span class="line">  String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">  String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">  <span class="comment">//3.调用业务层UserService实现登录业务</span></span><br><span class="line">  UserService us = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line">  <span class="comment">//4.准备回传参数对象</span></span><br><span class="line">  ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   User user = us.loginByUserNameAndPassword(userName, password);</span><br><span class="line">   <span class="keyword">if</span>(user != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//登录成功</span></span><br><span class="line">    responseData = responseData.success(<span class="string">"登陆成功"</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//登录失败</span></span><br><span class="line">    responseData = responseData.fail(<span class="string">"用户名密码不正确..."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//使用response的getWriter将其写回</span></span><br><span class="line">   <span class="comment">//使用第三方工具fastjson将对象转换成Json字符串</span></span><br><span class="line">   String jsonString = JSON.toJSONString(responseData);</span><br><span class="line">   <span class="comment">//写回字符串</span></span><br><span class="line">   response.getWriter().write(jsonString);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> doPost(...)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>login.html</strong></p>
<p><strong>主要添加Ajax解析Servlet传回的Json字符串</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//给submit按钮添加登陆的点击事件</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//获取用户名和密码</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> userName = $(<span class="string">"#userName"</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> password = $(<span class="string">"#password"</span>).val();</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//实现Ajax的Post请求</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//定义请求地址</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> url = <span class="string">"/TestServlet/login"</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//请求参数</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> data = &#123;<span class="string">"userName"</span> : userName,<span class="string">"password"</span> : password&#125;;</span></span><br><span class="line"><span class="javascript">            $.post(url,data,<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//使用jquery解析回传的json字符串,转换成json对象</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> result = $.parseJSON(response);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//弹出窗口,显示提示消息</span></span></span><br><span class="line">                alert(result.message);</span><br><span class="line">                if(result.status == 0)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">//如果登陆失败,提醒用户是否前往注册页面</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> flag = confirm(<span class="string">"是否前往注册?"</span>);</span></span><br><span class="line">                    if(flag)&#123;</span><br><span class="line"><span class="actionscript">                        <span class="comment">//点击确定跳转注册页面</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">window</span>.location.href = <span class="string">"/TestServlet/register.html"</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Log In"</span> <span class="attr">id</span>=<span class="string">"submit"</span> <span class="attr">onclick</span>=<span class="string">"login();"</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="登录测试"><a href="#登录测试" class="headerlink" title="登录测试"></a>登录测试</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/logintestaaa.gif" alt="logintestaaa"></p>
<h4 id="注册前后台修改"><a href="#注册前后台修改" class="headerlink" title="注册前后台修改"></a>注册前后台修改</h4><p><strong>注册前后台逻辑和登陆极其类似.</strong></p>
<p><strong>RegsiterServlet.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//1.设置字符集</span></span><br><span class="line">		request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">		response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">		<span class="comment">//2.获取请求中的表单参数</span></span><br><span class="line">		String userEmail = request.getParameter(<span class="string">"userEmail"</span>);</span><br><span class="line">		String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">		String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">		<span class="comment">//3.调用业务层UserService实现注册业务</span></span><br><span class="line">		UserService us = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line">		<span class="comment">//4.准备回传参数对象</span></span><br><span class="line">		ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">boolean</span> result = us.registerWithUserInfo(userName,password,userEmail);</span><br><span class="line">			<span class="keyword">if</span>(result) &#123;</span><br><span class="line">				responseData = responseData.success(<span class="string">"注册成功,请重新登陆.."</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				responseData = responseData.fail(<span class="string">"注册失败,请稍后再试!"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//使用第三方工具fastjson将对象转换成Json字符串</span></span><br><span class="line">			String jsonString = JSON.toJSONString(responseData);</span><br><span class="line">			<span class="comment">//写回字符串</span></span><br><span class="line">			response.getWriter().write(jsonString);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	doPost(...)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>register.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//获取表单中的所有参数,如果参数值过多,可以使用jquery中的serialize()方法</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//值的形式为 : userName=aaaaaaaa&amp;password=bbbbbbb&amp;userEmail=ccc%40qq.com</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> params = $(<span class="string">"#myForm"</span>).serialize();</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> url = <span class="string">"/TestServlet/register?"</span> + params;</span></span><br><span class="line"><span class="javascript">            $.post(url,&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//使用jquery解析回传的json字符串,转换成json对象</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> result = $.parseJSON(response);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//弹出窗口,显示提示消息</span></span></span><br><span class="line">                alert(result.message);</span><br><span class="line">                if(result.status == 1)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">//如果注册成功,重新进入登陆页面</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">window</span>.location.href = <span class="string">"/TestServlet/login.html"</span>; </span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Sign Up"</span> <span class="attr">id</span>=<span class="string">"submit"</span> <span class="attr">onclick</span>=<span class="string">"register();"</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="注册测试"><a href="#注册测试" class="headerlink" title="注册测试"></a>注册测试</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/registertestaaa.gif" alt="registertestaaa"></p>
<h3 id="四-案例总结"><a href="#四-案例总结" class="headerlink" title="四. 案例总结"></a>四. 案例总结</h3><ol>
<li>项目前期准备和JDBC一定要测试好才开始编写后台</li>
<li>后台Servlet中使用了<strong>fastjson</strong>来解析&amp;转换json对象</li>
<li>前台使用了<strong>Ajax</strong>来接受后台返回数据.</li>
<li>项目中没有使用到<strong>请求转发和重定向</strong>,再后面的案例中再体现.</li>
<li><strong>细心细心再细心</strong>.</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>javaweb篇-servlet3</title>
    <url>/javaweb%E7%AF%87-servlet3.html</url>
    <content><![CDATA[<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201004165307.png" alt="20201004165307" style="zoom: 67%;" />
<a id="more"></a>

<h1 id="JavaWeb-Servlet-三"><a href="#JavaWeb-Servlet-三" class="headerlink" title="JavaWeb-Servlet(三)"></a>JavaWeb-Servlet(三)</h1><h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><blockquote>
<p>在前2篇文章中,我们基本掌握了服务器的简单配置,Servlet的创建和其基本使用,在这篇文章中我们继续对Servlet中涉及到的一些核心对象进行剖析.</p>
</blockquote>
<h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><blockquote>
<p>在前文中提到过在Servlet的声明周期的init方法中,可以通过ServletConfig对象中的方法获取ServletContext对象.那么ServletContext是什么呢?</p>
<p>ServletContext : 从字面意思就是当前Servlet的环境上下文对象,但是尤其要注意的是,<strong>ServletContext代表的是当前整个Web应用,并不是当前Servlet.</strong></p>
<p>ServletContext的作用 : </p>
<ol>
<li>可以通过ServletContext获取当前Web应用的初始化参数.</li>
<li>ServletContext可以用来存储数据,在Web中我们可以称之为域对象.</li>
<li>可以通过ServletContext对象来获取Web应用中资源的真实路径</li>
</ol>
<p>ServletContext对象如何获取?</p>
<ul>
<li><p>在前文中我们已经提过通过ServletConfig对象获取,但是其实更多的是通过当前Servlet对象就可以获取,</p>
<p>如 : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//通过this获取即可.</span></span><br><span class="line">    ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    <span class="comment">//还可以通过参数中的request对象获取</span></span><br><span class="line">    ServletContext servletContext2 = request.getServletContext();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>ServletContext对象的生命周期 : </p>
<ul>
<li>因为ServletContext代表Web对象本身,所以在Web应用部署到服务器经启动后,ServletContext对象就被创建了,此时,tomcat服务器没有关闭,ServletContext对象就一直在,当服务器被关闭时,ServletContext就会被销毁.</li>
</ul>
<p>下面我们来具体来学习ServletContext的作用</p>
</blockquote>
<h3 id="获取Web的初始化参数"><a href="#获取Web的初始化参数" class="headerlink" title="获取Web的初始化参数"></a>获取Web的初始化参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    <span class="comment">//获取web.xml中配置的对应的参数</span></span><br><span class="line">    String initParameter = context.getInitParameter(<span class="string">"user"</span>);</span><br><span class="line">    <span class="comment">//获取web.xml中所有配置的参数</span></span><br><span class="line">    Enumeration&lt;String&gt; attributeNames = context.getAttributeNames();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">&lt;!-- 这里要注意 context-param 和 init-param 配置和其作用的区别 </span></span><br><span class="line"><span class="comment">	 context-param配置在整个Web应用中,所有Servlet都能访问.</span></span><br><span class="line"><span class="comment">	 init-param配置在单独的Servlet中,能被当前所在的Servlet访问.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="域对象"><a href="#域对象" class="headerlink" title="域对象"></a>域对象</h3><blockquote>
<p>在Web中的核心对象中,能够存储数据的对象都可以称之为域对象,ServletContext就是其中作用范围最大的一个,由于其代表整个Web应用,所以所有的当前Web应用下的Servlet都可以往ServletContext存取数据.</p>
<p>核心方法 :</p>
<ul>
<li><p>存 : setAttribute(String name,Object value);</p>
</li>
<li><p>取 : <strong>Object</strong> getAttribute(String name); </p>
</li>
<li><p>移除 : removeAttribute(String name);</p>
</li>
</ul>
</blockquote>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926165810.png" alt="20200926165810" style="zoom:67%;" />

<p>FirstServlet.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">//向ServletContext中存储数据</span></span><br><span class="line">        context.setAttribute(<span class="string">"userName"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    doPost(...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SecondServlet.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//从ServletContext对象中提取数据</span></span><br><span class="line">		Object value = <span class="keyword">this</span>.getServletContext().getAttribute(<span class="string">"userName"</span>);</span><br><span class="line">		System.out.println(<span class="string">"value : "</span> + value);</span><br><span class="line">	&#125;</span><br><span class="line">	doPost(...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置好2个Servlet后,只需要先访问FirstServlet,然后再访问SecondServlet即可在控制台上观察value的输出</strong></p>
<h3 id="路径获取"><a href="#路径获取" class="headerlink" title="路径获取"></a>路径获取</h3><blockquote>
<p>getRealPath(String path) : 在此方法中传入虚拟地址,返回此地址的服务器下的绝对路径.</p>
<p>getContextPath() : 获取当前Web应用的根目录.</p>
<p>getResourceAsStream(String path) : 获取指定路径的输入流.</p>
</blockquote>
<h4 id="getContextPath-amp-getRealPath"><a href="#getContextPath-amp-getRealPath" class="headerlink" title="getContextPath&amp;getRealPath"></a>getContextPath&amp;getRealPath</h4><p>FirstServlet.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    <span class="comment">//getContextPath();</span></span><br><span class="line">    String contextPath = context.getContextPath();</span><br><span class="line">    System.out.println(<span class="string">"contextPath : "</span> + contextPath);</span><br><span class="line">    <span class="comment">//getRealPath(String path);</span></span><br><span class="line">    String realPath = context.getRealPath(<span class="string">"a.txt"</span>);</span><br><span class="line">    System.out.println(<span class="string">"realPath : "</span> + realPath);</span><br><span class="line">    String realPath2 = context.getRealPath(<span class="string">"/a.txt"</span>);</span><br><span class="line">    System.out.println(<span class="string">"realPath2 : "</span> + realPath2);</span><br><span class="line">    String realPath3 = context.getRealPath(<span class="string">"/WEB-INF/b.txt"</span>);</span><br><span class="line">    System.out.println(<span class="string">"realPath3 : "</span> + realPath3);</span><br><span class="line">    String realPath4 = context.getRealPath(<span class="string">"/WEB-INF/classes/com/web/servlet/a.txt"</span>);</span><br><span class="line">    System.out.println(<span class="string">"realPath4 : "</span> + realPath4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>控制台输出 :</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">contextPath : /<span class="number">01</span>_Servlet</span><br><span class="line">realPath : H:\apache-tomcat-<span class="number">8.0</span><span class="number">.53</span>-windows-x64\apache-tomcat-<span class="number">8.0</span><span class="number">.53</span>\webapps\<span class="number">01</span>_Servlet\a.txt</span><br><span class="line">realPath2 : H:\apache-tomcat-<span class="number">8.0</span><span class="number">.53</span>-windows-x64\apache-tomcat-<span class="number">8.0</span><span class="number">.53</span>\webapps\<span class="number">01</span>_Servlet\a.txt</span><br><span class="line">realPath3 : H:\apache-tomcat-<span class="number">8.0</span><span class="number">.53</span>-windows-x64\apache-tomcat-<span class="number">8.0</span><span class="number">.53</span>\webapps\<span class="number">01</span>_Servlet\WEB-INF\b.txt</span><br><span class="line">realPath4 : H:\apache-tomcat-<span class="number">8.0</span><span class="number">.53</span>-windows-x64\apache-tomcat-<span class="number">8.0</span><span class="number">.53</span>\webapps\<span class="number">01</span>_Servlet\WEB-INF\classes\com\web\servlet\a.txt</span><br></pre></td></tr></table></figure>
<p><strong>可以看出从getRealPath中提取的地址都是服务器中的绝对地址</strong></p>
<h4 id="getResourceAsStream"><a href="#getResourceAsStream" class="headerlink" title="getResourceAsStream"></a>getResourceAsStream</h4><blockquote>
<p>在com.web.servlet包下创建a.txt文件,并随意输入一行文字.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    InputStream is = context.getResourceAsStream(<span class="string">"/WEB-INF/classes/com/web/servlet/a.txt"</span>);</span><br><span class="line">    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">    String line = reader.readLine();</span><br><span class="line">    System.out.println(line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>getResourceAsStream(String path)也是相对的服务器中的地址,即WebContent中的资源</strong></p>
<h2 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h2><blockquote>
<p>ServletContext学完后,我们接着来看一下Request.</p>
<p>HttpServletRequest : 故名思意,代表客户端的请求,也就是说当用户通过Http协议访问服务器时,用户的请求信息就会封装在Request对象中,在Servlet中通过Request对象中对应的方法就可以获得对应数据.</p>
<p>HttpServletRequset对象中有很多方法,这里我挑几个常用并且需要大家牢记的方法说一下 : </p>
<ol>
<li>获取请求的地址&amp;请求的方式</li>
<li>获取客户端请求参数 . 如 : 表单中的数据.</li>
<li>request和servletContext对象类似,都可以作为存储数据的容器,所以也可以称之为域对象,用法也和其相同.</li>
<li>请求转发</li>
</ol>
</blockquote>
<h3 id="获取地址-amp-方式"><a href="#获取地址-amp-方式" class="headerlink" title="获取地址&amp;方式"></a>获取地址&amp;方式</h3><blockquote>
<p>getMethod() : 获取当前请求的方式</p>
<p>getRequestURI() : 获取请求的资源路径(相对于当前工程)</p>
<p>getRequestURL() : 获取请求的完整URL </p>
<p>getContextPath() : 获取当前应用根路径</p>
</blockquote>
<p><strong>DemoServlet.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		String requestURI = request.getRequestURI();</span><br><span class="line">		System.out.println(<span class="string">"requestURI : "</span> + requestURI);</span><br><span class="line">		</span><br><span class="line">		StringBuffer requestURL = request.getRequestURL();</span><br><span class="line">		System.out.println(<span class="string">"requestURL : "</span> + requestURL);</span><br><span class="line">		</span><br><span class="line">		String contextPath = request.getContextPath();</span><br><span class="line">		System.out.println(<span class="string">"contextPath : "</span> + contextPath);</span><br><span class="line">		</span><br><span class="line">		String method = request.getMethod();</span><br><span class="line">		System.out.println(<span class="string">"method : "</span> + method);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	doPost(...);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>随便准备个前端页面</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"DemoServlet"</span>&gt;</span>DemoServlet<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005140246.png" alt="20201005140246"></p>
<p><strong>点击超链接查看控制台输出…</strong></p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005140353.png" alt="20201005140353"></p>
<h3 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h3><blockquote>
<p>getParameter(String name) : 根据input输入框中的name对应进行获取其中的值</p>
<p>getParameterValues(String name) : 根据input输入框中的name对应获取值,一般用来获取checkbox中的多个值.</p>
<p>getParameterMap() : 获取表单中所有的输入框对应的name和value , 一般配合框架使用.</p>
</blockquote>
<h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h4><p><strong>在WebContent目录下创建一个form.html页面,任意添加一个表单即可.</strong></p>
<p>form.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- form表单中的action指向的路径为对应的Servlet的虚拟路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/01_Servlet/form"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">	UserName : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	Password : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	Hobby : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>吃饭 </span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>睡觉</span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>打豆豆</span><br><span class="line">			<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>FormServlet.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取input中的值</span></span><br><span class="line">		String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">		System.out.println(<span class="string">"userName : "</span> + userName);</span><br><span class="line">		<span class="comment">//获取checkbox中的值</span></span><br><span class="line">		String[] values = request.getParameterValues(<span class="string">"hobby"</span>);</span><br><span class="line">		System.out.println(<span class="string">"checkBox values : "</span> + Arrays.asList(values));</span><br><span class="line">		<span class="comment">//获取表单中的name和其对应的value</span></span><br><span class="line">		Map&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class="line">		System.out.println(<span class="string">"----所有表单中的输入框name&amp;value"</span>);</span><br><span class="line">		<span class="keyword">for</span> (String name : map.keySet()) &#123;</span><br><span class="line">			System.out.println(<span class="string">"name : "</span> + name + <span class="string">" , value : "</span> + Arrays.asList(map.get(name)));</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    doPost(...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005012758.png" alt="20201005012758"></p>
<p><strong>点击Submit提交数据后,Servlet中的输出</strong> : </p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005013015.png" alt="20201005013015" style="zoom:67%;" />

<p><strong>这个例子中要注意的是form表单中的input内的name属性的值必须和getParameter等方法中的参数的名称一致,这里在获取输入框中的值的时候可能还会有乱码问题,这个问题我们等会详细介绍.</strong></p>
<h3 id="域对象-1"><a href="#域对象-1" class="headerlink" title="域对象"></a>域对象</h3><blockquote>
<p>request和servletContext类似,都可以作为域对象使用,但是request的作用范围要比servletContext要小的多,也就是说,只有在同一请求中,才能在request中存取数据.</p>
<p>存取数据的方法还是那么几个,参考上面ServletContext</p>
</blockquote>
<h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><blockquote>
<p>请求转发是使用request时一个非常重要的知识点,请求转发是<strong>服务器内部</strong>跳转页面的一种方式.比如,当用户请求访问到ServletA时,我们可以对请求后的访问结果进行判断来选择跳转方式或者需要前往的页面,那么这些跳转方式的其中一种就是请求转发.</p>
<p>核心方法 : </p>
<p>request.getRequestDispatcher(String path).forward(ServletRequest request,ServletResponse response);</p>
</blockquote>
<h4 id="看图说话"><a href="#看图说话" class="headerlink" title="看图说话"></a>看图说话</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005015002.png" alt="20201005015002"></p>
<p><strong>在上图中,要注意的是当前的跳转只发生在服务器内部,跳转到home.html时可以认为是同一个request对象在进行请求.</strong></p>
<h4 id="举个栗子-1"><a href="#举个栗子-1" class="headerlink" title="举个栗子"></a>举个栗子</h4><blockquote>
<p>依然是用上图的小案例写一段代码来实现</p>
</blockquote>
<p><strong>准备一个ServletA.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在doGet方法中做请求转发</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletA</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"进入ServletA...."</span>);</span><br><span class="line">		<span class="comment">//获取参数</span></span><br><span class="line">		System.out.println(<span class="string">"获取参数...."</span>);</span><br><span class="line">		<span class="comment">//逻辑处理</span></span><br><span class="line">		System.out.println(<span class="string">"逻辑处理...."</span>);</span><br><span class="line">		<span class="comment">//转发之前使用request与对象存数据,转发后的页面如果是Servlet/JSP中可以从request中取出数据</span></span><br><span class="line">		request.setAttribute(<span class="string">"password"</span>, <span class="string">"123456"</span>);</span><br><span class="line">		<span class="comment">//处理完后,请求转发</span></span><br><span class="line">		System.out.println(<span class="string">"处理完毕,准备跳转首页...."</span>);</span><br><span class="line">		request.getRequestDispatcher(<span class="string">"home.html"</span>).forward(request, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	doPost(...)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在WebContent目录下随意准备一个home.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是首页,雷霆嘎巴<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>操作截图 : </p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005020339.png" alt="20201005020339"></p>
<p>控制台输出 : </p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005020405.png" alt="20201005020405"></p>
<h3 id="解决乱码"><a href="#解决乱码" class="headerlink" title="解决乱码"></a>解决乱码</h3><blockquote>
<p>由于客户端请求方式的不同,解决的方案也不相同.</p>
<p>核心解决方案 : </p>
<p>setCharacterEncoding(String env);</p>
</blockquote>
<h4 id="一-POST请求乱码"><a href="#一-POST请求乱码" class="headerlink" title="一 . POST请求乱码"></a>一 . POST请求乱码</h4><blockquote>
<p>当用户表单中的请求方式为POST提交时,在service(doGet/doPost)方法的首行加上<strong>setCharacterEncoding(String env)</strong>即可 , 如 : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    	<span class="comment">//解决乱码</span></span><br><span class="line">		request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">		<span class="comment">//获取input中的值</span></span><br><span class="line">		String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">		...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="二-GET请求乱码"><a href="#二-GET请求乱码" class="headerlink" title="二 . GET请求乱码"></a>二 . GET请求乱码</h4><blockquote>
<p>如果使用的时Tomcat8以上的版本,则同POST请求一样,如果时Tomcat8以下的版本则需要对参数中的值重新编码.如 : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//获取input中的值</span></span><br><span class="line">		String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">		<span class="comment">//对userName进行重新编解码</span></span><br><span class="line">		userName = <span class="keyword">new</span> String(userName.getBytes(<span class="string">"ISO-8859-1"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">		...</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote>
<ul>
<li>请求转发是当前应用内部发生的跳转,用户地址栏上的地址没有发生改变,是服务器内部的行为.</li>
<li>不能转发到当前Web应用外的页面</li>
<li>转发的同时可以使用request域对象来存取数据 , request.getAttribute(String name);</li>
</ul>
</blockquote>
<h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h2><blockquote>
<p>Requset代表请求,Response则代表响应,HttpServletResponse对象也是Servlet中一个十分重要的对象,我们将要传递给客户端的数据封装在response对象中.</p>
<p>response对象中常用方法不多,以下几个必须熟练使用</p>
<ol>
<li>利用response对象向页面输出内容</li>
<li>重定向</li>
</ol>
</blockquote>
<h3 id="输出内容"><a href="#输出内容" class="headerlink" title="输出内容"></a>输出内容</h3><blockquote>
<p>getWriter().write() : 通过getWriter方法返回PrintWriter对象向页面写内容.</p>
</blockquote>
<h4 id="举个栗子-2"><a href="#举个栗子-2" class="headerlink" title="举个栗子"></a>举个栗子</h4><p><strong>修改DemoServlet中的代码,如下</strong> : </p>
<p><strong>DemoServlet.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		response.getWriter().write(<span class="string">"HelloWorld"</span>);</span><br><span class="line">		response.getWriter().write(<span class="string">"&lt;h1&gt;HelloWorld&lt;/h1&gt;"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	doPost(...)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>点击超链接重新进行访问</strong></p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005141302.png" alt="20201005141302"></p>
<p><strong>向页面输出内容和获取客户端参数一样都会有乱码问题,在输出内容之前修改response中的编码格式即可</strong></p>
<blockquote>
<p>setContentType(“text/html;charset=utf-8”)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">		response.getWriter().write(<span class="string">"你好,世界"</span>);</span><br><span class="line">		response.getWriter().write(<span class="string">"&lt;h1&gt;你好,世界&lt;/h1&gt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>重新访问</strong></p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005141535.png" alt="20201005141535"></p>
<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><blockquote>
<p>sendRedirect(String location) : location路径可以是当前Web应用内的其他页面或者Web应用外的页面.</p>
</blockquote>
<h4 id="看图说话-1"><a href="#看图说话-1" class="headerlink" title="看图说话"></a>看图说话</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005144531.png" alt="20201005144531"></p>
<p><strong>上图主要阐述了这么几点</strong> : </p>
<ol>
<li>用户输入地址对ServletA进行访问</li>
<li>ServletA访问后通知页面重新定向到其他地址</li>
<li>用户客户端重新访问新地址</li>
</ol>
<h4 id="举个栗子-3"><a href="#举个栗子-3" class="headerlink" title="举个栗子"></a>举个栗子</h4><p><strong>修改ServletA中的代码</strong></p>
<p><strong>ServletA.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletA</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"进入ServletA...."</span>);</span><br><span class="line">		<span class="comment">//获取参数</span></span><br><span class="line">		System.out.println(<span class="string">"获取参数...."</span>);</span><br><span class="line">		<span class="comment">//逻辑处理</span></span><br><span class="line">		System.out.println(<span class="string">"逻辑处理...."</span>);</span><br><span class="line">		<span class="comment">//处理完后,请求转发</span></span><br><span class="line">		System.out.println(<span class="string">"处理完毕,准备跳转首页...."</span>);</span><br><span class="line">		<span class="comment">//通过request获取当前应用根目录</span></span><br><span class="line">		String contextPath = request.getContextPath();</span><br><span class="line">		<span class="comment">//重定向到首页</span></span><br><span class="line">		response.sendRedirect(contextPath + <span class="string">"/home.html"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	doPost(...)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>操作截图 : </p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005145222.png" alt="20201005145222"></p>
<p>控制台输出 : </p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005145205.png" alt="20201005145205"></p>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><blockquote>
<ul>
<li>重定向可以是当前应用中页面的跳转,也可以跳转站外页面 (<strong>location中的路径最好要完整</strong>) , 是客户端的行为</li>
<li>重定向后用户地址栏的地址发生改变.变为重定向后的地址</li>
<li>从图上可以看到,重定向最起码是2次请求,所以不能使用request域来存取数据.</li>
</ul>
</blockquote>
<blockquote>
<p><strong>重定向和请求转发 怎么选用?</strong></p>
<p>请求转发是服务器内部的行为,而重定向需要客户端进行2次请求,所以从效率上来看转发的速度要比重定向速度要快.还有根据重定向和转发的地址栏上的表现行为也可以作为选取标准,如果需要跳转到外部网站就必须选用重定向,最后重定向还可以避免用户刷新页面或者重载页面时,重复调用之前动作和发送数据.</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>javaweb篇-servlet2</title>
    <url>/javaweb%E7%AF%87-servlet2.html</url>
    <content><![CDATA[<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200921110223.png" alt="20200921110223" style="zoom:67%;" />

<a id="more"></a>


<h1 id="JavaWeb-Servlet-二"><a href="#JavaWeb-Servlet-二" class="headerlink" title="JavaWeb-Servlet(二)"></a>JavaWeb-Servlet(二)</h1><h2 id="Web应用目录"><a href="#Web应用目录" class="headerlink" title="Web应用目录"></a>Web应用目录</h2><blockquote>
<p>直接上图</p>
</blockquote>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926172925.png" alt="20200926172925" style="zoom:67%;" />

<blockquote>
<ul>
<li>src目录 : 放置Java源代码目录</li>
<li>WebContent目录 : 当前Web应用的资源目录,Web应用中的html,css,js,image等静态资源或者jsp文件等,当前目录下的内容会发布到tomcat安装目录中的webapps目录对应的项目名目录下,除了WEB-INF目录下的内容都可以通过路径直接访问.<ul>
<li>WEB-INF目录 : 当前Web应用的配置信息目录,该目录下的内容对用户不可见,不能通过路径直接访问.<ul>
<li>lib目录 : 当前Web工程需要的依赖jar包..</li>
<li>web.xml文件 : Web工程的配置文件.</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926173830.png" alt="20200926173830"></p>
<blockquote>
<p>上图为对应的Tomcat的发布路径,也就是说当我们通过Eclipse中的run as on server运行Web应用程序后,该程序中的字节码文件和静态资源文件html,css,js,或者动态资源文件jsp等会发布在Tomcat目录下的webapps目录对应的工程名所在的文件夹下.</p>
<ul>
<li>classes目录 : java源文件编译过后的class文件.</li>
</ul>
</blockquote>
<h2 id="Http请求方式"><a href="#Http请求方式" class="headerlink" title="Http请求方式"></a>Http请求方式</h2><blockquote>
<p>首先在深入学习Servlet之前,我们需要来回顾下表单的2种提交方式</p>
<ol>
<li><strong>GET</strong>     一般用于从服务器中获取数据,安全性低于GET,将传递给服务器的参数直接添加在action指定的url后,get提交的数据量非常小,一般不能超过2KB</li>
<li><strong>POST</strong>   一般用于向服务提交数据,安全性较高于GET,传递给服务器的参数通过Http中的机制将参数封装在请求体内,post提交的数据一般默认无限制,但其实和选取的浏览器,操作系统,服务器等有关.</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在html中,通过表单里method属性可以确定表单提交的方式.</p>
</blockquote>
<h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><p>Servlet接口下的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*Servlet初始化时的回调*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line">	<span class="comment">/*获取Servlet中的配置参数信息*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">/*获取Servlet一些相关信息*/</span>	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">/*Servlet销毁时的回调*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/*接口中最重要的方法 : 每次客户端请求对应的Servlet都会调用service方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HelloServlet.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"service was initialized..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"service is running now..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"service was destroyed..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926160516.png" alt="20200926160516" style="zoom:80%;" />

<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926160411.png" alt="20200926160411" style="zoom:67%;" />



<blockquote>
<p>从上图可以看出,当我们启动服务器后,输入Servlet中配置好的虚拟路径对其进行访问,Servlet中的init方法和service方法会自动调用.</p>
</blockquote>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926160751.png" alt="20200926160751" style="zoom:67%;" />

<blockquote>
<p>从上图可以看出当我们对服务器进行关闭时,Servlet中的destroy()方法会自动调用.</p>
</blockquote>
<h3 id="init-ServletConfig-config"><a href="#init-ServletConfig-config" class="headerlink" title="init(ServletConfig config)"></a>init(ServletConfig config)</h3><blockquote>
<p>从上面测试中可以得知,init会在Servlet创建时进行回调,那么我们可以在此方法中对该Servlet完成一些初始化的工作,它是由Servlet的容器所控制的,并且该方法只会调用一次,但是我们可以通过对Servlet中的配置文件对其调用的时机进行修改.</p>
</blockquote>
<blockquote>
<p>找到配置HelloServlet的web.xml文件,在对应的<servlet>标签下添加<load-on-startup>标签,注意需要添加到<servlet-class>之后.</p>
</blockquote>
<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line">...</span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标签中的数字必须是一个整数,代表加载优先级,数字越小,优先级越高 --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据标签的翻译即可得知,该标签的作用为让servlet在服务器启动时即加载.再起启动服务器,观察运行结果.</p>
</blockquote>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926162017.png" alt="20200926162017" style="zoom:50%;" />

<blockquote>
<p>从上图和之前的运行结果进行比对,得出在Server startup…之时, HelloServlet中的init方法即被调用.然后继续访问该Servlet,init方法不会再次调用,直接调用service方法.</p>
</blockquote>
<h4 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h4><blockquote>
<p>在Servlet中传入了一个ServletConfig对象,该对象有以下几个方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="comment">//获取Servlet名称</span></span><br><span class="line">    String servletName = config.getServletName();</span><br><span class="line">    System.out.println(<span class="string">"servletName : "</span> + servletName);</span><br><span class="line">    <span class="comment">//获取Servlet的初始化参数</span></span><br><span class="line">    String encoding = config.getInitParameter(<span class="string">"encoding"</span>);</span><br><span class="line">    System.out.println(<span class="string">"----getInitParameter---"</span>);</span><br><span class="line">    System.out.println(<span class="string">"encoding : "</span> + encoding);</span><br><span class="line">    <span class="comment">//获取所有的初始化参数</span></span><br><span class="line">    Enumeration&lt;String&gt; params = config.getInitParameterNames();</span><br><span class="line">    System.out.println(<span class="string">"----getInitParameterNames---"</span>);</span><br><span class="line">    <span class="keyword">while</span> (params.hasMoreElements()) &#123;</span><br><span class="line">        String key = (String) params.nextElement();</span><br><span class="line">        String value = config.getInitParameter(key);</span><br><span class="line">        System.out.println(key + <span class="string">" : "</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    ServletContext servletContext = config.getServletContext();</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"service was initialized..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="getServletName"><a href="#getServletName" class="headerlink" title="getServletName()"></a>getServletName()</h5><blockquote>
<p>获取当前Servlet的名称,从下方运行结果图片可以看到,输出的是web.xml中<servlet-name>标签中的内容.<br><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926163326.png" alt="20200926163326" style="zoom:67%;" /></p>
</blockquote>
<h5 id="getInitParameter-String-name-amp-getInitParameterNames"><a href="#getInitParameter-String-name-amp-getInitParameterNames" class="headerlink" title="getInitParameter(String name)&amp;getInitParameterNames()"></a>getInitParameter(String name)&amp;getInitParameterNames()</h5><blockquote>
<p>获取当前Servlet中的初始化参数值,或者键值对信息</p>
<p>需要在<servlet>标签中添加<init-param>标签,<param-name>和<param-value></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意标签添加的顺序 --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>启动服务器后,观察结果<br><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926164323.png" alt="20200926164323" style="zoom:67%;" /></p>
</blockquote>
<h5 id="getServletContext"><a href="#getServletContext" class="headerlink" title="getServletContext()"></a>getServletContext()</h5><blockquote>
<p>通过该方法会返回一个ServletContext对象.ServletContext是Servlet中一个十分重要的对象,代表当前环境上下文.尤其要注意的是,ServletContext代表的是当前整个Web应用,并不是当前这个Servlet.</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926165810.png" alt="20200926165810" style="zoom:67%;" />

<p>对于ServletContext对象我们放在Servlet最后进行详细分析.那么到此init()方法的作用,以及ServletConfig其用法我们已经清楚,</p>
</blockquote>
<h3 id="destroy"><a href="#destroy" class="headerlink" title="destroy()"></a>destroy()</h3><blockquote>
<p>destroy方法会在服务器关闭时调用,对servlet进行销毁.在调用时,可以手动在destroy方法中释放一些资源,或者在服务器关闭时将某些内存中的数据序列化到本地进行存储等等…</p>
</blockquote>
<h3 id="service-ServletRequest-req-ServletResponse-res"><a href="#service-ServletRequest-req-ServletResponse-res" class="headerlink" title="service(ServletRequest req, ServletResponse res)"></a>service(ServletRequest req, ServletResponse res)</h3><blockquote>
<p>从运行结果来看,每一次当我们请求到该Servlet时,service方法都会调用一次.方法中的俩个参数 ServletRequest &amp; ServletResponse 都是我们后面要学习的重点对象.</p>
</blockquote>
<h3 id="getServletConfig"><a href="#getServletConfig" class="headerlink" title="getServletConfig()"></a>getServletConfig()</h3><blockquote>
<p>此方法返回一个ServletConfig对象..</p>
</blockquote>
<h3 id="getServletInfo"><a href="#getServletInfo" class="headerlink" title="getServletInfo()"></a>getServletInfo()</h3><blockquote>
<p>此方法返回Servlet的作者等信息..</p>
</blockquote>
<h2 id="web-xml配置文件"><a href="#web-xml配置文件" class="headerlink" title="web.xml配置文件"></a>web.xml配置文件</h2><blockquote>
<p>再来瞅一眼之前的web.xml文件,正好也不用向上翻了.</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>01_Servlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="welcome-file-list标签"><a href="#welcome-file-list标签" class="headerlink" title="welcome-file-list标签"></a>welcome-file-list标签</h3><blockquote>
<p>该标签定义了当前Web应用在访问时的欢迎页面,在项目中我们需要在WebContent中创建首页或者欢迎页面,并将其页面名称配置到<welcome-file-list>标签中的<welcome-file>中.配置好后,当直接访问Web应用根目录时就会自动跳转到该页面<br><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926172242.png" alt="20200926172242" style="zoom:80%;" /></p>
</blockquote>
<h3 id="servlet-amp-servlet-mapping标签"><a href="#servlet-amp-servlet-mapping标签" class="headerlink" title="servlet&amp;servlet-mapping标签"></a>servlet&amp;servlet-mapping标签</h3><blockquote>
<p><servlet-name> : 配置当前Servlet的名称</p>
<p><servlet-class> : 配置当前Servlet的全路径.</p>
<p><servlet-mapping> : 配置访问当前Servlet的匹配规则.</p>
<p><url-pattern> : 配置访问Servlet的虚拟路径</p>
</blockquote>
<h3 id="url-pattern标签"><a href="#url-pattern标签" class="headerlink" title="url-pattern标签"></a>url-pattern标签</h3><blockquote>
<p>作用 : 在客户端可以通过url-pattern配置的路径来对对应的服务器下的Servlet资源进行访问.</p>
<p>例 : 如果web.xml中配置 <url-pattern>/hello</url-pattern> 那么在访问该Servlet时只需要在客户端浏览器上输入    /工程名/hello 就可以进行访问</p>
<p>对于虚拟路径的配置有几种方式</p>
<ol>
<li>完全匹配  :  /hello , /abc , /order ..等</li>
<li>目录匹配  :  /abc/* , /order/* 等</li>
<li>后缀名匹配 : *.do , *.action等</li>
<li>缺省值 :  / </li>
</ol>
</blockquote>
<h2 id="Servlet体系"><a href="#Servlet体系" class="headerlink" title="Servlet体系"></a>Servlet体系</h2><h3 id="继承HttpServlet"><a href="#继承HttpServlet" class="headerlink" title="继承HttpServlet"></a>继承HttpServlet</h3><blockquote>
<p>在实际操作时,我们应当在创建Servlet时避免直接实现Servlet接口,在服务器环境中给我们提供了其他更加便捷的类给我们继承,避免重写太多方法.</p>
<ol>
<li>我们在创建Servlet时可以直接继承HttpServlet.重写doGet方法和doPost方法即可.</li>
<li>使用Eclipse等开发工具直接使用图形化界面创建Servlet,好处就是自动帮助我们对web.xml进行补全</li>
</ol>
<p>在使用工具创建时我们还可以对生成的代码,进行简化,应用simple版的servlet模板即可.</p>
<p>对应步骤如下 : </p>
<ol>
<li>先点击上方window – Preferences 然后输入 template按箭头选择</li>
</ol>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201001140446.png" alt="20201001140446" style="zoom:67%;" />

<ol start="2">
<li>输入Name,然后复制下方的模板内容,点击OK即可.</li>
</ol>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201001144408.png" alt="20201001144408" style="zoom:67%;" />
</blockquote>
<h4 id="Servlet模板"><a href="#Servlet模板" class="headerlink" title="Servlet模板"></a>Servlet模板</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;enclosing_package&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;primary_type_name&#125; extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    	$&#123;cursor&#125;  </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>操作演示 : <strong>创建好Servlet后,全选删除所有内容,输入s提示即可填入模板内容</strong></p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/fffffff.gif" alt="fffffff" style="zoom:80%;" />

<h3 id="剖析HttpServlet"><a href="#剖析HttpServlet" class="headerlink" title="剖析HttpServlet"></a>剖析HttpServlet</h3><blockquote>
<p>在前文中,我们已经对Servlet接口中的内容进行了完整的学习,如果我们想要对对应的Servlet进行访问就应该进入Servlet中的service方法.那么在继承了HttpServlet后,只有doGet和doPost方法,service方法去哪了呢?</p>
<p>带着问题我们来看一下HttpServlet中的体系结构</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201001141721.png" alt="20201001141721"></p>
<p>从上图可以看出,HttpServlet的父类是GenericServlet,继续打开父类,发现GenericServlet实现了Servlet接口,那么service方法去哪了?</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201001141856.png" alt="20201001141856"></p>
<p>打开预览视图,我们发现在GenericServlet中,service方法还是抽象方法,所以还是应该由其子类来实现.</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201001142203.png" alt="20201001142203" style="zoom:67%;" />

<p>那么我们继续观察HttpServlet</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201001142402.png" alt="20201001142402" style="zoom: 67%;" />

<p>从上图可以看出,在HttpServlet中有service方法的实现,并且还有service的重载方法.我们继续往下看</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201001142505.png" alt="20201001142505" style="zoom:67%;" />

<p>在service方法中,将ServletRequest和ServletResponse 2个参数对象强转为 HttpServletRequest,HttpServletResponse对象继续交给重载的service方法调用.</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201001142811.png" alt="20201001142811" style="zoom: 67%;" />

<p>在此service方法中,从截取的部分代码可以读出,通过HttpServletRequest对象获取当前请求的方式</p>
<p><strong>String method = req.getMethod();</strong></p>
<p>如果当前的请求方式为GET,则执行<strong>doGet(req,resp);</strong></p>
<p>如果当前为POST,则执行<strong>doPost(req,resp);</strong></p>
<p>…</p>
<p>至此我们就知道了为什么我们继承后应该去实现对应doGet或者doPost方法.</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>javaweb篇-servlet1</title>
    <url>/javaweb%E7%AF%87-servlet.html</url>
    <content><![CDATA[ <img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919092820.png" alt="20200919092820" style="zoom:67%;" />

<a id="more"></a>

<h1 id="JavaWeb-Servlet-一"><a href="#JavaWeb-Servlet-一" class="headerlink" title="JavaWeb-Servlet(一)"></a>JavaWeb-Servlet(一)</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><blockquote>
<p>系统 : win7,10(64 位)</p>
<p>jdk : jdk-8u181-windows-x64.exe</p>
<p>Eclispe/STS/IDEA : Eclipse&lt;Photon Release (4.8.0)&gt;</p>
<p>Tomcat : apache-tomcat-8.0.53</p>
</blockquote>
<h2 id="Servlet-的基本概念"><a href="#Servlet-的基本概念" class="headerlink" title="Servlet 的基本概念"></a>Servlet 的基本概念</h2><blockquote>
<p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p>
<p>使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p>
<p>Java Servlet 通常情况下与使用 CGI（Common Gateway Interface，公共网关接口）实现的程序可以达到异曲同工的效果。但是相比于 CGI，Servlet 有以下几点优势：</p>
<ul>
<li>性能明显更好。</li>
<li>Servlet 在 Web 服务器的地址空间内执行。这样它就没有必要再创建一个单独的进程来处理每个客户端请求。</li>
<li>Servlet 是独立于平台的，因为它们是用 Java 编写的。</li>
<li>服务器上的 Java 安全管理器执行了一系列限制，以保护服务器计算机上的资源。因此，Servlet 是可信的。</li>
<li>Java 类库的全部功能对 Servlet 来说都是可用的。它可以通过 sockets 和 RMI 机制与 applets、数据库或其他软件进行交互。</li>
</ul>
</blockquote>
<p>以上全是网站上随意 Copy 的,对于 Servlet 而言,同学们只需要认识一点 :</p>
<p>Servlet 就是一个在服务器中的 Java 小程序,有了 Servlet,我们可以接收来自网页表单的输入内容,或者将数据库&amp;其他源的内容反馈给用户进行显示.</p>
<p>Servlet 这个 Java 程序需要运行在一个容器中,而这个容器就是我们环境中所提到的 Tomcat,由 Servlet 组成的 Java 应用程序我们又可以称之为 Web 应用程序.</p>
<p>要注意的是 : Servlet 默认是以多线程模式执行的.</p>
<h2 id="Eclipse-的配置"><a href="#Eclipse-的配置" class="headerlink" title="Eclipse 的配置"></a>Eclipse 的配置</h2><blockquote>
<p>安装好 Jdk,Tomcat 和 Eclipse 之后就可以对 Eclipse 进行服务器配置了.</p>
</blockquote>
<p>打开 Eclipse,选择熟悉的工作空间.选择 JavaEE 开发界面(一般是默认),在窗口下方找到 Servers 窗口</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919095416.png" alt="20200919095416" style="zoom: 67%;" />

<p>点击超链接后进行服务器配置.选择好对应的 Tomcat 版本后点击 Next</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919100717.png" alt="20200919100717" style="zoom: 67%;" />

<p>如果是第一次配置,在 Browse 处选择在本地的 Tomcat 根目录即可.JRE 的选择可以是默认也可以选择本地 JDK.配置好后点击 Finish 即可.</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919105808.png" alt="20200919105808" style="zoom: 67%;" />

<p>Finish 后在之前的超链接处,出现刚刚配置好的 Tomcat 服务器,直接双击进入 Tomcat 服务器中继续进行发布路径的配置,修改完毕后<strong>,ctrl + s</strong>保存文件配置.</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919110035.png" alt="20200919110035" style="zoom:50%;" />

<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919110244.png" alt="20200919110244" style="zoom:67%;" />

<h2 id="创建第一个-Servlet"><a href="#创建第一个-Servlet" class="headerlink" title="创建第一个 Servlet"></a>创建第一个 Servlet</h2><blockquote>
<p>在对 Eclipse 的 Tomcat 环境进行配置后,就可以开始创建第一个 Servlet 程序了.</p>
</blockquote>
<p>创建 Web 工程,右键 new — 选择 Dynamic Web Project , 填写 ProjectName 和修改 module version 为 2.5(如图),再点击 Finish.</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919111018.png" alt="20200919111018" style="zoom: 67%;" />

<p>在工程中的 src 文件夹下创建包和 java 文件.(代码如下)</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919111448.png" alt="20200919111448" style="zoom:80%;" /><strong>HelloServlet.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest arg0, ServletResponse arg1)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">  arg1.getWriter().write(<span class="string">"Hello World!"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>代码解析 : 创建一个 HelloServlet 的 Java 文件,然后让其实现 Servlet 接口,在重写的 service 方法中使用 arg1 这个变量得到一个 Writer 对象写出一个字符串”Hello World!”.</p>
<p>如果想要实现后的形参的名称不是 arg0,arg1 这种需要添加对应源码.添加源码的操作如下.</p>
</blockquote>
<h4 id="如何在项目中添加源码"><a href="#如何在项目中添加源码" class="headerlink" title="如何在项目中添加源码"></a>如何在项目中添加源码</h4><p>按住 ctrl + 左键点击 Servlet 接口</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919112049.png" alt="20200919112049" style="zoom: 67%;" />

<p>点击 Attach Source 按钮 , 然后选择下方的 External Folder 浏览到 Tomcat 的源码根路径,继续点击 OK 即可</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919112202.png" alt="20200919112202" style="zoom: 67%;" />

<p>等几秒后 Eclipse 加载完毕,再删掉之前的方法重新实现可得到正确的参数名称.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">  </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  res.getWriter().write(<span class="string">"Hello World!"</span>);</span><br><span class="line">  </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>紧接着需要在WebContet目录中的WEB-INF目录下的web.xml中进行配置,打开web.xml文件</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919113208.png" alt="20200919113208" style="zoom:67%;" />

<p>在web.xml文件中添加如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>01_Servlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 此处为HelloServlet的配置信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>右键选择当前项目 然后 Run as —- Run  on Server , 在出现的界面直接点击 Finish 即可, 等待服务器运行.</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919113646.png" alt="20200919113646" style="zoom:67%;" />

<p>当Console控制台出现 Server Startup 的log信息,就可以在浏览器中输入路径访问Servlet了.</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919113909.png" alt="20200919113909" style="zoom:67%;" />

<p>在浏览器中输入路径(推荐使用Google或者微软自带的Edge浏览器),查看HelloServlet.</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919114123.png" alt="20200919114123"></p>
<blockquote>
<p>OK , 到这里我们第一个Servlet已经创建完毕并成功运行查看到了HelloServlet中 service方法中的输出.在下一篇中我们来具体的学习Servlet的基本知识.</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Part8·面向对象编程·三(图文)</title>
    <url>/09-java.html</url>
    <content><![CDATA[<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200105112811.png" alt="20200105112811.png" style="zoom: 67%;" />

<a id="more"></a>

<h1 id="前文回顾"><a href="#前文回顾" class="headerlink" title="前文回顾"></a>前文回顾</h1><p>在前文中我们学习到 Java 面向对象编程中的俩个核心概念 , 类(class) 和 对象 . 一个类有 2 个成员,一个<strong>成员属性</strong> 和 <strong>成员方法</strong>,并对方法进行了详细的讲述,现在我们来看一下类中的另一个成员 : <strong>成员属性</strong>.</p>
<h1 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h1><p>类中的属性其实就是变量的一种表现形式, 在初学变量之时,我们提到过变量的书写位置不同,作用域也不同,详细请回顾 <a href="http://fightlee.fun/08-java.html">Part 1-5 补充</a> 这一章节.在类中定义的变量,我们一般称之为全局变量,也叫<strong>成员变量.</strong></p>
<p>根据类<strong>创建出对应对象后</strong>,<strong>成员变量便赋予了初始值</strong>. 常见的类型初始化值如下 :</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">初始值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">String or 引用类型</td>
<td align="center">null</td>
</tr>
<tr>
<td align="center">整型</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">浮点型</td>
<td align="center">0.0</td>
</tr>
<tr>
<td align="center">Boolean</td>
<td align="center">false</td>
</tr>
</tbody></table>
<h4 id="例-1-创建-Dog-类-并创建其对象-观察对象属性的初始值"><a href="#例-1-创建-Dog-类-并创建其对象-观察对象属性的初始值" class="headerlink" title="例 1 : 创建 Dog 类,并创建其对象,观察对象属性的初始值"></a>例 1 : 创建 Dog 类,并创建其对象,观察对象属性的初始值</h4><p>Dog 类 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义成员变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TestDog 类 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        System.out.prinlnt(dog.name); <span class="comment">// 输出 null</span></span><br><span class="line">        System.out.prinlnt(dog.age);  <span class="comment">// 输出 0</span></span><br><span class="line"></span><br><span class="line">        dog.name = <span class="string">"旺财"</span>;</span><br><span class="line">        dog.age = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        System.out.prinlnt(dog.name); <span class="comment">// 输出 旺财</span></span><br><span class="line">        System.out.prinlnt(dog.age);  <span class="comment">// 输出 1</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>从上例可以看出 在创建对象后,没有赋值前的类中的 name 和 age 就已经具备了初始化的值 . 赋值后, 初始值被替换.</strong></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>面向对象编程不是一个很难理解的概念,大家始终记住 2 点 :</p>
<ol>
<li>类中存在 2 个成员 , 成员变量 和 成员方法 .</li>
<li>成员变量和成员方法的调用需要通过对象(<strong>类的实例</strong>)来调用 .</li>
</ol>
<h1 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h1><p>重载 : 在同一个类中,方法名相同,参数列表不相同的不同方法称之为 方法的重载 . 举例说明 .</p>
<h4 id="例-2-计算器类中的加法运算"><a href="#例-2-计算器类中的加法运算" class="headerlink" title="例 2 : 计算器类中的加法运算"></a>例 2 : 计算器类中的加法运算</h4><p>Calucator 类 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calucator</span></span>&#123;</span><br><span class="line">    <span class="comment">//计算2个数的和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算3个数的和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算3个浮点型数的和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//报错</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">       System.out.println(a + b + c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从例 2 我们可以总结出以下几点 :</p>
<ol>
<li>一个类中不同的方法可以重名 , 但必须保证这些方法为重载</li>
<li>重载的表现为参数列表不相同 –&gt; 即 参数的个数不同 或者 参数的类型不同</li>
<li>重载于返回值类型无关.</li>
</ol>
<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><h2 id="构造函数的语法"><a href="#构造函数的语法" class="headerlink" title="构造函数的语法"></a>构造函数的语法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符] 构造函数名([参数列表])&#123;</span><br><span class="line">    代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="构造函数的作用"><a href="#构造函数的作用" class="headerlink" title="构造函数的作用"></a>构造函数的作用</h2><ol>
<li>创建对象 new XXX(); 需要通过构造函数</li>
<li>初始化 在创建对象后,对该对象进行初始化</li>
</ol>
<h2 id="构造函数的使用"><a href="#构造函数的使用" class="headerlink" title="构造函数的使用"></a>构造函数的使用</h2><h4 id="例-3-创建-Student-类-并添加构造函数"><a href="#例-3-创建-Student-类-并添加构造函数" class="headerlink" title="例 3 : 创建 Student 类,并添加构造函数"></a>例 3 : 创建 Student 类,并添加构造函数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String gender;</span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//带参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age,String gender)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="为什么要使用构造函数"><a href="#为什么要使用构造函数" class="headerlink" title="为什么要使用构造函数"></a>为什么要使用构造函数</h2><p>根据例 3 我们创建 TestStudent 类来演示构造函数的作用 :</p>
<p>TestStudenet 类 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建Student对象</span></span><br><span class="line">        Student student1 = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//再给对象赋值</span></span><br><span class="line">        student1.name = <span class="string">"zhangsan"</span>;</span><br><span class="line">        student1.age = <span class="number">12</span>;</span><br><span class="line">        student1.gender = <span class="string">"男"</span>;</span><br><span class="line">      <span class="comment">//上面创建对象并赋值的过程分为了2步,如果我们想创建对象的同时对 对象的属性进行初始化的操作,可以通过构造函数来实现</span></span><br><span class="line">        Student student2 = <span class="keyword">new</span> Student(<span class="string">"王五"</span>,<span class="number">12</span>,<span class="string">"女"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="构造函数注意"><a href="#构造函数注意" class="headerlink" title="构造函数注意"></a>构造函数注意</h2><ol>
<li><strong>构造函数的名称必须和类名一致,并且没有返回值类型</strong></li>
<li><strong>如果一个类中没有添加任何构造函数,Java 虚拟机会默认给类添加空参构造函数,如果手动添加了其他带参构造函数,则 Java 虚拟机不会添加默认空参构造函数</strong></li>
<li><strong>创建对象时,如果是 new Student(), 该类中必须要有空参构造函数. 如果是 new Student (xxx,xxx,xxx),则该类中必须要有对应数据类型的带参构造函数.否则程序将会报错</strong></li>
<li><strong>构造函数其实也是体现了函数的重载,方法名相同,参数列表不相同.</strong></li>
</ol>
<h1 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h1><p>在例 3 中,我们在 Student 类中的带参构造函数中使用了 this.name 的形式给 类中的成员变量 name 赋值.下面我们来具体学习 this 关键字的作用和使用</p>
<h2 id="为什么要使用-this-关键字"><a href="#为什么要使用-this-关键字" class="headerlink" title="为什么要使用 this 关键字"></a>为什么要使用 this 关键字</h2><h4 id="例-4-修改之前-Student-类中的带参构造"><a href="#例-4-修改之前-Student-类中的带参构造" class="headerlink" title="例 4 : 修改之前 Student 类中的带参构造"></a>例 4 : 修改之前 Student 类中的带参构造</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200105144458.png" alt="20200105144458.png"></p>
<p><strong>如果在此处没有添加 this 关键字,我们从图片可以看出 name = name … 下有黄色波浪线,即 name 变量的值 赋值给了本身 name 空间,编译器认为此操作毫无意义,所以报出警告.由此可以看出,这里并不是我们想要实现的将 name 赋值给成员变量 name. 分析小技巧 : 变量就近使用原则.在 Student 的构造函数中,俩个 name 都和方法参数中的 name 挨的最近,所以都是同一 name 变量</strong></p>
<p><strong>添加 this 后 : 警告消失. this.name 调用的不再是参数中的 name 变量 而是 类中的成员变量 name , <span style="color:red">this 的使用解决了方法中的参数名和成员变量名冲突的问题.</span></strong></p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200105145137.png" alt="20200105145137.png"></p>
<h2 id="this-关键字的使用方式"><a href="#this-关键字的使用方式" class="headerlink" title="this 关键字的使用方式"></a>this 关键字的使用方式</h2><h3 id="this-作用"><a href="#this-作用" class="headerlink" title="this 作用"></a>this 作用</h3><p>对象创建后,Java 虚拟机会给当前对象分配一个引用当前对象本身的指针,该指针称之为 this.</p>
<h3 id="在构造方法中使用"><a href="#在构造方法中使用" class="headerlink" title="在构造方法中使用"></a>在构造方法中使用</h3><h4 id="例-5-创建-Teacher-类"><a href="#例-5-创建-Teacher-类" class="headerlink" title="例 5 : 创建 Teacher 类"></a>例 5 : 创建 Teacher 类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.通过this.xx 调用成员变量赋值</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name,<span class="keyword">int</span> age,String gender)</span></span>&#123;</span><br><span class="line">        <span class="comment">//2.在构造函数中还可以通过this()来调用其他构造函数</span></span><br><span class="line">        <span class="keyword">this</span>(name,age);</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在成员方法中使用"><a href="#在成员方法中使用" class="headerlink" title="在成员方法中使用"></a>在成员方法中使用</h3><h4 id="例-6"><a href="#例-6" class="headerlink" title="例 6 :"></a>例 6 :</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"写"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用this.name调用成员变量name</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">"在朗诵"</span>);</span><br><span class="line">        <span class="comment">//省略this. System.out.println(name + "在朗诵");</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exam</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用this.write()调用成员方法</span></span><br><span class="line">        <span class="keyword">this</span>.write();</span><br><span class="line">        <span class="comment">//write();省略this.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在成员方法中如果名称没有冲突可以省略 this. Java 虚拟机会自动给我们加上</strong></p>
<h3 id="this-关键字代表谁"><a href="#this-关键字代表谁" class="headerlink" title="this 关键字代表谁?"></a>this 关键字代表谁?</h3><h4 id="例-7-结合例-6"><a href="#例-7-结合例-6" class="headerlink" title="例 7 : 结合例 6"></a>例 7 : 结合例 6</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>);</span><br><span class="line">        stu.read();<span class="comment">//stu对象调用read 则 read方法中的this即为stu对象,stu对象name为zhangsan</span></span><br><span class="line">        <span class="comment">//输出 zhangsan 在朗诵</span></span><br><span class="line"></span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student(<span class="string">"wangwu"</span>);</span><br><span class="line">        stu1.read();<span class="comment">//stu1对象调用read 则 read方法中的this即为stu1对象,stu1对象name为wangwu</span></span><br><span class="line">        <span class="comment">//输出 wangwu 在朗诵</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结论 : 谁调用,this 就是谁.</strong></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>成员变量(<strong>重点</strong>)</li>
<li>函数重载(<strong>重点</strong>)</li>
<li>构造函数(<strong>重点</strong>)</li>
<li>this 关键字(<strong>重点</strong>)</li>
</ol>
]]></content>
      <categories>
        <category>后台</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Part7.Vue速学(图文)</title>
    <url>/07-vue.html</url>
    <content><![CDATA[<img src="https://cn.vuejs.org/images/logo.png" alt="20191223092306.png" style="zoom: 67%;" />

<a id="more"></a>

<p>在上一章中我们学习了组件的使用,这一章我们继续来深入学习组件…</p>
<h1 id="子父组件"><a href="#子父组件" class="headerlink" title="子父组件"></a><b style="color:rgb(65,184,131)">子父组件</b></h1><p>所谓子父组件和组件树结构,我们可以等同理解为 dom 树,在 JavaScript 中的 dom 树中,一个 dom 元素中可能包含另一个 dom 元素,同理一个组件中可能包含着另一个组件.我们通过图片和代码来说明</p>
<p><strong>来自官网图片</strong> : 其中浅灰色区域代表 <strong>父组件</strong> , 深灰色区域代表 <strong>子组件</strong><br><img src="https://cn.vuejs.org/images/components.png" alt="20191223092306.png" style="zoom: 50%;" /></p>
<h4 id="例-1"><a href="#例-1" class="headerlink" title="例 1"></a>例 1</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 在Vue实例中使用父组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m-parent</span>&gt;</span><span class="tag">&lt;/<span class="name">m-parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在父组件中使用子组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">m-child</span>&gt;</span><span class="tag">&lt;/<span class="name">m-child</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件中的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//1.创建子组件对象</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> child = &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#child'</span></span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">//2.创建父组件对象,并在父组件中注册子组件</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> parent = &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#parent'</span>,</span></span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="actionscript">          <span class="string">'m-child'</span>: child</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">//3.在Vue实例中注册父组件对象</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="actionscript">          <span class="string">'m-parent'</span>: parent</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>总结 : A 组件在 B 组件中注册,则 A 是 B 的子组件, 并且 A 只能在注册过的组件中使用.在例 1 中组件的关系为 , child 在 parent 中注册 , parent 在 Vue 实例中注册 , 也就是说 child 为 parent 的子组件, parent 为 Vue 实例的子组件, 如果我们在 Vue 实例中直接使用 child 组件就会出错,因为 child 组件没有在 Vue 实例中注册.</strong></p>
<h1 id="子父组件之间传值"><a href="#子父组件之间传值" class="headerlink" title="子父组件之间传值"></a><b style="color:rgb(65,184,131)">子父组件之间传值</b></h1><p>在下面的例子介绍中我们只定义一个组件在 vue 实例中进行注册, 即 该组件和 Vue 实例存在子父之间的关系.</p>
<h2 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a><b style="color:rgb(65,184,131)">父传子</b></h2><h4 id="例-2-在-Vue-实例中的-data-属性中初始化数组-将数组中的数据传递给组件"><a href="#例-2-在-Vue-实例中的-data-属性中初始化数组-将数组中的数据传递给组件" class="headerlink" title="例 2 : 在 Vue 实例中的 data 属性中初始化数组,将数组中的数据传递给组件"></a>例 2 : 在 Vue 实例中的 data 属性中初始化数组,将数组中的数据传递给组件</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200103183950.png" alt="20200103183950.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父传子<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 3.在vue实例中 的组件上 给子组件中的props定义的orders赋值 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m-test</span> <span class="attr">:orders</span>=<span class="string">"orders"</span> <span class="attr">:category</span>=<span class="string">"category"</span>&gt;</span><span class="tag">&lt;/<span class="name">m-test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义组件内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;category&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 在组件中接收父组件data中的数据 , 并显示 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"order in orders"</span>&gt;</span></span><br><span class="line">            &#123;&#123;order.id&#125;&#125;--&#123;&#123;order.name&#125;&#125;--&#123;&#123;order.price&#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//创建组件对象</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> test = &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#test'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//2.在子组件中定义props, 有2种方式,这里使用的是数组方式,可以同时定义多个props</span></span></span><br><span class="line"><span class="actionscript">        props: [<span class="string">'orders'</span>, <span class="string">'category'</span>]</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">//在Vue实例中注册组件对象</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//1.在vue实例中初始化数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line">          orders: [</span><br><span class="line">            &#123;</span><br><span class="line">              id: 1,</span><br><span class="line">              price: 4,</span><br><span class="line"><span class="actionscript">              name: <span class="string">'营养快线'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              id: 2,</span><br><span class="line">              price: 2,</span><br><span class="line"><span class="actionscript">              name: <span class="string">'AD钙奶'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              id: 3,</span><br><span class="line">              price: 3.5,</span><br><span class="line"><span class="actionscript">              name: <span class="string">'旺仔牛奶'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line"><span class="actionscript">          category: <span class="string">'饮料'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="actionscript">          <span class="string">'m-test'</span>: test</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图 :</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200103181929.png" alt="20200103181929.png" style="zoom: 80%;" />

<h3 id="props-的使用"><a href="#props-的使用" class="headerlink" title="props 的使用"></a>props 的使用</h3><p>在代码中我提到了 props 有 2 种使用方式,一种是数组,一种是对象.数组用法在<strong>例 2</strong>中已经学习过了,我们来看看 对象用法.</p>
<h4 id="例-3-通过-prop-对象的使用-可以对传入的属性的值的类型校验-定义默认值等功能"><a href="#例-3-通过-prop-对象的使用-可以对传入的属性的值的类型校验-定义默认值等功能" class="headerlink" title="例 3 : 通过 prop 对象的使用,可以对传入的属性的值的类型校验,定义默认值等功能"></a>例 3 : 通过 prop 对象的使用,可以对传入的属性的值的类型校验,定义默认值等功能</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> test = &#123;</span><br><span class="line">  template: <span class="string">'#test'</span>,</span><br><span class="line">  <span class="comment">//2.在子组件中定义props,对象写法</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    orders: &#123;</span><br><span class="line">      type: <span class="built_in">Array</span>, <span class="comment">//传入类型检查</span></span><br><span class="line">      <span class="keyword">default</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> [] <span class="comment">//默认值</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    category: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'商品'</span>,</span><br><span class="line">      required: <span class="literal">true</span> <span class="comment">//必须传入</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h3><ul>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
<li>Array</li>
<li>Object</li>
<li>Date</li>
<li>Function</li>
<li>Symbol</li>
</ul>
<h3 id="prop-的驼峰命名问题"><a href="#prop-的驼峰命名问题" class="headerlink" title="prop 的驼峰命名问题"></a>prop 的驼峰命名问题</h3><p>在 props,如果定义的属性为驼峰形式,我们则在 html 中需要使用 kebab-case 命名方式来进行替换 如 :</p>
<h4 id="例-4"><a href="#例-4" class="headerlink" title="例 4"></a>例 4</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件中给props传值 props为驼峰命名 使用  kebab-case 短横线来代替 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">m-test</span> <span class="attr">:my-category</span>=<span class="string">"category"</span>&gt;</span><span class="tag">&lt;/<span class="name">m-test</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子组件中使用属性为props中定义的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;myCategory&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//创建组件对象</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> test = &#123;</span></span><br><span class="line"><span class="actionscript">    template: <span class="string">'#test'</span>,</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//2.props为驼峰命名</span></span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'myCategory'</span>]</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><p>来自官网的解释 : 所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p>
<p>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你<strong>不</strong>应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。</p>
<p>简单理解 : 父组件通过 prop 向子组件传值时,如果父组件的数据更新后子组件的也会同时更新,但是反过来就不行. 并且我们不能在子组件中修改 prop , 如果我们试图在子组件中更新父组件的数据,Vue 中会提示警告 原因 : 避免数据混乱 .</p>
<h4 id="例-5"><a href="#例-5" class="headerlink" title="例 5"></a>例 5</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Props 单向数据流<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 2.count 通过 props 传递给 子组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m-test</span> <span class="attr">:count</span>=<span class="string">"count"</span>&gt;</span><span class="tag">&lt;/<span class="name">m-test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 3.在子组件中直接修改 count --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;count&#125;&#125; <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"count++"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> test = &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#test'</span>,</span></span><br><span class="line"><span class="actionscript">        props: [<span class="string">'count'</span>]</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 1.父组件中初始化 count</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line">          count: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="actionscript">          <span class="string">'m-test'</span>: test</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果 :</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200104002730.png" alt="20200104002730.png"></p>
<p><strong>为了解决这个问题我们有 2 种方案</strong></p>
<ol>
<li>props 中的数据用 data 来接收</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模板中使用 子组件中定义的myCount --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;myCount&#125;&#125; <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"myCount++"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> test = &#123;</span></span><br><span class="line"><span class="actionscript">      template: <span class="string">'#test'</span>,</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'count'</span>],</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//在子组件中使用data来接收props中的值</span></span></span><br><span class="line">      data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123; myCount : <span class="keyword">this</span>.count&#125;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">     ...</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>props 中的数据用 computed 来处理</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Props 单向数据流<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 传递给子组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">m-test</span> <span class="attr">:name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">m-test</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 子组件中使用computed计算属性 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;myName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> test = &#123;</span></span><br><span class="line"><span class="actionscript">      template: <span class="string">'#test'</span>,</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'name'</span>],</span></span><br><span class="line">      computed: &#123;</span><br><span class="line">        myName() &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">//将父组件传递的名称大写再显示</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="keyword">this</span>.name.toUpperCase()</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//父组件中定义名称</span></span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        name: <span class="string">'zhangsan'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>提示 : 如果在子组件中更新的是父组件中的对象或者数组，Vue 不会报错</strong></p>
<h2 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a><b style="color:rgb(65,184,131)">子传父</b></h2><p>前文讲述了如何将父组件中的数值传递给子组件, 这里我们来看一下子组件如何来修改父组件的状态.</p>
<h4 id="例-6-比如我们想从子组件中修改父组件中的字体大小"><a href="#例-6-比如我们想从子组件中修改父组件中的字体大小" class="headerlink" title="例 6 : 比如我们想从子组件中修改父组件中的字体大小"></a>例 6 : 比如我们想从子组件中修改父组件中的字体大小</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">"&#123;fontSize: fs + 'px'&#125;"</span>&gt;</span>父组件中的字体<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m-test</span> <span class="attr">:font-size</span>=<span class="string">"fs"</span>&gt;</span><span class="tag">&lt;/<span class="name">m-test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子组件修改父组件状态<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>当前父组件字体大小 : &#123;&#123;parentFontSize + "px"&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> test = &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#test'</span>,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line">          increment() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.parentFontSize++</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        props: [<span class="string">'fontSize'</span>],</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            parentFontSize: <span class="keyword">this</span>.fontSize</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">          fs: 12</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="actionscript">          <span class="string">'m-test'</span>: test</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>我们看此代码的效果 : 现在 在 子组件中 正确的显示出父组件所传入的字体大小为定义的 12</strong></p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200104010023.png" alt="20200104010023.png"></p>
<p>但是当我们点击 按钮 + 时，只能修改子组件中的 fontSize, 父组件中的状态没有更新，还是之前的单向数据流原因，我们想要更新父组件的状态，需要通过$emit()内置函数触发自定义事件来更新父组件的状态 , 修改代码 :</p>
<p><strong>1. 修改子组件中的 increment 方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">   increment()&#123;</span><br><span class="line">    <span class="comment">//子组件中字体大小递增</span></span><br><span class="line">    <span class="keyword">this</span>.parentFontSize++</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                通过$emit()触发自定义事件,修改父组件字体</span></span><br><span class="line"><span class="comment">                参数1 ： 自定义事件名称</span></span><br><span class="line"><span class="comment">                参数2 ： 事件触发函数中所接收的参数</span></span><br><span class="line"><span class="comment">                注, $emit需要通过this.来调用</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">'change-size'</span>,<span class="number">1</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>2. 修改父组件中 html 代码 在子组件上声明自定义事件 change-size 并触发函数 changeFontSize</strong><br><strong>注 ： 这里也应当注意驼峰的使用，尽量用 使用 kebab-case 短横线来替代</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">m-test</span> <span class="attr">:font-size</span>=<span class="string">"fs"</span> @<span class="attr">change-size</span>=<span class="string">"changeFontSize"</span>&gt;</span><span class="tag">&lt;/<span class="name">m-test</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3.在父组件中，即 vue 实例中定义触发的函数 change-size</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    fs: <span class="number">12</span></span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'m-test'</span>: test</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">//此处的value为 $emit函数传递的第二个参数</span></span><br><span class="line">    changeFontSize(value) &#123;</span><br><span class="line">      <span class="comment">//对当前的字体大小进行累加</span></span><br><span class="line">      <span class="keyword">this</span>.fs += value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>效果 :</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/cccc.gif" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><b style="color:rgb(65,184,131)">总结</b></h1><ol>
<li>在Vue中如何使用子父组件（<strong>重点</strong>）</li>
<li>子父组件之间传值（<strong>重点</strong>）</li>
<li>props的使用（<strong>重点</strong>）</li>
</ol>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200104012547.png" alt="20200104012547.png" style="zoom:80%;" />]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>人为什么要学习?</title>
    <url>/01-other.html</url>
    <content><![CDATA[<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191231220252.png" alt="20191231220252.png" style="zoom: 67%;" />

<h4 style="color:red;text-align:center;font">点下面阅读进入观看</h4>
<a id="more"></a>



<div style="position: relative; width: 100%; height: 0;padding-bottom: 75%;">
<iframe src="//player.bilibili.com/player.html?aid=26260219&cid=45094724&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe>
</div>


<h3 id="来自评论的截图"><a href="#来自评论的截图" class="headerlink" title="来自评论的截图 :"></a>来自评论的截图 :</h3><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191231222940.png" alt="20191231222940.png"></p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191231224807.png" alt="20191231224807.png"></p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191231224836.png" alt="20191231224836.png"></p>
<h5 id="120-分钟完整版链接-https-www-bilibili-com-video-av16681945"><a href="#120-分钟完整版链接-https-www-bilibili-com-video-av16681945" class="headerlink" title="120 分钟完整版链接 : https://www.bilibili.com/video/av16681945/"></a>120 分钟完整版链接 : <a href="https://www.bilibili.com/video/av16681945/" target="_blank" rel="noopener">https://www.bilibili.com/video/av16681945/</a></h5><h1 style="color:red;text-align:center;font">同学们,还颓废么?你想做一辈子的咸鱼么?</h1>
这里我给出我的学习Java或者编程的经验 :

<ol>
<li><strong>多敲多练,多敲多练,多敲多练,重要的事情来三遍</strong></li>
<li>提高英语和数学水平</li>
</ol>
<p><strong>1 决定了你学习编程的下限,你有多勤奋,下限就有多高.</strong></p>
<p><strong>2 决定了你的上限,英语提高了观看英文文档的能力,数学提高逻辑思维能力.</strong></p>
<h1 style="color:red;text-align:center;font">干吧!</h1>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191231223621.png" alt="20191231223621.png" style="zoom:50%;" />
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Part6.Vue速学(图文)</title>
    <url>/06-vue.html</url>
    <content><![CDATA[<img src="https://cn.vuejs.org/images/logo.png" alt="20191223092306.png" style="zoom: 67%;" />

<a id="more"></a>

<h1 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a><b style="color:rgb(65,184,131)">组件化开发</b></h1><h2 id="为什么要使用组件"><a href="#为什么要使用组件" class="headerlink" title="为什么要使用组件?"></a><b style="color:rgb(65,184,131)">为什么要使用组件?</b></h2><p><strong>来自官网的解释 :</strong> 组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。</p>
<p>这里我们来思考一下上一章的例子 , 在上一章的购物车小案例中,我们使用到了四个部分内容, <strong>头部登陆,商品列表,购物车 和 登陆表单 , 来总结一下之前我们的写法缺陷.</strong></p>
<ol>
<li>所有部分都在一个页面中,代码的编写和维护及其不方便,人类的思维都是喜欢将一个比较复杂或者困难的事情拆分成几个部分来完成,所以我们将一个完整的页面拆分成不同部分来进行编写和单独维护更为方便.</li>
<li>将页面的组成部分拆开后,更利于内容的复用,一个页面的组成部分可能在不同的页面多次使用,比如登陆表单,头部登陆,购物车 等 首页,商品详情页,订单页面,都可能会使用到这些内容.</li>
</ol>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191231114539.png" alt="20191231114539.png"></p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191231114952.png" alt="20191231114952.png"></p>
<h1 id="组件的基本使用"><a href="#组件的基本使用" class="headerlink" title="组件的基本使用"></a><b style="color:rgb(65,184,131)">组件的基本使用</b></h1><p>组件的使用一般分为 3 步 :</p>
<ol>
<li>定义组件内容</li>
<li>注册组件</li>
<li>使用组件</li>
</ol>
<p><strong>通常定义组件内容可以和注册组件合成一步 :</strong></p>
<h4 id="例-1"><a href="#例-1" class="headerlink" title="例 1"></a>例 1</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue实例部分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 3. 使用组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">m-cpn</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">m-cpn</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">m-cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">      /*</span><br><span class="line">         通过component方法注册组件</span><br><span class="line">         方法arg1 : 自定义组件在vue实例中使用的标签名称</span><br><span class="line">         arg2 : 组件模板内容</span><br><span class="line">        */</span><br><span class="line"><span class="actionscript">      Vue.component(<span class="string">'m-cpn'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//通过template属性来定义组件内容,这里为了方便定义html内容字符串使用 ` `符号可以换行(1左边的符号)</span></span></span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                   <span class="tag">&lt;<span class="name">header</span>&gt;</span>我是组件的头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                   <span class="tag">&lt;<span class="name">main</span>&gt;</span>我是组件的主要部分<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="actionscript">      <span class="comment">//在注册完组件后 实例vue</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;&#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>效果 :</strong> 从组件的使用效果来看,可以在<strong>vue 实例</strong>中通过组件定义组件时提供的自定义标签名来自定义网页内容.并可以重复使用.</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200102101717.png" alt="20200102101717.png"></p>
<h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><p>在例 1 中使用的注册方式即为全局注册,即所有 vue 的实例中都能使用</p>
<h4 id="例-2"><a href="#例-2" class="headerlink" title="例 2"></a>例 2</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- vue实例部分1 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>第一个app实例<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3. 使用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">m-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">m-cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- vue实例部分2 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>第二个app1实例<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3. 使用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">m-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">m-cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//全局注册</span></span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'m-cpn'</span>, &#123;</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                   <span class="tag">&lt;<span class="name">header</span>&gt;</span>我是组件的头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                   <span class="tag">&lt;<span class="name">main</span>&gt;</span>我是组件的主要部分<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="comment">//在每一个vue实例中都能使用</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app1'</span>,</span></span><br><span class="line">      data: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果 :</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200102102226.png" alt="20200102102226.png"></p>
<h3 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h3><p>如果我们想要当前组件只能在某一个 vue 实例中使用,那我们可以在对应的 vue 实例中单独注册,<strong>事实上在实际操作中我们使用的更多的时局部注册 .</strong></p>
<h4 id="例-3"><a href="#例-3" class="headerlink" title="例 3"></a>例 3</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- vue实例部分1 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>第一个app实例<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3. 使用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">m-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">m-cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>第二个app1实例<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3. 使用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">m-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">m-cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 局部注册 通过 options参数对象中的components属性注册</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line"><span class="actionscript">        <span class="string">'m-cpn'</span>: &#123;</span></span><br><span class="line">          template: `</span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                   <span class="tag">&lt;<span class="name">header</span>&gt;</span>我是组件的头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                   <span class="tag">&lt;<span class="name">main</span>&gt;</span>我是组件的主要部分<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="comment">//没注册的组件,实例不能使用</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app1'</span>,</span></span><br><span class="line">      data: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果 : 第二个 app1 实例中没有注册,所以不会显示并提示报错.</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200102111111.png" alt="20200102111111.png"></p>
<h3 id="局部注册更优的写法"><a href="#局部注册更优的写法" class="headerlink" title="局部注册更优的写法"></a>局部注册更优的写法</h3><p>直接将组件内容定义在 options 参数中会让 vue 实例显得很臃肿,特别是在组件内容比较多的时候,所以我们一般将组件中的 html 代码定义在外部,然后在通过相应的方式引入到 options 参数中的 components 属性中进行注册</p>
<h4 id="例-4"><a href="#例-4" class="headerlink" title="例 4"></a>例 4</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>组件的使用<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4. 使用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">m-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">m-cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">m-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">m-cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">m-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">m-cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 1.定义组件模板内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"m-cpn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span>&gt;</span>我是组件的头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">main</span>&gt;</span>我是组件的主要部分<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.创建组件对象并给template属性赋值</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> myCpn = &#123;</span></span><br><span class="line"><span class="actionscript">      template: <span class="string">'#m-cpn'</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 3.注册组件</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line"><span class="actionscript">        <span class="string">'m-cpn'</span>: myCpn</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果 : 这样我们就可以将组件的 html 代码抒写在 template 标签中,避免了写在字符串中没有提示的尴尬.</p>
<p><span style="color:red;font-weight:bolder;">注意 : 无论是在 template 标签中书写还是直接在组件对象中使用字符串中写,当组件内部中有多个标签时,需要将组件内容包裹在一个根标签中,一般我们用 div 做为根标签使用.</span></p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200102103902.png" alt="20200102103902.png"></p>
<h3 id="组件中-data-的使用"><a href="#组件中-data-的使用" class="headerlink" title="组件中 data 的使用"></a>组件中 data 的使用</h3><p>有时我们需要在组件中使用变量来呈现数据,就要和之前学习一样使用到 vue 实例中的 data 属性,我们来看看组件中 data 的使用.</p>
<h4 id="例-5-与之前的方式一样"><a href="#例-5-与之前的方式一样" class="headerlink" title="例 5 : 与之前的方式一样"></a>例 5 : 与之前的方式一样</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>组件的data使用<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">m-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">m-cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"m-cpn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span>&gt;</span>我是组件的头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"count++"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> myCpn = &#123;</span></span><br><span class="line"><span class="actionscript">      template: <span class="string">'#m-cpn'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        count: 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line"><span class="actionscript">        <span class="string">'m-cpn'</span>: myCpn</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果 : 我们可以看出, count 中的数字并没有正确显示,并且在控制台中还出现大量报错 .</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200102105938.png" alt="20200102105938.png"></p>
<p>我们截取对应报错信息 :</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">vue.js:<span class="number">634</span> [Vue warn]: The "data" <span class="keyword">option</span> should be a <span class="keyword">function</span> that <span class="keyword">returns</span> a per-instance <span class="keyword">value</span> <span class="keyword">in</span> component definitions.</span><br></pre></td></tr></table></figure>

<p>这里提示我们的 “data” 选项如果要定义在组件中应当是一个方法(function),并且需要返回一个实例对象.</p>
<h4 id="例-6-正确使用方法"><a href="#例-6-正确使用方法" class="headerlink" title="例 6 : 正确使用方法"></a>例 6 : 正确使用方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myCpn = &#123;</span><br><span class="line">  template: <span class="string">'#m-cpn'</span>,</span><br><span class="line">  <span class="comment">//data属性 为 function 并 返回一个实例对象.</span></span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.注册组件</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'m-cpn'</span>: myCpn</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>效果 : 下图使用正确,没有出错.</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/bbbb.gif" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><b style="color:rgb(65,184,131)">总结</b></h1><ol>
<li>组件的基本使用</li>
<li>全局注册和<strong>局部注册</strong> (<strong>重点</strong>)</li>
<li>组件中 data 的使用 (<strong>重点</strong>)</li>
</ol>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200102110717.png" alt="20200102110717.png" style="zoom: 67%;" />
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1-5·Java补充(图文)</title>
    <url>/08-java.html</url>
    <content><![CDATA[<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191231111023.png" alt="20191231111023.png" style="zoom:67%;" />

<a id="more"></a>

<h1 id="回顾前文"><a href="#回顾前文" class="headerlink" title="回顾前文"></a>回顾前文</h1><p>在 Part1-Part5 的学习过程中,我们重点要掌握如下内容</p>
<ol>
<li>Java 环境配置和 Eclipse 工具的使用<ul>
<li><strong>Eclipse 工具创建项目的过程</strong></li>
</ul>
</li>
<li>标识符&amp;关键字&amp;注释</li>
<li><strong>变量&amp;数据类型</strong></li>
<li>转义符&amp;<strong>运算符</strong></li>
<li><strong>if&amp;switch&amp;while&amp;for 语句</strong></li>
</ol>
<h1 id="内容补充"><a href="#内容补充" class="headerlink" title="内容补充"></a>内容补充</h1><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>在 Java 中,使用{}来标识代码块.比如我们常见的 main 方法后的{},if,switch,while 等语法机构后的{}都可以称之为代码块,if 这些语句的代码块我们通常称之为<strong>普通代码块</strong>,在后面的学习过程中我们会接触到<strong>static 静态代码块</strong>,<strong>构造代码块</strong>,<strong>同步代码块</strong></p>
<h4 id="局部代码块"><a href="#局部代码块" class="headerlink" title="局部代码块"></a>局部代码块</h4><p>通常在一个方法内部出现的{}代码块,我们将其称之为局部代码块,比如 main 方法中的{},我们看下面代码 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//声明变量name,并赋值</span></span><br><span class="line">        String name = <span class="string">"zhangsan"</span>;</span><br><span class="line">        <span class="comment">//声明变量number,并赋值</span></span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//输出name和number</span></span><br><span class="line">        System.out.println(<span class="string">"名字 : "</span> + name + <span class="string">" , number : "</span> + number);</span><br><span class="line">        <span class="comment">//定义循环,循环10000次 , 输出</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= <span class="number">10000</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//....下方代码省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们来分析一下上面代码, 首先我们声明了 2 个变量并赋值,最后使用了变量. 然后进入循环…</p>
<p>现在我们回顾一下变量是什么? <strong>Java 内存中的一块存储空间,这块空间中存储的数据是可变的</strong> , 既然变量是一块存储空间,那肯定会占用 Java 中的一部分内存,而在上个例子中 2 个变量创建后,也就是说这 2 块空间在 Java 内存中开辟后,我们对变量中的内容进行输出,然后在接下来的代码中再没有使用到这 2 个变量,也就是说在接下来的 Java 程序运行中,这俩块空间犹如垃圾一样存在 Java 内存中,当我们一个完整的程序中,这种垃圾变量(<strong>创建后,未使用的变量</strong>)越来越多,肯定会占用越来越多的内存空间,这个时候我们就应当合理的去释放掉这些空间,那怎么在方法中来控制变量的释放,限定变量的生命周期呢?(<strong>生命周期 : 一个事物从创建到销毁的过程.</strong>) 那这里就要使用到我们的局部代码块了.</p>
<p><strong>局部代码块 : 在方法中使用,用来限定变量生命周期，及早释放，提高内存利用率。</strong></p>
<p>修改过后的代码 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">              &#123; &#125; 即为代码块,在方法中的 &#123; &#125; 即为局部代码块</span></span><br><span class="line"><span class="comment">              当此大括号中的内容执行结束就会被释放掉</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//声明变量name,并赋值</span></span><br><span class="line">            String name = <span class="string">"zhangsan"</span>;</span><br><span class="line">            <span class="comment">//声明变量number,并赋值</span></span><br><span class="line">            <span class="keyword">int</span> number = <span class="number">10</span>;</span><br><span class="line">            <span class="comment">//输出name和number</span></span><br><span class="line">            System.out.println(<span class="string">"名字 : "</span> + name + <span class="string">" , number : "</span> + number);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 循环代码体代码...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>变量作用域就代表变量的作用范围.<br><strong>通常变量的作用域就代表当前变量所处的大括号{ }的范围,根据大括号{ }的位置不同,变量的作用范围也不一样,我们目前将变量根据作用域的划分为不同的级别的变量,类级,对象级,方法级,块级</strong></p>
<ol>
<li>类级 : 在类中由 static 关键字修饰 (后面分析)</li>
<li>对象级 : 又称之为成员属性或<b style="color:red">全局变量  </b>(后面分析)</li>
<li>方法级 : 在方法中定义的变量,又称之为<b style="color:red">局部变量</b></li>
<li>块级 : 代码块中的定义的变量,比如上文中的局部代码块中的 name 和 number</li>
</ol>
<h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a><b style="color:red">局部变量</b></h4><ul>
<li>在同一个作用域下使用局部变量时,多个变量名的名称不能相同,如</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo02</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       String name = <span class="string">"张三"</span>;</span><br><span class="line">       String name = <span class="string">"李四"</span>; <span class="comment">//错误 , 因为 2个 name 所处的 &#123;&#125;位置是同一作用域,都在同一个main方法中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>不能使用不同作用域下的局部变量,如</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo03</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">"a = "</span> + a);<span class="comment">//在main方法中声明的变量可以在该方法内部的if代码块中使用</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"b = "</span> + b);<span class="comment">//错误 在 if 代码块中声明的变量只能 在 if代码块中使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo03</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">         System.out.println(<span class="string">"i = "</span> + i);</span><br><span class="line">     &#125;</span><br><span class="line">        System.out.println(<span class="string">"i = "</span> + i);<span class="comment">//错误,在for代码块中声明的变量 i 只能在 for代码块中使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191231104546.png" alt="20191231104546.png"></p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="char"><a href="#char" class="headerlink" title="char"></a>char</h3><p>这里主要提一下 char 类型的算术运算,在计算机中的运算其实在底层都是二进制的运算,在 Java 中字符对应着一张字符编码表 ASCII 码表 .<br><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191231102947.png" alt="20191231102947.png"></p>
<p>在此码表中我们看到字符 a 对应着数字 97,所以我们看下面代码 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo04</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     System.out.println(<span class="string">'a'</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 :</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">98</span></span><br></pre></td></tr></table></figure>

<p><strong>结论 : 在做字符类型运算时,需要将对应字符根据对应的编码表转换成数字来进行运算</strong></p>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>这里也主要看一下 String 类型字符串的算术运算,在 Java 中字符串不同于字符 char,在做加法运算时,加法运算符转变成<strong>字符串连接符</strong>,其实在之前的学习之前我们已经练习过很多次了,一个字符串与其他数字或者字符或者多个字符串的相加,就等于字符串的拼接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo05</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"a = "</span> + <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"1"</span> + <span class="number">1</span>);</span><br><span class="line">        String name = <span class="string">"zhangsan"</span>;</span><br><span class="line">        System.out.println(<span class="string">"name = "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 :</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">a</span> = <span class="number">1</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="attribute">name</span> = zhangsan</span><br></pre></td></tr></table></figure>

<h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><h4 id="自动类型提升"><a href="#自动类型提升" class="headerlink" title="自动类型提升"></a>自动类型提升</h4><p>在 Java 中数字和数字之间进行算术运算时,会有着数据类型不同的数字进行运算,如 :</p>
<p><strong>提示 : 字面量 整数 默认为 int 类型, 字面量 小数 默认为 double 类型</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo05</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//相同数据类型的运算</span></span><br><span class="line">        System.out.println(<span class="number">2</span> / <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//不同数据类型的运算</span></span><br><span class="line">        System.out.println(<span class="number">2.0</span> / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 :</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0.2</span></span><br></pre></td></tr></table></figure>

<p><strong>结论 :</strong></p>
<ol>
<li>相同数据类型运算后还是当前数据类型,即:整型 / 整型 = 整型 , 所以第一个输出语句结果为 0.2 取整为 <strong>0</strong> .</li>
<li>不同数据类型之间的运算,小的数据类型会<strong>自动提升</strong>为大的数据类型然后进行运算, 所以第二个输出语句结果为 整型 10 <strong>自动提升当前类型</strong>为 浮点型 10.0 , 运算后结果为浮点型 <strong>0.2</strong> .</li>
</ol>
<h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><p>在算术运算后如果需要赋值给另一个变量.这时候赋值的变量的数据类型和被赋值的变量数据类型不一致就可能会需要到强制类型转换,如 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo06</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> a = <span class="number">2.0</span> / <span class="number">10</span>;<span class="comment">//报错</span></span><br><span class="line">       <span class="comment">//强制类型转换</span></span><br><span class="line">       <span class="keyword">int</span> c = (<span class="keyword">int</span>)(<span class="number">2.0</span> / <span class="number">10</span>);</span><br><span class="line">       <span class="keyword">double</span> b = <span class="number">2</span>;<span class="comment">//不报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结论 :</strong></p>
<ol>
<li>当 = 右边的数据类型大于 左边的数据类型, 就需要 强制类型转换 .</li>
<li>当 = 右边的数据类型小于 左边的数据类型, 则自动提升为左边的数据类型 .</li>
</ol>
<h3 id="整型和浮点型大小"><a href="#整型和浮点型大小" class="headerlink" title="整型和浮点型大小"></a>整型和浮点型大小</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th>大小</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>8 位,1 字节</td>
<td>-128~127</td>
</tr>
<tr>
<td>short</td>
<td>16 位,2 字节</td>
<td>-32768~32767</td>
</tr>
<tr>
<td>int</td>
<td>32 位,4 字节</td>
<td>-2147483648~2147483647</td>
</tr>
<tr>
<td>long</td>
<td>64 位,8 字节</td>
<td>-9223372036854775808~9223372036854775807</td>
</tr>
<tr>
<td>float</td>
<td>32 位,4 字节</td>
<td>3.402823e+38 ~ 1.401298e-45</td>
</tr>
<tr>
<td>double</td>
<td>64 位,8 字节</td>
<td>1.797693e+308~ 4.9000000e-324</td>
</tr>
<tr>
<td>char</td>
<td>16 位 unicode 字符</td>
<td>\u0000 ~ \uffff ( 0 ~ 65535)</td>
</tr>
</tbody></table>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="和-的区别"><a href="#和-的区别" class="headerlink" title="= 和 += 的区别"></a>= 和 += 的区别</h3><p>数据类型转换的区别 : 看例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo07</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span> b = <span class="number">0</span>;</span><br><span class="line">        b = b + a; <span class="comment">//报错</span></span><br><span class="line">        b += a; <span class="comment">//正确</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析 :</p>
<ol>
<li>报错 : byte 类型 b 和 int 类型 a 做 算术运算 类型自动提升为 int 类型 , 然后<strong>运算结束后 赋值给 byte 类型 b 报错</strong>.</li>
<li>正确 : <strong>+= 自动进行类型转换</strong>.</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>变量作用域 (<strong>重点</strong>)</li>
<li>字符运算(<strong>掌握</strong>)和字符串拼接(<strong>重点</strong>)</li>
<li>数据类型大小(<strong>记住谁大谁小就好</strong>)</li>
<li>数据类型转换(<strong>重点</strong>)</li>
<li>= 和 += 区别(<strong>理解</strong>)</li>
</ol>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191231110936.png" alt="20191231110936.png"></p>
]]></content>
      <categories>
        <category>后台</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Part5.Vue练习(图文)</title>
    <url>/05-vue.html</url>
    <content><![CDATA[<img src="https://cn.vuejs.org/images/logo.png" alt="20191223092306.png" style="zoom: 67%;" />

<a id="more"></a>

<h1 id="购物车练习"><a href="#购物车练习" class="headerlink" title="购物车练习"></a>购物车练习</h1><p>学了几章的 vue 了,我们来做一个小练习,这里我给出我的效果,和我的代码,大家可以先自己试着做一下然后来参考.</p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/aaaaa.gif" alt=""></p>
<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><ol>
<li>头部登陆框</li>
<li>显示商品列表</li>
<li>购物车</li>
<li>登陆框</li>
</ol>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码 :"></a>代码 :</h1><h2 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式 :"></a>CSS样式 :</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*全局字体*/</span></span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*商品列表和购物车样式*/</span></span><br><span class="line">  <span class="selector-class">.wrap</span> &#123;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">40px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.wrap</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: block;</span><br><span class="line">   <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">   <span class="attribute">clear</span>: both;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.pro</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">float</span>: left;</span><br><span class="line">   <span class="attribute">text-align</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.pro</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">table</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">   <span class="attribute">text-align</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h3</span> &#123;</span><br><span class="line">   <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*登陆框样式*/</span></span><br><span class="line">  <span class="comment">/*是否显示*/</span></span><br><span class="line">  <span class="selector-class">.active</span>&#123;</span><br><span class="line">   <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.box</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">   <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">   <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line">   <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">6</span>);</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">   <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.box</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">30px</span>;</span><br><span class="line">   <span class="attribute">text-align</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.box</span> <span class="selector-class">.inputBox</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>: relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.box</span> <span class="selector-class">.inputBox</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">border</span>: none;</span><br><span class="line">   <span class="attribute">outline</span>: none;</span><br><span class="line">   <span class="attribute">background-color</span>: transparent;</span><br><span class="line">   <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.box</span> <span class="selector-class">.inputBox</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">   <span class="attribute">pointer-events</span>: none;</span><br><span class="line">   <span class="attribute">transition</span>: .<span class="number">4s</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.box</span> <span class="selector-class">.inputBox</span> <span class="selector-tag">input</span><span class="selector-pseudo">:valid</span>~<span class="selector-tag">label</span>,</span><br><span class="line">  <span class="selector-class">.box</span> <span class="selector-class">.inputBox</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>~<span class="selector-tag">label</span> &#123;</span><br><span class="line">   <span class="attribute">top</span>: -<span class="number">18px</span>;</span><br><span class="line">   <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#6AC653</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.box</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">"submit"</span>]</span> &#123;</span><br><span class="line">   <span class="attribute">background-color</span>: transparent;</span><br><span class="line">   <span class="attribute">border</span>: none;</span><br><span class="line">   <span class="attribute">outline</span>: none;</span><br><span class="line">   <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="number">#6AC653</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">   <span class="attribute">cursor</span>: pointer;</span><br><span class="line">   <span class="attribute">transition</span>: .<span class="number">4s</span>;</span><br><span class="line">   <span class="attribute">display</span>: block;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.box</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">"submit"</span>]</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Vue实例部分 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 头部登陆 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"isLogin"</span>&gt;</span>欢迎您 : &#123;&#123;userName&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>请<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> @<span class="attr">click.prevent</span>=<span class="string">"showLogin"</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 商品列表,购物车,登陆框 容器  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 商品列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h3</span>&gt;</span>商品列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pro"</span> <span class="attr">v-for</span>=<span class="string">"(pro,index) in proList"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"pro.imgSrc"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;pro.name&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       商品价格: <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;pro.price&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"buy(index)"</span>&gt;</span>点击购买<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 购物车 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"isLogin"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"cartList.length &gt; 0"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span> <span class="attr">cellpadding</span>=<span class="string">"20px"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>商品编号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>单价<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>商品操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>实付款<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>#<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"(cart,index) in cartList"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;cart.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;cart.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;cart.price&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"cart.number--"</span> <span class="attr">v-if</span>=<span class="string">"cart.number &gt; 1"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          &#123;&#123;cart.number&#125;&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"cart.number++"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"cart.status == 0"</span>&gt;</span>未发货<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">"cart.status == 1"</span>&gt;</span>已发货<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>交易成功<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;(cart.price * cart.number).toFixed(2)&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"deleteCart(index)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>实付总价 : &#123;&#123;getTotalPrice()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>亲,您的购物车还没添加任何商品哦~~~<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h3</span>&gt;</span>很抱歉!您还没有登陆,请登陆后查看购物车!!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- 登陆框 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:class</span>=<span class="string">"&#123;active:!isShow&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模拟登陆效果,登陆成功后,不需要跳转路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> @<span class="attr">submit.prevent</span>=<span class="string">"formSubmit"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputBox"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"userName"</span> <span class="attr">required</span>=<span class="string">"required"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>UserName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputBox"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">required</span>=<span class="string">"required"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Vue部分"><a href="#Vue部分" class="headerlink" title="Vue部分"></a>Vue部分</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">   new Vue(&#123;</span><br><span class="line">    el: &#39;#app&#39;,</span><br><span class="line">    data: &#123;</span><br><span class="line">     &#x2F;&#x2F;商品列表</span><br><span class="line">     proList: [&#123;</span><br><span class="line">       id: 1,</span><br><span class="line">       name: &#39;李宁卫衣&#39;,</span><br><span class="line">       imgSrc: &#39;img&#x2F;1.jpg&#39;,</span><br><span class="line">       price: 210,</span><br><span class="line">       status: 0,</span><br><span class="line">       number: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">       id: 2,</span><br><span class="line">       name: &#39;Nike T恤&#39;,</span><br><span class="line">       price: 180,</span><br><span class="line">       imgSrc: &#39;img&#x2F;4.jpg&#39;,</span><br><span class="line">       status: 0,</span><br><span class="line">       number: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">       id: 3,</span><br><span class="line">       name: &#39;李宁卫裤&#39;,</span><br><span class="line">       price: 114,</span><br><span class="line">       imgSrc: &#39;img&#x2F;2.jpg&#39;,</span><br><span class="line">       status: 0,</span><br><span class="line">       number: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">       id: 4,</span><br><span class="line">       name: &#39;Muscletech&#39;,</span><br><span class="line">       price: 510,</span><br><span class="line">       imgSrc: &#39;img&#x2F;3.jpg&#39;,</span><br><span class="line">       status: 0,</span><br><span class="line">       number: 1</span><br><span class="line">      &#125;</span><br><span class="line">     ],</span><br><span class="line">     &#x2F;&#x2F;购物车列表</span><br><span class="line">     cartList: [],</span><br><span class="line">     &#x2F;&#x2F;是否登陆</span><br><span class="line">     isLogin: false,</span><br><span class="line">     &#x2F;&#x2F;用户名</span><br><span class="line">     userName: &#39;&#39;,</span><br><span class="line">     &#x2F;&#x2F;是否显示登陆框</span><br><span class="line">     isShow:false</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">     &#x2F;&#x2F; 点击购买的 点击事件</span><br><span class="line">     buy(index) &#123;</span><br><span class="line">      if(this.isLogin)&#123;</span><br><span class="line">       let pro &#x3D; this.proList[index]</span><br><span class="line">       if (this.cartList.some(v &#x3D;&gt; v.id &#x3D;&#x3D; pro.id)) &#123;</span><br><span class="line">        pro.number++</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">        this.cartList.push(pro)</span><br><span class="line">       &#125;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">       alert(&#39;很抱歉!您还没有登陆哦!&#39;)</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     &#x2F;&#x2F; 获取总价格的 方法</span><br><span class="line">     getTotalPrice() &#123;</span><br><span class="line">      &#x2F;&#x2F;普通写法</span><br><span class="line">      &#x2F;&#x2F;       let sum &#x3D; 0;</span><br><span class="line">      &#x2F;&#x2F;       for(let i &#x3D; 0;i&lt;this.cartList.length;i++)&#123;</span><br><span class="line">      &#x2F;&#x2F;        sum +&#x3D; this.cartList[i].number * this.cartList[i].price</span><br><span class="line">      &#x2F;&#x2F;       &#125;</span><br><span class="line">      &#x2F;&#x2F;reduce函数调用</span><br><span class="line">      &#x2F;&#x2F;       let sum &#x3D; this.cartList.reduce(function(prev,cart)&#123;</span><br><span class="line">      &#x2F;&#x2F;        return cart.price * cart.number + prev</span><br><span class="line">      &#x2F;&#x2F;       &#125;,0)</span><br><span class="line">      &#x2F;&#x2F;箭头函数调用</span><br><span class="line">      let sum &#x3D; this.cartList.map(cart &#x3D;&gt; cart.price * cart.number).reduce((prev, price) &#x3D;&gt; prev + price);</span><br><span class="line">      return sum</span><br><span class="line">     &#125;,</span><br><span class="line">     </span><br><span class="line">     &#x2F;&#x2F; 删除购物车中的商品</span><br><span class="line">     deleteCart(index) &#123;</span><br><span class="line">      this.cartList.splice(index, 1)</span><br><span class="line">     &#125;,</span><br><span class="line">     </span><br><span class="line">     &#x2F;&#x2F; 点击登陆 显示登陆框</span><br><span class="line">     showLogin()&#123;</span><br><span class="line">      this.isShow &#x3D; true;</span><br><span class="line">     &#125;,</span><br><span class="line">     </span><br><span class="line">     &#x2F;&#x2F;登陆表单提交的事件</span><br><span class="line">     formSubmit()&#123;</span><br><span class="line">      this.isLogin &#x3D; true;</span><br><span class="line">      this.isShow &#x3D; false;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="这里我界面的CSS没有怎么写-登陆框直接拿了上课讲的例子过来偷懒了-主要是练习之前Vue中的各种指令"><a href="#这里我界面的CSS没有怎么写-登陆框直接拿了上课讲的例子过来偷懒了-主要是练习之前Vue中的各种指令" class="headerlink" title="这里我界面的CSS没有怎么写, 登陆框直接拿了上课讲的例子过来偷懒了,主要是练习之前Vue中的各种指令"></a>这里我界面的CSS没有怎么写, 登陆框直接拿了上课讲的例子过来偷懒了,主要是练习之前Vue中的各种指令</h2><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191230194809.png" alt="20191230194809.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Part5·Java语法结构(二)(图文)</title>
    <url>/07-java.html</url>
    <content><![CDATA[<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191229220831.png" alt="20191229220831.png" style="zoom:80%;" />

<a id="more"></a>

<h1 id="循环结构-1-While"><a href="#循环结构-1-While" class="headerlink" title="循环结构 1 While"></a>循环结构 1 While</h1><h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><h3 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*整个语法我们可以这么来理解, 首先看while的翻译 : 当..   那我们就这么讲</span></span><br><span class="line"><span class="comment"> 当 小括号中的表达式的结果为true时,代码进入大括号循环体 开始循环. 直到 布尔表达式的结果为false则跳出.如果布尔表达式的结果永远都为true,那此时循环进入无限循环,也可以称之为死循环,一般我们尽量要避免出现死循环的情况.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span>(布尔表达式)&#123;</span><br><span class="line">    <span class="comment">//当布尔表达式的结果为true时,循环执行大括号中的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>学习循环我们还是和上节一样举个栗子 :</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191226153157.png" alt="20191226153157.png"></p>
<h4 id="例-1-在控制台中输出100次-“好好学习-天天向上”"><a href="#例-1-在控制台中输出100次-“好好学习-天天向上”" class="headerlink" title="例 1 : 在控制台中输出100次 “好好学习,天天向上”"></a>例 1 : 在控制台中输出100次 “好好学习,天天向上”</h4><p>代码 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.定义一个计数器来 记录当前输出到第几次</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//2.开始循环 输出 好好学习,天天向上 ,</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        按照上面我们的理解,我们可以这么写,</span></span><br><span class="line"><span class="comment">        (1)当计数器中记录的数字小于等于100时,我们就开始循环,</span></span><br><span class="line"><span class="comment">        (2)输出 好好学习,天天向上</span></span><br><span class="line"><span class="comment">        (3)循环一次后,计数器中的数字要自增一次,然后自增到101时退出循环,程序结束</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">while</span>(count &lt;= <span class="number">100</span>)&#123;<span class="comment">//(1)</span></span><br><span class="line">            System.out.println(<span class="string">"好好学习,天天向上"</span>);<span class="comment">//(2)</span></span><br><span class="line">            count++;<span class="comment">//(3)----&gt;回到(1)判断</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"程序结束..."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 :</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">好好学习,天天向上</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">好好学习,天天向上</span><br><span class="line">程序结束</span><br></pre></td></tr></table></figure>

<h4 id="小结"><a href="#小结" class="headerlink" title="小结 :"></a>小结 :</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;</span><br><span class="line">    循环操作</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*执行while循环时, 我们先要判断循环条件是否满足,然后再来执行大括号中的循环操作,执行完一次循环后,继续判断循环条件,....*/</span></span><br></pre></td></tr></table></figure>

<h4 id="例-2-求1-10的和"><a href="#例-2-求1-10的和" class="headerlink" title="例 2 : 求1-10的和"></a>例 2 : 求1-10的和</h4><p>代码 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析 :</span></span><br><span class="line"><span class="comment">需要求和, 我们先定义和的变量 sum .</span></span><br><span class="line"><span class="comment">   .分析1-10求和的过程 :</span></span><br><span class="line"><span class="comment"> 第一次 和 sum = 0 + 1</span></span><br><span class="line"><span class="comment"> 第二次   sum = 1 + 2</span></span><br><span class="line"><span class="comment"> 第三次   sum = 3 + 3</span></span><br><span class="line"><span class="comment"> 第四次   sum = 6 + 4</span></span><br><span class="line"><span class="comment"> ...</span></span><br><span class="line"><span class="comment"> 第10次  sum = 前一次的sum + 10 </span></span><br><span class="line"><span class="comment">得出结论</span></span><br><span class="line"><span class="comment">循环操作 : 求和 为 sum =  sum + n;</span></span><br><span class="line"><span class="comment">     n 为计数器,用来计算当前累加到第几个数,每次循环 计数器都自增一次</span></span><br><span class="line"><span class="comment">循环条件 : 当 n 的值小于等于10时,进入循环开始循环操作.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo02</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     <span class="comment">//1.定义 和 : sum 和 计数器 : n</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>,n = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//2.判断当前计数器是否小于等于10</span></span><br><span class="line">        <span class="keyword">while</span>(n &lt;= <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="comment">//3.如果count&lt;= 10 执行循环操作</span></span><br><span class="line">            sum += n;<span class="comment">//为 sum = sum + n; 的简写</span></span><br><span class="line">            <span class="comment">//4.每执行一次和的累加 n 自增一次</span></span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.程序结束 输出 sum = 多少?</span></span><br><span class="line">        System.out.println(<span class="string">"sum = "</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 :</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">sum</span> = <span class="number">55</span></span><br></pre></td></tr></table></figure>

<h4 id="练习-求-1-10-的偶数和-奇数和"><a href="#练习-求-1-10-的偶数和-奇数和" class="headerlink" title="练习 : 求 1 - 10 的偶数和,奇数和"></a>练习 : 求 1 - 10 的偶数和,奇数和</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">小提示 :</span><br><span class="line">偶数和 : 累加的是能被<span class="number">2</span>整除的数</span><br><span class="line">奇数和 : 除<span class="number">2</span>余<span class="number">1</span>的数才能累加</span><br><span class="line">或者修改计数器的增量也可以.</span><br></pre></td></tr></table></figure>

<h2 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h2><h3 id="语法结构-1"><a href="#语法结构-1" class="headerlink" title="语法结构"></a>语法结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="comment">//当布尔表达式的结果为true时,循环执行大括号中的代码</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式)</span><br></pre></td></tr></table></figure>

<h3 id="do…while循环和while循环的区别"><a href="#do…while循环和while循环的区别" class="headerlink" title="do…while循环和while循环的区别"></a>do…while循环和while循环的区别</h3><p>俩者本质上都是循环结构,唯一区别就是执行顺序的问题 :</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>循环 : 先判断循环条件 , 再执行循环语句</span><br><span class="line"><span class="keyword">do</span>...<span class="keyword">while</span>循环 : 先执行循环语句 , 再判断循环条件.</span><br></pre></td></tr></table></figure>

<h4 id="例-3"><a href="#例-3" class="headerlink" title="例 3"></a>例 3</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo03</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     <span class="comment">//while循环</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &gt; <span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"while 循环 执行...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//do...while循环</span></span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"do...while 循环 执行...."</span>);</span><br><span class="line">        &#125;<span class="keyword">while</span>(i &gt; <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 :</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span><span class="built_in">..</span>.<span class="keyword">while</span> 循环 执行<span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></table></figure>

<p>从这里可以看出 , i = 1, i &gt; 2的结果为false 则,while循环体中的循环操作不执行,但是 do语句中的循环操作执行并且只执行一次,执行一次后 i &gt; 2结果为false 退出循环正好验证之前的区别.</p>
<p>注 : do..while 基本见不到,以while为主</p>
<h1 id="循环结构-2-For"><a href="#循环结构-2-For" class="headerlink" title="循环结构 2 For"></a>循环结构 2 For</h1><h3 id="语法结构-2"><a href="#语法结构-2" class="headerlink" title="语法结构"></a>语法结构</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span><span class="params">(定义计数器;循环条件;修改计数器)</span></span>&#123;</span><br><span class="line"> 循环操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="回顾-例-1"><a href="#回顾-例-1" class="headerlink" title="回顾 例 1 :"></a>回顾 例 1 :</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo04</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*例1 的代码 使用 while 循环</span></span><br><span class="line"><span class="comment">        int count = 1;</span></span><br><span class="line"><span class="comment">        while(count &lt;= 100)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println("好好学习,天天向上");</span></span><br><span class="line"><span class="comment">            count++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        System.out.println("程序结束...")</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">/*使用for循环*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> count = <span class="number">1</span>;count &lt;= <span class="number">100</span>;count++)&#123;</span><br><span class="line">           System.out.println(<span class="string">"好好学习,天天向上"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"程序结束..."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 :</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">好好学习,天天向上</span><br><span class="line">...</span><br><span class="line">好好学习,天天向上</span><br><span class="line">程序结束...</span><br></pre></td></tr></table></figure>

<p><strong>注意执行顺序即可,先初始化 count , 判断 count 是否 &lt;= 100 再 执行 循环操作,然后 count++</strong></p>
<h4 id="例-4-求1-100的和"><a href="#例-4-求1-100的和" class="headerlink" title="例 4 :  求1 - 100的和"></a>例 4 :  求1 - 100的和</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo05</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//定义总和</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> count = <span class="number">1</span>;count &lt;= <span class="number">100</span>;count++)&#123;</span><br><span class="line">            sum += count;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"sum = "</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 :</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">sum</span> = <span class="number">5050</span></span><br></pre></td></tr></table></figure>

<p><strong>从上面的学习中发现,while和for循环都是用来执行循环操作,那在实际使用时我们应该怎么去选择哪一种循环?</strong></p>
<ol>
<li>for循环一般在循环次数确定的情况时使用.(因为for循环体中一般需要初始化计数器来计算循环次数)</li>
<li>while循环一般在循环次数不确定,但清楚循环的退出条件时使用.</li>
</ol>
<h1 id="break-amp-continue"><a href="#break-amp-continue" class="headerlink" title="break&amp;continue"></a>break&amp;continue</h1><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p>break : 其实在学习switch中我们已经认识了关键字 <strong>break</strong>,break,故名思意,起阻断的作用.在循环中使用会打断循环的执行.跳出循环语句.</p>
<h4 id="例-5-小明和同学做游戏-小明在心中默念一个1-10中间的数字-同学如果猜中则游戏结束-小明受到惩罚-罚做100个俯卧撑-游戏只能猜5次-5次结束-同学受到惩罚-每个同学罚做50个俯卧撑"><a href="#例-5-小明和同学做游戏-小明在心中默念一个1-10中间的数字-同学如果猜中则游戏结束-小明受到惩罚-罚做100个俯卧撑-游戏只能猜5次-5次结束-同学受到惩罚-每个同学罚做50个俯卧撑" class="headerlink" title="例 5 : 小明和同学做游戏,小明在心中默念一个1-10中间的数字,同学如果猜中则游戏结束,小明受到惩罚,罚做100个俯卧撑,游戏只能猜5次,5次结束,同学受到惩罚.每个同学罚做50个俯卧撑"></a>例 5 : 小明和同学做游戏,小明在心中默念一个1-10中间的数字,同学如果猜中则游戏结束,小明受到惩罚,罚做100个俯卧撑,游戏只能猜5次,5次结束,同学受到惩罚.每个同学罚做50个俯卧撑</h4><p>代码 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo06</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.定义游戏结果(结果要么 猜中,要么未猜中 可以定义为 布尔类型)</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//初始化 为 未猜中</span></span><br><span class="line">        <span class="comment">//2.定义一个数字来作为小明心中的数字,此处我们使用一个1-10的随机值,不懂的暂时可以先直接照着抄</span></span><br><span class="line">        <span class="comment">//Math.random() 得到一个 0-1的随机小数,包含0,不包含1</span></span><br><span class="line">        <span class="keyword">int</span> num = (<span class="keyword">int</span>) (Math.random() * <span class="number">10</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//3.(作弊)输出小明心中的数字,不作弊怕你们猜不到,哈哈哈哈哈</span></span><br><span class="line">        System.out.println(<span class="string">"小明心中的数字 : "</span> + num);</span><br><span class="line">        <span class="comment">//4.游戏只能玩5次,确定循环次数 使用for循环,并创建扫描仪(扫描仪的创建不要放在循环体内,想想,我们要打印5份卷子,需要5个打印机嘛?)</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//创建扫描仪</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &gt;= <span class="number">0</span>; i--)&#123;<span class="comment">//注意这里是从4开始的哦,每循环一次,游戏次数-1</span></span><br><span class="line">            <span class="comment">//5.提示同学开始猜测 :</span></span><br><span class="line">            System.out.print(<span class="string">"请输入小明心中的数字 : "</span>);</span><br><span class="line">            <span class="comment">//6.得到同学输入的数字</span></span><br><span class="line">            <span class="keyword">int</span> number = scanner.nextInt();</span><br><span class="line">            <span class="comment">//7.判断是否为小明心中的数字,如果猜中,则跳出循环,不需要再次猜测,游戏结果为 猜中 true</span></span><br><span class="line">            <span class="keyword">if</span>(number == num)&#123;</span><br><span class="line">                <span class="comment">//猜中</span></span><br><span class="line">                flag = <span class="keyword">true</span>;<span class="comment">//重新定义游戏结果</span></span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//结束循环</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//没猜中</span></span><br><span class="line">                System.out.println(<span class="string">"很遗憾,您没有猜中,您还有"</span> + i + <span class="string">"次机会"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断游戏结果,</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="comment">//如果游戏结果为true</span></span><br><span class="line">            System.out.println(<span class="string">"恭喜您猜中了!小明受到惩罚,做100个俯卧撑"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="comment">//如果游戏结果为false</span></span><br><span class="line">            System.out.println(<span class="string">"太惨了,同学受到惩罚,每个人做50个俯卧撑"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 :</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">小明心中的数字 : <span class="number">9</span></span><br><span class="line">请输入小明心中的数字 : <span class="number">3</span></span><br><span class="line">很遗憾,您没有猜中,您还有<span class="number">4</span>次机会</span><br><span class="line">请输入小明心中的数字 : <span class="number">2</span></span><br><span class="line">很遗憾,您没有猜中,您还有<span class="number">3</span>次机会</span><br><span class="line">请输入小明心中的数字 : <span class="number">1</span></span><br><span class="line">很遗憾,您没有猜中,您还有<span class="number">2</span>次机会</span><br><span class="line">请输入小明心中的数字 : <span class="number">8</span></span><br><span class="line">很遗憾,您没有猜中,您还有<span class="number">1</span>次机会</span><br><span class="line">请输入小明心中的数字 : <span class="number">9</span></span><br><span class="line">恭喜您猜中了!小明受到惩罚,做<span class="number">100</span>个俯卧撑</span><br></pre></td></tr></table></figure>

<h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p>continue,故名思意,继续, 准确的意思为 中止当前循环操作,继续下一次循环</p>
<h4 id="例-6-1-10-的奇数和"><a href="#例-6-1-10-的奇数和" class="headerlink" title="例 6 : 1 - 10 的奇数和"></a>例 6 : 1 - 10 的奇数和</h4><p>(不知道之前的while的练习大家有没有做出来?)</p>
<p>代码 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo07</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//定义和</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"sum = "</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 :</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">sum</span> = <span class="number">25</span></span><br></pre></td></tr></table></figure>

<p>分析 :</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191229235239.png" alt="20191229235239.png"></p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191229235248.png" alt="20191229235248.png"></p>
<h1 id="双重循环"><a href="#双重循环" class="headerlink" title="双重循环"></a>双重循环</h1><h3 id="语法结构-3"><a href="#语法结构-3" class="headerlink" title="语法结构"></a>语法结构</h3><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span><span class="comment">()</span>&#123;         for<span class="comment">()</span>&#123;</span><br><span class="line"> <span class="keyword">while</span><span class="comment">()</span>&#123;         for<span class="comment">()</span>&#123;</span><br><span class="line">            </span><br><span class="line"> &#125;           &#125;</span><br><span class="line">&#125;           &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span><span class="comment">()</span>&#123;         for<span class="comment">()</span>&#123;</span><br><span class="line"> for<span class="comment">()</span>&#123;          <span class="keyword">while</span><span class="comment">()</span>&#123;</span><br><span class="line">            </span><br><span class="line"> &#125;           &#125;</span><br><span class="line">&#125;           &#125;</span><br></pre></td></tr></table></figure>

<p><strong>注:结构嵌套时,不管是if嵌套if还是 while嵌套if或者 while嵌套for 等等 注意 结构的完整嵌套 即可.</strong></p>
<h4 id="例-7-打印5-6的矩形"><a href="#例-7-打印5-6的矩形" class="headerlink" title="例 7 : 打印5*6的矩形"></a>例 7 : 打印5*6的矩形</h4><p>代码 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo08</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">6</span>;j++)&#123;</span><br><span class="line">              System.out.print(<span class="string">"*"</span>);<span class="comment">//输出 * 注意不能换行</span></span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(<span class="string">""</span>);<span class="comment">//输出换行</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 :</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">*****<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>****<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>****<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>****<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>****<span class="strong">*</span></span><br></pre></td></tr></table></figure>

<p>分析 :</p>
<ol>
<li>外层for循环 用来控制矩形的行数 <strong>int i = 1;i &lt;=5 5行</strong>..</li>
<li>内层for循环 用来控制矩形的列数 <strong>int j = 1; j &lt;= 6 6列</strong></li>
<li>内层for循环 每输出一列不能换行,内层循环输出完一行后,才换行</li>
<li><strong>总结</strong> : 外层循环执行一次,内层循环全部执行一次.</li>
</ol>
<h4 id="例-8-打印6行的三角形"><a href="#例-8-打印6行的三角形" class="headerlink" title="例 8 : 打印6行的三角形"></a>例 8 : 打印6行的三角形</h4><p>代码 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo09</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">6</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i;j++)&#123;</span><br><span class="line">              System.out.print(<span class="string">"*"</span>);<span class="comment">//输出 * 注意不能换行</span></span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(<span class="string">""</span>);<span class="comment">//输出换行</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 :</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>*<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>**<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>***<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>****<span class="strong">*</span></span><br></pre></td></tr></table></figure>

<p>分析 : 和上例一样,外层循环控制行数,内层循环控制列数.</p>
<h4 id="练习-以下图形"><a href="#练习-以下图形" class="headerlink" title="练习 以下图形 :"></a>练习 以下图形 :</h4><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">*****<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>***<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>**<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>*<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span></span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">     *</span></span><br><span class="line"><span class="code">    ***</span></span><br><span class="line">   <span class="strong">*****</span></span><br><span class="line">  <span class="strong">*****</span>**</span><br><span class="line"> <span class="strong">*****</span><span class="emphasis">***</span>*</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span>*</span><br></pre></td></tr></table></figure>

<h4 id="例-9-99乘法表"><a href="#例-9-99乘法表" class="headerlink" title="例 9 : 99乘法表"></a>例 9 : 99乘法表</h4><p>代码 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo10</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">    System.out.print(j + <span class="string">" * "</span> + i + <span class="string">" = "</span> + i*j + <span class="string">"\t"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   System.out.println();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 输出结果 :</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> * <span class="number">1</span> = <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> * <span class="number">2</span> = <span class="number">2</span> <span class="number">2</span> * <span class="number">2</span> = <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> * <span class="number">3</span> = <span class="number">3</span> <span class="number">2</span> * <span class="number">3</span> = <span class="number">6</span> <span class="number">3</span> * <span class="number">3</span> = <span class="number">9</span> </span><br><span class="line"><span class="number">1</span> * <span class="number">4</span> = <span class="number">4</span> <span class="number">2</span> * <span class="number">4</span> = <span class="number">8</span> <span class="number">3</span> * <span class="number">4</span> = <span class="number">12</span> <span class="number">4</span> * <span class="number">4</span> = <span class="number">16</span> </span><br><span class="line"><span class="number">1</span> * <span class="number">5</span> = <span class="number">5</span> <span class="number">2</span> * <span class="number">5</span> = <span class="number">10</span> <span class="number">3</span> * <span class="number">5</span> = <span class="number">15</span> <span class="number">4</span> * <span class="number">5</span> = <span class="number">20</span> <span class="number">5</span> * <span class="number">5</span> = <span class="number">25</span> </span><br><span class="line"><span class="number">1</span> * <span class="number">6</span> = <span class="number">6</span> <span class="number">2</span> * <span class="number">6</span> = <span class="number">12</span> <span class="number">3</span> * <span class="number">6</span> = <span class="number">18</span> <span class="number">4</span> * <span class="number">6</span> = <span class="number">24</span> <span class="number">5</span> * <span class="number">6</span> = <span class="number">30</span> <span class="number">6</span> * <span class="number">6</span> = <span class="number">36</span> </span><br><span class="line"><span class="number">1</span> * <span class="number">7</span> = <span class="number">7</span> <span class="number">2</span> * <span class="number">7</span> = <span class="number">14</span> <span class="number">3</span> * <span class="number">7</span> = <span class="number">21</span> <span class="number">4</span> * <span class="number">7</span> = <span class="number">28</span> <span class="number">5</span> * <span class="number">7</span> = <span class="number">35</span> <span class="number">6</span> * <span class="number">7</span> = <span class="number">42</span> <span class="number">7</span> * <span class="number">7</span> = <span class="number">49</span> </span><br><span class="line"><span class="number">1</span> * <span class="number">8</span> = <span class="number">8</span> <span class="number">2</span> * <span class="number">8</span> = <span class="number">16</span> <span class="number">3</span> * <span class="number">8</span> = <span class="number">24</span> <span class="number">4</span> * <span class="number">8</span> = <span class="number">32</span> <span class="number">5</span> * <span class="number">8</span> = <span class="number">40</span> <span class="number">6</span> * <span class="number">8</span> = <span class="number">48</span> <span class="number">7</span> * <span class="number">8</span> = <span class="number">56</span> <span class="number">8</span> * <span class="number">8</span> = <span class="number">64</span> </span><br><span class="line"><span class="number">1</span> * <span class="number">9</span> = <span class="number">9</span> <span class="number">2</span> * <span class="number">9</span> = <span class="number">18</span> <span class="number">3</span> * <span class="number">9</span> = <span class="number">27</span> <span class="number">4</span> * <span class="number">9</span> = <span class="number">36</span> <span class="number">5</span> * <span class="number">9</span> = <span class="number">45</span> <span class="number">6</span> * <span class="number">9</span> = <span class="number">54</span> <span class="number">7</span> * <span class="number">9</span> = <span class="number">63</span> <span class="number">8</span> * <span class="number">9</span> = <span class="number">72</span> <span class="number">9</span> * <span class="number">9</span> = <span class="number">81</span></span><br></pre></td></tr></table></figure>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>while循环(<strong>重点,重点,重点</strong>)</li>
<li>do…while循环(掌握)</li>
<li>for循环(<strong>重点,重点,重点</strong>)</li>
<li>break(<strong>重点,重点,重点</strong>),continue</li>
<li>双重循环(<strong>重点,重点,重点,但是使用场景基本不会是让咱们去做什么三角形和矩形和九九乘法表..理解使用</strong>)</li>
</ol>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191230001906.png" alt="20191230001906.png" style="zoom: 67%;" />]]></content>
      <categories>
        <category>后台</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Part4·Java语法结构(一)(图文)</title>
    <url>/06-java.html</url>
    <content><![CDATA[<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191227141614.png" alt="20191227141614.png" style="zoom: 80%;" />

<a id="more"></a>

<h1 id="程序结构设计"><a href="#程序结构设计" class="headerlink" title="程序结构设计"></a>程序结构设计</h1><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191226153157.png" alt="20191226153157.png"></p>
<p>打个比方我们现在要设计一款游戏程序,在游戏中玩家可以控制人物来在程序中有打怪,练级,强化装备等任务,那此时玩家正在执行的任务是强化装备,那在强化装备的时候,该装备是有几率损坏的,也就是说<strong>如果强化成功,则武器星星+1,否则强化失败,武器损坏.</strong>,在游戏中类似的操作有很多,那我们在java程序中如何用语言来描述这一些过程呢?那我们慢慢往下看把.</p>
<p><span style="color:red; font-weight:bolder;">这里重点强调一下,我们编写java程序其实就是使用Java的语言来对实际的例子进行描述而已.关键点就是我们要知道如何去描述!!!</span></p>
<h1 id="选择结构-1-—-if"><a href="#选择结构-1-—-if" class="headerlink" title="选择结构 1 — if"></a>选择结构 1 — if</h1><h2 id="1-if"><a href="#1-if" class="headerlink" title="1. if"></a>1. if</h2><p>if : 如果 的意思. </p>
<h3 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构 :"></a>语法结构 :</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line">    <span class="comment">//代码块,当布尔表达式的结果为true时,才执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="例1-小明正在强化装备-如果装备幸运值大于10-则强化成功"><a href="#例1-小明正在强化装备-如果装备幸运值大于10-则强化成功" class="headerlink" title="例1 : 小明正在强化装备,如果装备幸运值大于10,则强化成功."></a>例1 : 小明正在强化装备,如果装备幸运值大于10,则强化成功.</h4><p>根据题目的描述,我们直接来分析代码怎么写 : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo01</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.我们先用一条输出语句来输出 当前小明正在强化装备</span></span><br><span class="line">        System.out.println(<span class="string">"小明正在强化装备..."</span>);</span><br><span class="line">        <span class="comment">//2.然后声明变量来保存当前装备的幸运值</span></span><br><span class="line">        <span class="keyword">int</span> lucky = <span class="number">30</span>;<span class="comment">//假设当前武器幸运值为30</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        按照分析 : 得出结构</span></span><br><span class="line"><span class="comment">        如果(幸运值 大于 10)&#123;</span></span><br><span class="line"><span class="comment">        	装备强化成功.因为只有当lucky的值大于10时,布尔表达式的结果为true,才会执行此语句.</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>(lucky &gt; <span class="number">10</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"装备强化成功...装备锻造等级+1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"装备强化完成..."</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 : </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">装备强化成功<span class="built_in">..</span><span class="built_in">..</span>装备锻造等级+1</span><br><span class="line">装备强化完成<span class="built_in">..</span>.</span><br></pre></td></tr></table></figure>

<p><strong>但是如果我们修改变量 lucky = 5,</strong></p>
<p>输出结果 : </p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">装备强化完成...</span><br></pre></td></tr></table></figure>

<p><strong>这里也告诉我们,当if语句中的布尔表达式的结果是一个false的话,if结构中的语句不会执行,但是不影响程序继续往下运行…,那如果我们想要输出幸运值如果没有大于10,装备就损坏的语句应该怎么做了?接着往下看…</strong></p>
<h2 id="2-if-…-else"><a href="#2-if-…-else" class="headerlink" title="2. if … else"></a>2. if … else</h2><p>if : 如果. else: 否则</p>
<h3 id="语法结构-1"><a href="#语法结构-1" class="headerlink" title="语法结构 :"></a>语法结构 :</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span><span class="params">(布尔表达式)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 当布尔表达式结果为true时执行此 大括号中的内容</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="comment">// 当布尔表达式结果为false时执行此 大括号中的内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="例2-小明正在强化装备-如果装备幸运值大于10-则强化成功-否则就强化失败"><a href="#例2-小明正在强化装备-如果装备幸运值大于10-则强化成功-否则就强化失败" class="headerlink" title="例2 : 小明正在强化装备,如果装备幸运值大于10,则强化成功,否则就强化失败"></a>例2 : 小明正在强化装备,如果装备幸运值大于10,则强化成功,否则就强化失败</h4><p>直接上代码 : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo02</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.输出 当前小明正在强化装备</span></span><br><span class="line">        System.out.println(<span class="string">"小明正在强化装备..."</span>);</span><br><span class="line">        <span class="comment">//2.声明变量来保存当前装备的幸运值</span></span><br><span class="line">        <span class="keyword">int</span> lucky = <span class="number">30</span>;<span class="comment">//假设当前武器幸运值为30</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        分析结构 : </span></span><br><span class="line"><span class="comment">        如果(幸运值 大于 10)&#123;</span></span><br><span class="line"><span class="comment">          输出强化成功</span></span><br><span class="line"><span class="comment">        &#125;否则&#123;</span></span><br><span class="line"><span class="comment">          输出强化失败</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>(lucky &gt; <span class="number">10</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"装备强化成功...装备锻造等级+1"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"装备强化失败...装备损坏"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"装备强化完成..."</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 : </p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">装备强化成功<span class="string">...</span>装备锻造等级+1</span><br><span class="line">装备强化完成<span class="string">...</span></span><br></pre></td></tr></table></figure>

<p><strong>现在我们修改变量 lucky = 5,</strong></p>
<p>输出结果 : </p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">装备强化失败<span class="string">...</span>装备损坏</span><br><span class="line">装备强化完成<span class="string">...</span></span><br></pre></td></tr></table></figure>

<p><strong>这里可以看出 if … else … 语句可以用来对条件进行双重判断,当条件为true时,执行if大括号中的代码,为false时,执行else大括号中的代码</strong></p>
<h2 id="3-if-…-else-if-…-else"><a href="#3-if-…-else-if-…-else" class="headerlink" title="3. if … else if … else"></a>3. if … else if … else</h2><p>if … else if … else  如果… 否则 如果…. 否则…</p>
<h3 id="语法结构-2"><a href="#语法结构-2" class="headerlink" title="语法结构 :"></a>语法结构 :</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式<span class="number">1</span>)&#123;</span><br><span class="line">	<span class="comment">//布尔表达式1 结果为 true 则执行</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式<span class="number">2</span>)&#123;</span><br><span class="line">	<span class="comment">//布尔表达式2 结果为 true 则执行</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式<span class="number">3</span>)&#123;</span><br><span class="line">	<span class="comment">//布尔表达式3 结果为 true 则执行</span></span><br><span class="line">&#125;</span><br><span class="line">	...</span><br><span class="line">	</span><br><span class="line">[<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="comment">//当所有条件都不满足 则执行</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>

<p><strong>从结构上可以看出 , if else if 结构可以对多个条件进行判断, 比如我们再次修改之前例子</strong></p>
<h4 id="例3-小明正在强化装备-如果装备幸运值大于20-则强化成功-如果幸运值大于10-则强化失败-装备未发生任何改变-否则幸运值在10以下-装备强化失败并损坏"><a href="#例3-小明正在强化装备-如果装备幸运值大于20-则强化成功-如果幸运值大于10-则强化失败-装备未发生任何改变-否则幸运值在10以下-装备强化失败并损坏" class="headerlink" title="例3 : 小明正在强化装备,如果装备幸运值大于20,则强化成功,如果幸运值大于10,则强化失败,装备未发生任何改变,否则幸运值在10以下,装备强化失败并损坏."></a>例3 : 小明正在强化装备,如果装备幸运值大于20,则强化成功,如果幸运值大于10,则强化失败,装备未发生任何改变,否则幸运值在10以下,装备强化失败并损坏.</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo03</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.输出 当前小明正在强化装备</span></span><br><span class="line">        System.out.println(<span class="string">"小明正在强化装备..."</span>);</span><br><span class="line">        <span class="comment">//2.声明变量来保存当前装备的幸运值</span></span><br><span class="line">        <span class="keyword">int</span> lucky = <span class="number">30</span>;<span class="comment">//假设当前武器幸运值为30</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        分析结构 : </span></span><br><span class="line"><span class="comment">        如果(幸运值 大于 20)&#123;</span></span><br><span class="line"><span class="comment">          输出强化成功</span></span><br><span class="line"><span class="comment">        &#125;否则 如果(幸运值 大于 10)&#123;</span></span><br><span class="line"><span class="comment">          输出强化失败,装备未发生改变</span></span><br><span class="line"><span class="comment">        &#125;否则&#123;</span></span><br><span class="line"><span class="comment">          强化失败.</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>(lucky &gt; <span class="number">20</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"装备强化成功...装备锻造等级+1"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(lucky &gt; <span class="number">10</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"装备强化失败...装备未发生改变"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"装备强化失败...装备损坏"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"装备强化完成..."</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 : </p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">装备强化成功<span class="string">...</span>装备锻造等级+1</span><br><span class="line">装备强化完成<span class="string">...</span></span><br></pre></td></tr></table></figure>

<p><strong>如果修改变量lucky = 15</strong></p>
<p>输出结果 : </p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">装备强化失败<span class="string">...</span>装备未发生改变</span><br><span class="line">装备强化完成<span class="string">...</span></span><br></pre></td></tr></table></figure>

<p><strong>如果修改变量lucky = 5</strong></p>
<p>输出结果 : </p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">装备强化失败<span class="string">...</span>装备损坏</span><br><span class="line">装备强化完成<span class="string">...</span></span><br></pre></td></tr></table></figure>

<p><strong>OK ! 从这里我们可以看出,if else if else 可以对多种条件进行判断..在实际操作中,根据当前需求来选择具体使用哪种选择结构,并且注意 if else if else 中的 else 不一定要写哦! 但是一般推荐要写!!!</strong></p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191227150716.png" alt="20191227150716.png" style="zoom:50%;" />

<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/xiapo.gif" alt=""></p>
<h1 id="选择结构-2-—-switch"><a href="#选择结构-2-—-switch" class="headerlink" title="选择结构 2 — switch"></a>选择结构 2 — switch</h1><h2 id="switch-…-case"><a href="#switch-…-case" class="headerlink" title="switch … case"></a>switch … case</h2><p>switch : 开关,选择</p>
<p>switch 语句 和 if 语句 都是 选择结构 , 其实意思都很相似 , 我们来看下 switch 的 语法 : </p>
<h3 id="语法结构-3"><a href="#语法结构-3" class="headerlink" title="语法结构"></a>语法结构</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(数据)&#123;</span><br><span class="line">	<span class="keyword">case</span> 数据<span class="number">1</span> : </span><br><span class="line">	<span class="comment">//当数据 = 数据1时, 则执行</span></span><br><span class="line">	[<span class="keyword">break</span>;]</span><br><span class="line">	<span class="keyword">case</span> 数据<span class="number">2</span> : </span><br><span class="line">	<span class="comment">//当数据 = 数据2时, 则执行</span></span><br><span class="line">	[<span class="keyword">break</span>;]</span><br><span class="line">	...</span><br><span class="line">	[</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">	<span class="comment">//当找不到任何匹配的数据时,则执行</span></span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来个例子理解一下.</p>
<h4 id="例4-分析-小明游戏里干不过RMB玩家-于是选择充值-现在有3种充值方式-输入数字1-使用微信支付-2-支付宝支付-3-使用银行卡支付-如果小明输入其他数字-则支付失败"><a href="#例4-分析-小明游戏里干不过RMB玩家-于是选择充值-现在有3种充值方式-输入数字1-使用微信支付-2-支付宝支付-3-使用银行卡支付-如果小明输入其他数字-则支付失败" class="headerlink" title="例4 分析 : 小明游戏里干不过RMB玩家,于是选择充值,现在有3种充值方式,输入数字1.使用微信支付, 2.支付宝支付, 3.使用银行卡支付. 如果小明输入其他数字,则支付失败."></a>例4 分析 : 小明游戏里干不过RMB玩家,于是选择充值,现在有3种充值方式,输入数字1.使用微信支付, 2.支付宝支付, 3.使用银行卡支付. 如果小明输入其他数字,则支付失败.</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析 :  </span></span><br><span class="line"><span class="comment">	首先要获取小明输入的数字,根据输入的数字来进行选择</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	选择(输入的数字)&#123;</span></span><br><span class="line"><span class="comment">		数字是 1 : </span></span><br><span class="line"><span class="comment">		输出 : 使用微信支付;</span></span><br><span class="line"><span class="comment">		break;</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		数字是 2 : </span></span><br><span class="line"><span class="comment">		输出 : 使用支付宝支付;</span></span><br><span class="line"><span class="comment">		break;</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		数字是 3 : </span></span><br><span class="line"><span class="comment">		输出 : 使用银行卡支付;</span></span><br><span class="line"><span class="comment">		break; </span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		如果没有匹配任何数字 : </span></span><br><span class="line"><span class="comment">		输出 : 没有对应选项;</span></span><br><span class="line"><span class="comment">		break;</span></span><br><span class="line"><span class="comment">	&#125;	</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>上文的分析中,有一个关键字  : 输入 , 我们前文中只学习了输出,那现在我简单的介绍一下如何在控制台中进行字符或者数字的输入.</strong></p>
<h3 id="输入-Scanner"><a href="#输入-Scanner" class="headerlink" title="输入 : Scanner"></a>输入 : Scanner</h3><p>Scanner : 扫描仪. 故名思意,我们把此物就理解为打印机上的扫描机器.当我们在控制台输入数据时,扫描仪帮我们对控制台进行扫描,然后获取我们输入的结果.看图</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191227153513.png" alt="20191227153513.png"></p>
<h4 id="例5-获取用户输入的数据"><a href="#例5-获取用户输入的数据" class="headerlink" title="例5 : 获取用户输入的数据."></a>例5 : 获取用户输入的数据.</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">//2.从Java中导入Scanner</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo04</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">		<span class="comment">//1.创建Scanner 扫描仪 使用Scanner需要先导入Scanner</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.获取用户输入的数据 , 并输出</span></span><br><span class="line">        System.out.println(<span class="string">"请输入用户名 : "</span>);</span><br><span class="line">        String name = scanner.next();<span class="comment">//点击扫描仪中的next按钮获取字符串数据</span></span><br><span class="line">        System.out.println(<span class="string">"用户名 : "</span> + name);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"请输入存款金额 : "</span>);</span><br><span class="line">        <span class="keyword">int</span> money = scanner.nextInt();<span class="comment">//点击扫描仪中的nextInt按钮获取int数据</span></span><br><span class="line">        System.out.println(<span class="string">"存款金额 : "</span> + money);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我用gif图来带大家怎么操作 : </p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/java11.gif" alt=""></p>
<p><strong>学会使用 Scanner 之后,我们再来看怎么完成例4</strong> : </p>
<h4 id="例4-代码"><a href="#例4-代码" class="headerlink" title="例4 代码 :"></a>例4 代码 :</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">//2.从Java中导入Scanner</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo05</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">		<span class="comment">//1.创建Scanner 扫描仪</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.提示小明充值的方式</span></span><br><span class="line">        System.out.println(<span class="string">"选择您的充值方式 : "</span>);</span><br><span class="line">        System.out.println(<span class="string">"1. 微信支付"</span>);</span><br><span class="line">        System.out.println(<span class="string">"2. 支付宝支付"</span>);</span><br><span class="line">        System.out.println(<span class="string">"3. 银行卡支付"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4.得到小明输入的结果,我们这里得到数字</span></span><br><span class="line">        <span class="keyword">int</span> check = scanner.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5.根据小明输入的结果进行选择 </span></span><br><span class="line">        <span class="keyword">switch</span>(check)&#123;</span><br><span class="line">            <span class="comment">//如果 数字 为 1</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="comment">//输出 正在使用微信支付</span></span><br><span class="line">                System.out.println(<span class="string">"正在使用微信支付..."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="comment">//输出 正在使用支付宝支付</span></span><br><span class="line">                System.out.println(<span class="string">"正在使用支付宝支付..."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="comment">//输出 正在使用银行卡支付</span></span><br><span class="line">                System.out.println(<span class="string">"正在使用银行卡支付..."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"没有对应选项...支付失败"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5.程序结束</span></span><br><span class="line">        System.out.println(<span class="string">"程序结束..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 : </p>
<p>当我们再控制台输入 1 : 则输出 微信支付…</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">选择您的充值方式 : </span><br><span class="line"><span class="number">1.</span> 微信支付</span><br><span class="line"><span class="number">2.</span> 支付宝支付</span><br><span class="line"><span class="number">3.</span> 银行卡支付</span><br><span class="line"><span class="number">1</span></span><br><span class="line">正在使用微信支付...</span><br><span class="line">程序结束...</span><br></pre></td></tr></table></figure>

<p>对应的输入 4 : 则输出 输入错误…</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">选择您的充值方式 : </span><br><span class="line"><span class="number">1.</span> 微信支付</span><br><span class="line"><span class="number">2.</span> 支付宝支付</span><br><span class="line"><span class="number">3.</span> 银行卡支付</span><br><span class="line"><span class="number">4</span></span><br><span class="line">没有对应选项...支付失败</span><br><span class="line">程序结束...</span><br></pre></td></tr></table></figure>

<p>从这里也能看出 , 不管输入的结果是什么,也不会影响程序继续向下运行输出 程序结束…</p>
<h3 id="Scanner和Switch注意项"><a href="#Scanner和Switch注意项" class="headerlink" title="Scanner和Switch注意项"></a>Scanner和Switch注意项</h3><h4 id="Scanner-输入时-如果输入的是字母-但是我们用扫描仪去接收数字时-程序就会出现错误-此时我们可以用-if-结构对其进行进一步完善-保证程序的健壮性"><a href="#Scanner-输入时-如果输入的是字母-但是我们用扫描仪去接收数字时-程序就会出现错误-此时我们可以用-if-结构对其进行进一步完善-保证程序的健壮性" class="headerlink" title="Scanner 输入时 如果输入的是字母,但是我们用扫描仪去接收数字时,程序就会出现错误.此时我们可以用 if 结构对其进行进一步完善,保证程序的健壮性"></a>Scanner 输入时 如果输入的是字母,但是我们用扫描仪去接收数字时,程序就会出现错误.此时我们可以用 if 结构对其进行进一步完善,保证程序的<span style="color:red">健壮性</span></h4><p><strong>出错图</strong> : </p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191227161208.png" alt="20191227161208.png"></p>
<p><strong>修改后代码</strong> : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">//2.从Java中导入Scanner</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo05</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">		<span class="comment">//1.创建Scanner 扫描仪</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.提示小明充值的方式</span></span><br><span class="line">        System.out.println(<span class="string">"选择您的充值方式 : "</span>);</span><br><span class="line">        System.out.println(<span class="string">"1. 微信支付"</span>);</span><br><span class="line">        System.out.println(<span class="string">"2. 支付宝支付"</span>);</span><br><span class="line">        System.out.println(<span class="string">"3. 银行卡支付"</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//4.判断小明是否输入的是数字 使用 hasNextInt()来判断,使用已学的if来完善</span></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            <span class="comment">//如果扫描仪中有数字,正常执行</span></span><br><span class="line">            <span class="comment">//5.得到小明输入的结果,我们这里得到数字</span></span><br><span class="line">        	<span class="keyword">int</span> check = scanner.nextInt();</span><br><span class="line">        	<span class="comment">//6.根据小明输入的结果进行选择 </span></span><br><span class="line">        	<span class="keyword">switch</span>(check)&#123;</span><br><span class="line">           	 	<span class="comment">//如果 数字 为 1</span></span><br><span class="line">            	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="comment">//输出 正在使用微信支付</span></span><br><span class="line">                System.out.println(<span class="string">"正在使用微信支付..."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                    </span><br><span class="line">            	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="comment">//输出 正在使用支付宝支付</span></span><br><span class="line">                System.out.println(<span class="string">"正在使用支付宝支付..."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                    </span><br><span class="line">           		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="comment">//输出 正在使用银行卡支付</span></span><br><span class="line">                System.out.println(<span class="string">"正在使用银行卡支付..."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                    </span><br><span class="line">            	<span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"没有对应选项...支付失败"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//否则输出 输入格式有误..支付失败</span></span><br><span class="line">            System.out.println(<span class="string">"输入格式有误...支付失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.程序结束</span></span><br><span class="line">        System.out.println(<span class="string">"程序结束..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>效果图 :</strong><br>当我们输入 字母 a</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">请输入数字 : </span><br><span class="line">a</span><br><span class="line">输入格式有误<span class="string">...</span>支付失败</span><br><span class="line">程序结束<span class="string">...</span></span><br></pre></td></tr></table></figure>
<h4 id="Switch在选择数据时-数据的类型-整型-char-枚举和String-并且要注意是等值的判断-而不是区间性的判断-这也是和if的区别-if可以对一个连续的空间进行判断-而switch只能做等值判断"><a href="#Switch在选择数据时-数据的类型-整型-char-枚举和String-并且要注意是等值的判断-而不是区间性的判断-这也是和if的区别-if可以对一个连续的空间进行判断-而switch只能做等值判断" class="headerlink" title="Switch在选择数据时,数据的类型(整型,char,枚举和String),并且要注意是等值的判断,而不是区间性的判断,这也是和if的区别.if可以对一个连续的空间进行判断,而switch只能做等值判断."></a>Switch在选择数据时,数据的类型(整型,char,枚举和String),并且要注意是等值的判断,而不是区间性的判断,这也是和if的区别.if可以对一个连续的空间进行判断,而switch只能做等值判断.</h4><p>如 : </p>
<p><strong>if(a &gt; 20) else if ( a &gt; 10) else if ( a &gt; 0 ) else  选择的范围为 :</strong></p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191227162712.png" alt="20191227162712.png"> </p>
<p>*<em>switch (numer) case 1 : case 2 : case 3的范围为 : *</em> </p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191227163008.png" alt="20191227163008.png"></p>
<h2 id="switch-…-case-中-break的作用"><a href="#switch-…-case-中-break的作用" class="headerlink" title="switch … case 中 break的作用"></a>switch … case 中 break的作用</h2><p>switch 中 的break关键字 起一个拦截跳出语句的作用, 如果case语句中 没有break,那程序就会继续往下运行,直到碰到break;才会跳出跳出switch语句 . 我们用一个例子来看下.</p>
<h4 id="例-5-看代码-输出对应结果"><a href="#例-5-看代码-输出对应结果" class="headerlink" title="例 5 : 看代码 , 输出对应结果"></a>例 5 : 看代码 , 输出对应结果</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo06</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//选择 a 的值 输出对应结果</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span>(a)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">               System.out.println(<span class="string">"富强"</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">               System.out.println(<span class="string">"民主"</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">               System.out.println(<span class="string">"爱国"</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"程序结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 a = 1 时,输出结果 : </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">富强</span><br><span class="line">民主</span><br><span class="line">程序结束</span><br></pre></td></tr></table></figure>

<p>修改 a = 2 ,输出结果 : </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">民主</span><br><span class="line">程序结束</span><br></pre></td></tr></table></figure>

<p>修改 a = 3 ,输出结果 : </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">爱国</span><br><span class="line">程序结束</span><br></pre></td></tr></table></figure>

<p><strong>从这里我们可以看出, 因为case 1 中没有 break, 所以在执行完 System.out.println()后 会继续 case 2 执行 , 碰到break 结束语句, 输出 程序结束</strong></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>选择结构 : </p>
<ol>
<li><p>if 的使用    (<strong>重点</strong>,<strong>重点</strong>,<strong>重点</strong>)</p>
</li>
<li><p>switch 的使用  (<strong>重点</strong>,<strong>重点</strong>,<strong>重点</strong>)</p>
</li>
</ol>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><strong>练习上面代码即可,并且可以将例1,2,3的幸运值改成输入形式.</strong></p>
<p>下一篇介绍 Java语法中的 <strong>循环结构</strong>…</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191227164448.png" alt="20191227164448.png"></p>
]]></content>
      <categories>
        <category>后台</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Part4.Vue速学(图文)</title>
    <url>/04-vue.html</url>
    <content><![CDATA[<img src="https://cn.vuejs.org/images/logo.png" alt="20191223092306.png" style="zoom: 67%;" />

<a id="more"></a>

<h1 id="v-for-补充"><a href="#v-for-补充" class="headerlink" title="v-for(补充)"></a><b style="color:rgb(65,184,131)">v-for(补充)</b></h1><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><h3 id="1-遍历字符串数组拿到内容"><a href="#1-遍历字符串数组拿到内容" class="headerlink" title="1.遍历字符串数组拿到内容"></a>1.遍历字符串数组拿到内容</h3><p>语法 : v-for=”value in array”  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"name in names"</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">   <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">     names:[<span class="string">'Lily'</span>,<span class="string">'Lucy'</span>,<span class="string">'Tom'</span>,<span class="string">'Jack'</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191226100925.png" alt="20191226100925.png"></p>
<h3 id="2-遍历字符串数组拿到内容并获取对应内容下标"><a href="#2-遍历字符串数组拿到内容并获取对应内容下标" class="headerlink" title="2.遍历字符串数组拿到内容并获取对应内容下标"></a>2.遍历字符串数组拿到内容并获取对应内容下标</h3><p>语法 : v-for=”(value,index) in array”  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(name,index) in names"</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">   el:<span class="string">'#app'</span>,</span></span><br><span class="line">   data:&#123;</span><br><span class="line"><span class="actionscript">    names:[<span class="string">'Lily'</span>,<span class="string">'Lucy'</span>,<span class="string">'Tom'</span>,<span class="string">'Jack'</span>]</span></span><br><span class="line">   &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191226101005.png" alt="20191226101005.png"></p>
<h3 id="3-遍历对象"><a href="#3-遍历对象" class="headerlink" title="3.遍历对象"></a>3.遍历对象</h3><p>语法 : v-for=”(value,key,index) in obj”  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value,key,index) in obj"</span>&gt;</span>&#123;&#123;value&#125;&#125;---&#123;&#123;key&#125;&#125;---&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">   el:<span class="string">'#app'</span>,</span></span><br><span class="line">   data:&#123;</span><br><span class="line">    obj:&#123;</span><br><span class="line"><span class="actionscript">     name:<span class="string">'Lily'</span>,</span></span><br><span class="line">     age:12,</span><br><span class="line"><span class="actionscript">     address:<span class="string">'NewYork'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191226101332.png" alt="20191226101332.png"></p>
<h3 id="4-遍历数字"><a href="#4-遍历数字" class="headerlink" title="4.遍历数字"></a>4.遍历数字</h3><p>语法 : v-for=”n in number”  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"n in number"</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">   el:<span class="string">'#app'</span>,</span></span><br><span class="line">   data:&#123;</span><br><span class="line">    number : 4</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191226101717.png" alt="20191226101717.png"></p>
<h2 id="v-for中-key值的使用"><a href="#v-for中-key值的使用" class="headerlink" title="v-for中 key值的使用"></a>v-for中 key值的使用</h2><p>通常在使用v-for的时候,我们应当在v-for的后面 补充上 key属性 这里要使用 v-bind:key=”绑定的key必须是一个唯一的值,比如对象中的id属性等.”</p>
<p>语法 : v-for = “pro in proList” :key=”pro.id”</p>
<p><strong>注 : 使用key的作用更高效的更新虚拟Dom</strong></p>
<p>解释 : <a href="https://www.jianshu.com/p/4bd5e745ce95" target="_blank" rel="noopener">https://www.jianshu.com/p/4bd5e745ce95</a> , 参考一下别人的文章,看不懂就先放放.使用v-for的时候 记得加就好了(太麻烦了,懒得自己给大家总结了,用用现成的)</p>
<h1 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性 computed"></a><b style="color:rgb(65,184,131)">计算属性 computed</b></h1><h2 id="computed的使用"><a href="#computed的使用" class="headerlink" title="computed的使用"></a>computed的使用</h2><p>在options参数对象中添加computed属性,使用方式和methods一样 , 调用有一定区别</p>
<p>来自官网的一个栗子 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>html显示 : &#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>字符串拼接 : &#123;&#123;firstName + ' ' + lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- methods 的调用后有小括号 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>methods: &#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- computed 的 直接属性名调用即可 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>computed : &#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">   el:<span class="string">'#app'</span>,</span></span><br><span class="line">   data:&#123;</span><br><span class="line"><span class="actionscript">    firstName:<span class="string">'Lebron'</span>,</span></span><br><span class="line"><span class="actionscript">    lastName:<span class="string">'James'</span></span></span><br><span class="line">   &#125;,</span><br><span class="line">   methods:&#123;</span><br><span class="line">    getFullName()&#123;</span><br><span class="line"><span class="actionscript">     <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;,</span><br><span class="line"><span class="actionscript">               <span class="comment">//从这里可以看到 computed 和 methods 简直一模一样</span></span></span><br><span class="line">   computed:&#123;</span><br><span class="line">    fullName()&#123;</span><br><span class="line"><span class="actionscript">     <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图 :</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191226163732.png" alt="20191226163732.png"></p>
<h2 id="computed和methods的区别"><a href="#computed和methods的区别" class="headerlink" title="computed和methods的区别"></a>computed和methods的区别</h2><p>从上个栗子中我们可以看出,methods调用方法名后需要加括号(),computed直接写属性名即可,那还有什么区别呢?</p>
<p><strong>methods 多次调用 函数会触发多次</strong><br><strong>computed 只要值没发生改变,函数只会调用一次.值发生改变后,重新调用并缓存</strong></p>
<h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><p><strong>在上个栗子中调用3次methods和computed</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>methods: &#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>methods: &#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>methods: &#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>computed : &#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>computed : &#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>computed : &#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">   el:<span class="string">'#app'</span>,</span></span><br><span class="line">   data:&#123;</span><br><span class="line"><span class="actionscript">    firstName:<span class="string">'Lebron'</span>,</span></span><br><span class="line"><span class="actionscript">    lastName:<span class="string">'James'</span></span></span><br><span class="line">   &#125;,</span><br><span class="line">   methods:&#123;</span><br><span class="line">    getFullName()&#123;</span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(<span class="string">"methods..run"</span>)</span></span><br><span class="line"><span class="actionscript">     <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;,</span><br><span class="line"><span class="actionscript">               <span class="comment">//从这里可以看到 computed 和 methods 简直一模一样</span></span></span><br><span class="line">   computed:&#123;</span><br><span class="line">    fullName()&#123;</span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(<span class="string">"computed..run"</span>)</span></span><br><span class="line"><span class="actionscript">     <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果 :</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191226164507.png" alt="20191226164507.png"></p>
<p><strong>从此处可以看出 methods 多次调用会触发多次函数,消耗性能.</strong></p>
<h2 id="computed中的getter和setter"><a href="#computed中的getter和setter" class="headerlink" title="computed中的getter和setter"></a>computed中的getter和setter</h2><p>computed 既然叫计算属性,如果熟悉Java的同学对属性这个概念不会陌生,在Java对象中就有成员属性的概念,而成员属性我们一般对其私有化,然后提供公共的getter和setter供外界访问和调用.在上例中如果对计算属性直接赋值,会出现下面这种情况.</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191227094229.png" alt="20191227094229.png"></p>
<p>那这个时候我们就需要给fullName添加setter方法.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fullName : &#123;</span><br><span class="line">    <span class="keyword">get</span>()&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span>(newValue)&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(newValue);<span class="comment">//newValue 为app.fullName = '值' 字符串中的值</span></span><br><span class="line">       <span class="keyword">this</span>.firstName = newValue.split(<span class="string">' '</span>)[<span class="number">0</span>]</span><br><span class="line">       <span class="keyword">this</span>.lastName = newValue.split(<span class="string">' '</span>)[<span class="number">1</span>]</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<p>添加完后重新给computed赋值</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191227094712.png" alt="20191227094712.png"></p>
<p>在代码中,get和set和Java中的非常类似,有木有? <strong>这里还是推荐使用最开始的fullName的写法就好,因为使用到setter情况不多,使用最开始的写法就够用了,因为其本身就提供了getter方法</strong></p>
<h1 id="侦听属性-watch"><a href="#侦听属性-watch" class="headerlink" title="侦听属性 watch"></a><b style="color:rgb(65,184,131)">侦听属性 watch</b></h1><p>在Vue中还有另外一种能够监听和观察Vue实例中数据变化的对象 : <strong>侦听属性 watch</strong>,我们来简单的看下其用法 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">   <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">     firstName:<span class="string">'Lebron'</span>,</span></span><br><span class="line"><span class="actionscript">     lastName:<span class="string">'James'</span>,</span></span><br><span class="line"><span class="actionscript">     fullName:<span class="string">''</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    watch:&#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">//监听到firstName的值发生变化时,接收传入的值,然后修改fullName的值</span></span></span><br><span class="line">     firstName(newValue)&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.fullName = newValue + <span class="keyword">this</span>.lastName</span></span><br><span class="line">     &#125;,</span><br><span class="line"><span class="actionscript">                    <span class="comment">//监听到lastName的值发生变化时,接收传入的值,然后修改fullName的值</span></span></span><br><span class="line">     lastName(newValue)&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + newValue</span></span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对比一下, computed.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算属性</span></span><br><span class="line">computed:&#123;</span><br><span class="line">    fullName()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">//侦听属性</span></span><br><span class="line">   watch:&#123;</span><br><span class="line">    firstName(newValue)&#123;</span><br><span class="line">     <span class="keyword">this</span>.fullName = newValue + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName(newValue)&#123;</span><br><span class="line">     <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + newValue</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>这里我们看一下,使用computed是不是更优雅?那为什么还要使用watch呢?</p>
<p><strong>需要在数据变化时执行异步或开销较大的操作时,建议使用watch.这里要涉及到ajax/axios的使用,我们放到后面几篇讲.</strong> </p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><b style="color:rgb(65,184,131)">总结</b></h1><ol>
<li>v-for key值 (<strong>重点</strong>)</li>
<li>computed计算属性 (<strong>重点</strong>)</li>
<li>watch 侦听属性 (<strong>先了解</strong>)</li>
</ol>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191227100746.png" alt="20191227100746.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Part3.Vue速学(图文)</title>
    <url>/03-vue.html</url>
    <content><![CDATA[<img src="https://cn.vuejs.org/images/logo.png" alt="20191223092306.png" style="zoom: 67%;" />

<a id="more"></a>

<h1 id="Vue常用指令"><a href="#Vue常用指令" class="headerlink" title="Vue常用指令"></a><b style="color:rgb(65,184,131)">Vue常用指令</b></h1><h2 id="v-if-v-else-v-else-if"><a href="#v-if-v-else-v-else-if" class="headerlink" title="v-if,v-else,v-else-if"></a>v-if,v-else,v-else-if</h2><p>v-if这几个指令只要会Java的应该不会太陌生,会js的也应该懂.</p>
<p>代码 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"isLogin"</span>&gt;</span>欢迎您 : &#123;&#123;userName&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>请<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"age &gt; 18"</span>&gt;</span>购买全票<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">"age &gt; 5"</span>&gt;</span>购买半票<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>免票<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">          isLogin: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">          userName: <span class="string">'zhangsan'</span>,</span></span><br><span class="line">          age: 20</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图 :</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/vue2.gif" alt=""></p>
<h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>v-show的效果和v-if很类似</p>
<p>代码 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">"isAgree"</span>&gt;</span>立即注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">     <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">       el: <span class="string">'#app'</span>,</span></span><br><span class="line">       data: &#123;</span><br><span class="line"><span class="actionscript">         isAgree: <span class="literal">true</span> <span class="comment">//是否同意</span></span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图 :</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/vue3.gif" alt=""></p>
<p><strong>可以看出,v-show中值为false的元素会在当前元素上加上style=”display:none”, 即隐藏该元素.而如果是v-if中值为false,则该元素不会<span style="color:red">渲染</span>.</strong></p>
<h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><p>v-for 循环</p>
<p>代码 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"person in persons"</span>&gt;</span>&#123;&#123;person&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">     <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">       el: <span class="string">'#app'</span>,</span></span><br><span class="line">       data: &#123;</span><br><span class="line"><span class="actionscript">         <span class="comment">//定义数组内容</span></span></span><br><span class="line">         persons: [</span><br><span class="line"><span class="actionscript">           <span class="string">'冬泳怪鸽---奥里给'</span>,</span></span><br><span class="line"><span class="actionscript">           <span class="string">'影流之主---劫'</span>,</span></span><br><span class="line"><span class="actionscript">           <span class="string">'吃粑粑---李老八'</span>,</span></span><br><span class="line"><span class="actionscript">           <span class="string">'练习生---kunkun'</span></span></span><br><span class="line">         ]</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图 :</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/vue4.gif" alt=""></p>
<h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><p>用来绑定原生js事件和自定义事件</p>
<p>代码 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123;number&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"number++"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">          number: 0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图 :</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/vue5.gif" alt=""></p>
<p>除了这种写法,还能在v-on:click=”increment”中调用方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"increment"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>调用方法需要在vue 的 options对象中使用methods进行声明 :</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">       el: <span class="string">'#app'</span>,</span><br><span class="line">       data: &#123;</span><br><span class="line">         number: <span class="number">0</span></span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;</span><br><span class="line">         increment() &#123;</span><br><span class="line">           <span class="keyword">this</span>.number++</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="缩写"><a href="#缩写" class="headerlink" title="缩写 :"></a>缩写 :</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><p>给vue中的属性绑定值.</p>
<p>代码 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*定义样式 .one*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-class">.one</span> &#123;</span></span><br><span class="line">        font-style: italic;</span><br><span class="line">        color: red;</span><br><span class="line">        font-weight: bolder;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-bind:src<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imgSrc"</span> <span class="attr">height</span>=<span class="string">"80px"</span> <span class="attr">width</span>=<span class="string">"80px"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-bind:class 对象写法<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;one:true&#125;"</span>&gt;</span>奥里给<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-bind:style 对象写法<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;fontSize:fs,color:fc&#125;"</span>&gt;</span>奥里给<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">          imgSrc: <span class="string">'https://cn.vuejs.org/images/logo.png'</span>,</span></span><br><span class="line"><span class="actionscript">          fs: <span class="string">'24px'</span>,</span></span><br><span class="line"><span class="actionscript">          fc: <span class="string">'green'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图 :</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191224160658.png" alt="20191224160658.png"></p>
<h4 id="缩写-1"><a href="#缩写-1" class="headerlink" title="缩写 :"></a>缩写 :</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">"&#123;one:true&#125;"</span>&gt;</span>奥里给<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">"&#123;fontSize:fs,color:fc&#125;"</span>&gt;</span>奥里给<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p>用来结合表单使用, 负责监听用户的输入事件以更新数据</p>
<p>代码 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"userName"</span>&gt;</span>用户名 :</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"userName"</span> <span class="attr">v-model</span>=<span class="string">"userName"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"psw"</span>&gt;</span>密码 : <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"psw"</span> <span class="attr">v-model</span>=<span class="string">"psw"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pswConfrim"</span>&gt;</span>确认密码 : <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"pswConfrim"</span> <span class="attr">v-model</span>=<span class="string">"pswConfrim"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">v-model</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">v-model</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span>&gt;</span>兴趣爱好 : <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>  <span class="attr">v-model</span>=<span class="string">"hobbies"</span> <span class="attr">value</span>=<span class="string">"sing"</span>&gt;</span>唱</span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>  <span class="attr">v-model</span>=<span class="string">"hobbies"</span> <span class="attr">value</span>=<span class="string">"dance"</span>&gt;</span>跳</span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>  <span class="attr">v-model</span>=<span class="string">"hobbies"</span> <span class="attr">value</span>=<span class="string">"rap"</span>&gt;</span>rap</span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>  <span class="attr">v-model</span>=<span class="string">"hobbies"</span> <span class="attr">value</span>=<span class="string">"basketball"</span>&gt;</span>篮球</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span>&gt;</span>选择城市 : <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"citys"</span> <span class="attr">id</span>=<span class="string">"citys"</span> <span class="attr">v-model</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>长沙<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"isAgree"</span>&gt;</span>是否同意协议<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">"!isAgree"</span>&gt;</span>注 册<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">                您当前的用户名 : &#123;&#123;userName&#125;&#125;,</span><br><span class="line">                您当前的密码 : &#123;&#123;psw&#125;&#125;,</span><br><span class="line">                确认密码:&#123;&#123;pswConfrim&#125;&#125;,</span><br><span class="line">                您当前选择的性别是 :&#123;&#123;gender&#125;&#125;</span><br><span class="line">    您当前选中的兴趣爱好 :&#123;&#123;hobbies&#125;&#125;,</span><br><span class="line">                您当前选中的城市 : &#123;&#123;city&#125;&#125;</span><br><span class="line">                您当前是否同意此协议 : &#123;&#123;isAgree&#125;&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">     userName:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">     psw:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">     pswConfrim:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">     gender:<span class="string">''</span>,</span></span><br><span class="line">     hobbies:[],</span><br><span class="line"><span class="actionscript">     isAgree:<span class="literal">false</span>,</span></span><br><span class="line">     city:0</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图 :</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/vue6.gif" alt=""></p>
<p><strong>注意 : v-model绑定单个checkbox 是绑定到一个布尔值中, 比如上例中的 是否同意协议, 绑定多个checkbox是 绑定到一个数组中 , 比如上例中的 兴趣爱好</strong></p>
<h2 id="v-on中的修饰符"><a href="#v-on中的修饰符" class="headerlink" title="v-on中的修饰符"></a>v-on中的修饰符</h2><h3 id="prevent-stop-once-等"><a href="#prevent-stop-once-等" class="headerlink" title=".prevent .stop .once 等"></a>.prevent .stop .once 等</h3><h4 id="prevent"><a href="#prevent" class="headerlink" title=".prevent"></a>.prevent</h4><p>阻止事件的默认行为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">v-on:click.prevent = "testPrevent"</span><br></pre></td></tr></table></figure>

<h5 id="例-没有使用prevent"><a href="#例-没有使用prevent" class="headerlink" title="例 :  没有使用prevent"></a>例 :  没有使用prevent</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 给超链接Baidu绑定一个点击事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">v-on:click</span>=<span class="string">"go2Baidu"</span>&gt;</span>BaiDu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line">          go2Baidu() &#123;</span><br><span class="line"><span class="actionscript">            alert(<span class="string">'是否离开当前页面?'</span>)</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/vue7.gif" alt=""></p>
<h5 id="使用了prevent后"><a href="#使用了prevent后" class="headerlink" title="使用了prevent后"></a>使用了prevent后</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">v-on:click.prevent</span>=<span class="string">"go2Baidu"</span>&gt;</span>BaiDu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/vue8.gif" alt=""></p>
<h4 id="stop"><a href="#stop" class="headerlink" title=".stop"></a>.stop</h4><p>停止事件冒泡</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">v-on:click.stop = "testStop"</span><br></pre></td></tr></table></figure>

<h5 id="例-没有使用stop"><a href="#例-没有使用stop" class="headerlink" title="例 : 没有使用stop"></a>例 : 没有使用stop</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 监听在高宽为100的div中的鼠标移动事件,并更新div内部span中的x,y坐标 这里 $event 是event事件参数对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-on:mousemove</span>=<span class="string">"showXY($event)"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"height: 100px; width: 100px; border: 1px solid red;text-align: center; line-height: 100px;"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>x : &#123;&#123;x&#125;&#125; , y : &#123;&#123;y&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">          x: 0,</span><br><span class="line">          y: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          showXY(event) &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.x = event.offsetX</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.y = event.offsetY</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/vue9.gif" alt=""></p>
<h5 id="加上stop"><a href="#加上stop" class="headerlink" title="加上stop"></a>加上stop</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在span标签内部 事件停止冒泡 阻止触发mousemove事件向外层div传播--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-on:mousemove.stop</span>&gt;</span>x : &#123;&#123;x&#125;&#125; , y : &#123;&#123;y&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/vue10.gif" alt=""></p>
<h4 id="once"><a href="#once" class="headerlink" title=".once"></a>.once</h4><p>事件只触发一次</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">v-on:click.once = "testOnce"</span><br></pre></td></tr></table></figure>

<h5 id="例-添加once的效果"><a href="#例-添加once的效果" class="headerlink" title="例 : 添加once的效果"></a>例 : 添加once的效果</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 给按钮添加点击事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      &#123;&#123;number&#125;&#125; <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">"number++"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/vue11.gif" alt=""></p>
<h2 id="v-model中的修饰符"><a href="#v-model中的修饰符" class="headerlink" title="v-model中的修饰符"></a>v-model中的修饰符</h2><h3 id="trim-lazy-number"><a href="#trim-lazy-number" class="headerlink" title=".trim, .lazy .number"></a>.trim, .lazy .number</h3><ol>
<li>trim  去除字符串俩端空格</li>
<li>lazy  延迟输入,如果在model后添加lazy则只有当输入框失去焦点或者用户敲下回车的时候,数据才会更新</li>
<li>number 将数据转换成 number 类型</li>
</ol>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191224165849.png" alt="20191224165849.png" style="zoom:67%;" />
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Part2.Vue速学(图文)</title>
    <url>/02-vue.html</url>
    <content><![CDATA[<img src="https://cn.vuejs.org/images/logo.png" alt="20191223092306.png" style="zoom: 67%;" />

<a id="more"></a>

<p><b style="color:red">——学习 Vue 之前需要大家对 HTML,CSS 和 JS 有所掌握——</b><br><b style="color:red">——下面这点东西不想看就略过——</b></p>
<h1 id="What-is-the-Fu-ing-Vue"><a href="#What-is-the-Fu-ing-Vue" class="headerlink" title="What is the Fu***ing Vue?"></a><b style="color:rgb(65,184,131)">What is the Fu***ing Vue?</b></h1><h3 id="来自官网的介绍"><a href="#来自官网的介绍" class="headerlink" title="来自官网的介绍"></a>来自官网的介绍</h3><p><strong>Vue</strong> (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>
<h1 id="Why-do-we-need-to-use-Vue"><a href="#Why-do-we-need-to-use-Vue" class="headerlink" title="Why do we need to use Vue?"></a><b style="color:rgb(65,184,131)">Why do we need to use Vue?</b></h1><h3 id="同样来自官网的介绍和我的理解"><a href="#同样来自官网的介绍和我的理解" class="headerlink" title="同样来自官网的介绍和我的理解"></a>同样来自官网的介绍和我的理解</h3><ol>
<li><p><strong>体积小</strong> : 压缩后的体积仅为 33k</p>
</li>
<li><p><strong>更高的运行效率</strong> : 基于虚拟 dom,一种可以预先通过 JavaScript 进行各种计算,把最终的 DOM 操作计算出来并优化的技术,由于这个 DOM 操作属于预处理操作,并没有真实的操作 DOM,所以叫做虚拟 DOM .</p>
</li>
<li><p><strong>双向数据绑定</strong> : 让开发者不用再去操作 DOM 对象,把更多的精力投入到业务逻辑的处理上</p>
</li>
<li><p><strong>生态丰富,学习成本低</strong> : 市场上有大量成熟,稳定的基于 Vue.js 的 ui 框架,常用组件 比如 element-ui 等拿来就能实现快速开发,对初学者比较友好,入门简单,学习资料也多.</p>
</li>
<li><p><strong>各大小厂都要求需要至少掌握一种现在前沿的前端技,如 Vue,React 等</strong></p>
</li>
</ol>
<p><b style="color:red">——下面这点东西还是需要看一下——</b></p>
<h1 id="2-个核心"><a href="#2-个核心" class="headerlink" title="2 个核心"></a><b style="color:rgb(65,184,131)">2 个核心</b></h1><ol>
<li><strong>数据绑定</strong> : 数据改变驱动了视图的自动更新，传统的做法你得手动改变 DOM 来改变视图，Vue.js 只需要改变数据，就会自动改变视图，一个字：爽。再也不用你去操心 DOM 的更新了，这就是 MVVM 思想的实现。</li>
<li><strong>视图组件</strong> : 把整一个网页的拆分成一个个区块，每个区块我们可以看作成一个组件。网页由多个组件拼接或者嵌套组成。</li>
</ol>
<p><b style="color:red">——这里开始就是重点拉!!——</b></p>
<h1 id="How-do-we-use-the-Vue"><a href="#How-do-we-use-the-Vue" class="headerlink" title="How do we use the Vue?"></a><b style="color:rgb(65,184,131)">How do we use the Vue?</b></h1><h3 id="Vue-安装"><a href="#Vue-安装" class="headerlink" title="Vue 安装"></a>Vue 安装</h3><ol>
<li><strong>使用 cdn 引入 vue 所需要的 js 文件</strong><br>官网提供了 CDN :</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p><strong>直接在项目中引入 js 本地文件</strong></p>
<p>进入官网 : <a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/installation.html</a><br><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191224113959.png" alt="20191224113959.png"><br>点击图片中的按钮 下载对应版本,然后拖放到项目中使用 script 标签引用即可</p>
</li>
<li><p><strong>通过 vue-cli 脚手架工具创建 vue 项目</strong></p>
</li>
</ol>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">npm install vue // 这就要使用到我们之前的<span class="keyword">node</span><span class="title">中的npm</span>来进行安装了,安装步骤到后面详解.</span><br></pre></td></tr></table></figure>

<h3 id="Vue-使用步骤"><a href="#Vue-使用步骤" class="headerlink" title="Vue 使用步骤"></a>Vue 使用步骤</h3><ol>
<li>使用 VSCode 创建文件夹,文件夹中创建 index.html</li>
<li>引入 Vue.js 文件</li>
<li>在 body 中添加 div 标签,并加上 id 属性</li>
<li>在 div 标签中插入</li>
<li>在 div 标签下创建 script 标签并创建 Vue 对象并传入一个 options 对象参数</li>
<li>配置 options 对象属性,如 el,data.</li>
</ol>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/vue1.gif" alt=""></p>
<p><strong>代码如下</strong> : </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.引入Vue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.创建Div标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 3.插入message --&gt;</span></span><br><span class="line">      &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">​    <span class="comment">&lt;!-- 4.script 创建Vue对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>, <span class="comment">//选中id为app的元素</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">          message: <span class="string">'Hello World!'</span> <span class="comment">//设置message变量的值为 Hello World!</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>创建Vue传入的options对象参数中不仅有el和data属性,在接下来的课程中我们会慢慢学到.</p>
<ol>
<li><p>el : element,选中html中哪一个div块为vue实例</p>
</li>
<li><p>data : 数据,vue实例中使用到的变量需要先在data中定义.</p>
</li>
<li><p>可以使用app来接收vue实例对象,可以在浏览器的console中对app实例下的数据进行修改</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">        message:<span class="string">'Hello World!'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>   <img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/v1.png" alt=""></p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/v2.png" alt=""></p>
<h1 id="Vue-插值语法"><a href="#Vue-插值语法" class="headerlink" title="Vue 插值语法"></a><b style="color:rgb(65,184,131)">Vue 插值语法</b></h1><h2 id="mustache-插值语法"><a href="#mustache-插值语法" class="headerlink" title="mustache 插值语法"></a>mustache 插值语法</h2><p>在 html 中使用,语法结构位 { { } } 俩个大括号 里层大括号中可以写表达式和变量等.</p>
<p>…</p>
<p>…</p>
<p>好了这一章内容就到这,我们下一张快速的将 Vue 中比较常用的指令练习一遍.下一章篇幅有点长,大家做好心理准备…</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191224144948.png" alt="20191224144948.png"></p>
<p>```</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Part3·Java转义符&amp;运算符(图文)</title>
    <url>/05-java.html</url>
    <content><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191224084248.png" alt="20191224084248.png"></p>
<a id="more"></a>

<h1 id="Section-1-前文回顾-amp-转义符"><a href="#Section-1-前文回顾-amp-转义符" class="headerlink" title="Section.1  前文回顾&amp;转义符"></a>Section.1  前文回顾&amp;转义符</h1><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>在上一篇课程中,我们重点介绍了Java中的变量和各种数据类型,我们再用一个小练习来进行简单的回顾.</p>
<h5 id="练习-1"><a href="#练习-1" class="headerlink" title="练习 1"></a>练习 1</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">声明变量保存以下信息</span></span><br><span class="line"><span class="comment">品种(brand) : 哈士奇 String</span></span><br><span class="line"><span class="comment">昵称(nickName) : 旺财 String</span></span><br><span class="line"><span class="comment">年龄(age) : 16 int</span></span><br><span class="line"><span class="comment">性别(gender) : 公 char</span></span><br><span class="line"><span class="comment">是否绝育(isSterilized) : true boolean</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出对应信息 :</span></span><br><span class="line"><span class="comment"> ...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableDemo03</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.声明变量 并赋值</span></span><br><span class="line">        String brand = <span class="string">"哈士奇"</span>;</span><br><span class="line">        String nickName = <span class="string">"旺财"</span>;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">char</span> gender = <span class="string">'公'</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isSterilized = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//2.输出信息到控制台</span></span><br><span class="line">        System.out.println(<span class="string">"品种 : "</span> + brand);</span><br><span class="line">        System.out.println(<span class="string">"昵称 : "</span> + nickName);</span><br><span class="line">        System.out.println(<span class="string">"年龄 : "</span> + age);</span><br><span class="line">        System.out.println(<span class="string">"性别 : "</span> + gender);</span><br><span class="line">        System.out.println(<span class="string">"是否绝育 : "</span> + isSterilized);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注 : 在这里我 “System.out.println()” 做一个补充.</strong></p>
<ol>
<li>System.out.<strong>println</strong>(); 的作用是向控制台上输出完一行信息并换行,也就是说每当输出完小括号中的内容将会执行一个回车换行的操作.</li>
<li>System.out.<strong>print</strong>();的作用同上,但是区别是输出完信息后不会另起一行</li>
<li>如果想用System.out.<strong>print</strong>();同样达到换行的效果,我们可以在小括号中加上转义字符 “\n”.</li>
</ol>
<h5 id="例-1"><a href="#例-1" class="headerlink" title="例 1"></a>例 1</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> TestDemo01&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.</span></span><br><span class="line">        System.out.print(<span class="string">"今天天气不错"</span>);</span><br><span class="line">        System.out.print(<span class="string">",我们去唱,跳,rap,篮球吧!"</span>);</span><br><span class="line">        <span class="comment">//2.</span></span><br><span class="line">        System.out.print(<span class="string">"今天天气不错\n"</span>);</span><br><span class="line">        System.out.print(<span class="string">",我们去唱,跳,rap,篮球吧!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 :</p>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">今天天气不错,我们去唱,跳,rap,篮球吧!今天天气不错</span><br><span class="line">,我们去唱,跳,rap,篮球吧!</span><br></pre></td></tr></table></figure>

<p>可以看出 第一个,第二个第三个print都处于一行,因为第一个和第二个print输出后没有另起一行,第三个print字符串末尾加上了\n所以就会开始另起一行开始输出.同学们自己使用<strong>println</strong>再来试一次吧!</p>
<h3 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h3><p>转义符 : 反斜杠 <b style="color:red">\</b> .</p>
<p>作用 : 用来在字符串中改变字符或者符号本身的含义 . 比如我们想要在控制台输出</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>

<p>按照之前的思路是不是得这么写呢?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"> System.out.println(<span class="string">""</span>Hello World<span class="string">""</span>); <span class="comment">// 程序报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为在Java中 一对双引号就代表一个字符串,那第一对双引号即为一个字符串,然后中间 Hello World ,后面还有一对双引号,这种写法在Java中是不允许的.所以我们需要转义符来对包裹Hello World的双引号转义,将其转义成普通的双引号,不代表字符串.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"> System.out.println(<span class="string">"\"Hello World\""</span>); <span class="comment">// 程序正确</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java 中有很多有特殊意义的转义符, 比如 之前提到的 “\n” 换行 , “\r” 回车, “\t”  横向制表(HT) (跳到下一个TAB位置)  等..</p>
<h1 id="Section-2-运算符"><a href="#Section-2-运算符" class="headerlink" title="Section.2  运算符"></a>Section.2  运算符</h1><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>表达式的概念其实应该在初中数学或者小学数学中我们已经接触过了,比如俩数之和 <strong>x + y</strong>   , 圆面积表达式  <strong>Π <em>r</em> r</strong> , 这些都是一些比较简单的表达式, 稍微复杂一点的 如 : (a + b) * (x + y)  等等, 通过不同的<strong>运算符</strong>将表达式组合在一起得到不同类型的结果, 比如整型,浮点型,布尔型(<strong>真or假</strong>)的结果等.那下面我们来看下Java中有哪些运算符?</p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ol>
<li>算术运算符</li>
<li>赋值运算符</li>
<li>关系运算符</li>
<li>逻辑运算符</li>
<li>三目/三元运算符</li>
</ol>
<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>算术运算符一般用于做数值运算,比如 加,减,乘,除,取余,自增或者自减的操作</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">作用</th>
<th align="center">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">加</td>
<td align="center">2 + 4</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">减</td>
<td align="center">2 - 4</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘</td>
<td align="center">2 * 4</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">除</td>
<td align="center">4 / 2 结果为 :  2</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取余</td>
<td align="center">5 % 2 结果为 : 1 <br>2 % 5 结果为 : 2</td>
</tr>
<tr>
<td align="center">++</td>
<td align="center">自增 , 在变量自身的基础上 + 1</td>
<td align="center">a++,++a 等同于 a = a + 1</td>
</tr>
<tr>
<td align="center">–</td>
<td align="center">自减 , 在变量自身的基础上 - 1</td>
<td align="center">a–,–a  等同于 a = a - 1</td>
</tr>
</tbody></table>
<h5 id="例-2"><a href="#例-2" class="headerlink" title="例 2"></a>例 2</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo02</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="number">2</span> + <span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="number">2</span> - <span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="number">2</span> * <span class="number">4</span>);</span><br><span class="line">        <span class="comment">//除法 注意数据类型</span></span><br><span class="line">        System.out.println(<span class="number">2</span> / <span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="number">5</span> / <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="number">5.0</span> / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//取余</span></span><br><span class="line">        System.out.println(<span class="number">2</span> % <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="number">5</span> % <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 :</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加减乘</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">-2</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="comment">//除法(整数跟整数运算 得到的结果也是整数,5 / 2 得到 2.5取整即为2 , 5.0为浮点型小数与整数的运算在后面讲)</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2.5</span></span><br><span class="line"><span class="comment">//取余(如果左边的数比运算符右边的数要小,余数取左边的数)</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="自增-amp-自减的执行顺序"><a href="#自增-amp-自减的执行顺序" class="headerlink" title="自增&amp;自减的执行顺序"></a>自增&amp;自减的执行顺序</h4><p>自增或者自减都是单目运算符,只需要一个操作数就可以进行运算,通常配合变量一起使用,如对变量a做自增或者自减的操作 : <strong>a++</strong>, <strong>a–</strong> ,<strong>++a</strong>, <strong>–a</strong></p>
<p><strong>a++,a–</strong> :  如果运算符在后边,则为先执行代码,再运算 ,我们通常称之为 后加加,后减减</p>
<p><strong>++a,–a</strong> : 如果运算符在前边,则为先运算,再执行代码, 我们通常称之为 前加加,前减减</p>
<h5 id="例-3"><a href="#例-3" class="headerlink" title="例 3"></a>例 3</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo03</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        System.out.println(++a);</span><br><span class="line">        System.out.println(a++);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 :</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>分析 :</p>
<p>第一个 System.out.println(++a);  因为运算符在前边,所以<b style="color:red">先运算</b><strong>自增1</strong>,然后执行代码输出 <strong>2</strong></p>
<p>第二个 System.out.println(a++); 运算符在后边,所以<b style="color:red">先执行代码</b>输出 <strong>2</strong>, 然后自增1, 自增后a中的值为 <strong>3</strong></p>
<p>第三个 System.out.println(a); 没有运算符,直接输出a变量中的值 3</p>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值运算符,将运算符右边的值赋值给左边, 如 a = a + 1, 将变量 a 的值 + 1 再 重新赋值给 a .</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">作用</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">=</td>
<td align="center">将右边的值直接赋值给左边</td>
<td>a = 33</td>
</tr>
<tr>
<td align="center">+=</td>
<td align="center">将右边的值与左边的变量的值相加后再赋值给左边</td>
<td>a += 33 等同于 a = a + 33</td>
</tr>
<tr>
<td align="center">-=</td>
<td align="center">将右边的值与左边的变量的值相减后再赋值给左边</td>
<td>a -= 33 等同于 a = a - 33</td>
</tr>
<tr>
<td align="center">*=</td>
<td align="center">将右边的值与左边的变量的值相乘后再赋值给左边</td>
<td>a <em>= 33 等同于 a = a</em> 33</td>
</tr>
<tr>
<td align="center">/=</td>
<td align="center">将右边的值与左边的变量的值相除后再赋值给左边</td>
<td>a /= 33 等同于 a = a / 33</td>
</tr>
<tr>
<td align="center">%=</td>
<td align="center">将右边的值与左边的变量的值取余后再赋值给左边</td>
<td>a %= 33 等同于 a = a % 33</td>
</tr>
</tbody></table>
<h3 id="关系-比较运算符"><a href="#关系-比较运算符" class="headerlink" title="关系/比较运算符"></a>关系/比较运算符</h3><p>将俩个表达式使用比较运算符来操作得到比较结果,结果为布尔类型,true或者false</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">作用</th>
<th align="center">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&gt;</td>
<td align="center">大于</td>
<td align="center">假设int  a = 30 , b = 20;<br> a &gt; b (结果为 : <strong>true</strong>)</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td align="center">大于或者等于</td>
<td align="center">a &gt;= b (结果为 : <strong>true</strong>)</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于</td>
<td align="center">a &lt; b (结果为 : <strong>false</strong>)</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td align="center">小于或者等于</td>
<td align="center">a &lt;= b (结果为 : <strong>false</strong>)</td>
</tr>
<tr>
<td align="center">==</td>
<td align="center">等等于,检测运算符俩边表达式的值是否相等</td>
<td align="center">a == b (结果为 : <strong>false</strong>)</td>
</tr>
<tr>
<td align="center">!=</td>
<td align="center">不等于</td>
<td align="center">a != b (结果为 : <strong>true</strong>)</td>
</tr>
</tbody></table>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>用来连接俩个关系表达式或者布尔类型的值,得到对应的布尔类型结果.</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">作用</th>
<th align="center">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;&amp;</td>
<td align="center">与操作符 (and)</td>
<td align="center">true &amp;&amp; false 结果为 false <br>与操作符俩边为true结果才为true,否则为false</td>
</tr>
<tr>
<td align="center">||</td>
<td align="center">或操作符(or)</td>
<td align="center">true || false 结果为 true<br/>或操作符俩边为false结果才为false,否则为true</td>
</tr>
<tr>
<td align="center">!</td>
<td align="center">非(not),单目运算符</td>
<td align="center">!true 结果为 false <br/>与当前值取反</td>
</tr>
</tbody></table>
<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>没什么好解释的看下面.</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">说明</th>
<th align="center">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">表达式 ? 值1 : 值2</td>
<td align="center">表达式的结果通常为boolean类型,<br/>可以使用比较运算符运算符或者逻辑运算符连接,<br>如果表达式的结果为真(true),则得到值1,<br/>如果表达式的结果为假(false),则得到值2</td>
<td align="center">假设 a = 10,<br>a &gt; 5 ? “大于”:”小于” <br>得到结果 : 大于</td>
</tr>
</tbody></table>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>位运算符是可以直接进行二进制数据的计算处理</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">说明</th>
<th align="center">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;</td>
<td align="center">与运算</td>
<td align="center">4 &amp; 5 = 4</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">或运算</td>
<td align="center">4 | 5 =5</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">异或运算</td>
<td align="center">4 ^ 5 = 1</td>
</tr>
<tr>
<td align="center">~</td>
<td align="center">取反,反码运算</td>
<td align="center">~ 4 = -5</td>
</tr>
<tr>
<td align="center">&gt;&gt;</td>
<td align="center">二进制位右移运算</td>
<td align="center">8 &gt;&gt; 1 = 4</td>
</tr>
<tr>
<td align="center">&lt;&lt;</td>
<td align="center">二进制位左移运算</td>
<td align="center">2 &lt;&lt; 3 = 16</td>
</tr>
</tbody></table>
<h4 id="amp-与运算"><a href="#amp-与运算" class="headerlink" title="&amp; : 与运算"></a>&amp; : 与运算</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191224141725.png" alt="20191224141725.png"></p>
<p>结论 : 做与运算的时候,参与运算的数字,低位对齐，高位不足的补零,当二进制位都为1则结果为1,否则为0.</p>
<h4 id="或运算"><a href="#或运算" class="headerlink" title="| : 或运算"></a>| : 或运算</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191227093632.png" alt="20191227093632.png"></p>
<p>结论 : 做与运算的时候,参与运算的数字,低位对齐，高位不足的补零,当二进制位都为0则结果为0,否则为1.</p>
<p><b style="color:red">总结 : 这里想一下是不是和逻辑运算符 &amp;&amp; 很类似呢? 我们把1看成true,0看成false即可</b></p>
<h4 id="异或运算"><a href="#异或运算" class="headerlink" title="^ : 异或运算"></a>^ : 异或运算</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191224141545.png" alt="20191224141545.png"></p>
<p>结论 : 做与运算的时候,参与运算的数字,低位对齐，高位不足的补零,当二进制位都相同结果为0,不相同为1.</p>
<h4 id="取反"><a href="#取反" class="headerlink" title="~ : 取反"></a>~ : 取反</h4><p>不做演示了,就是将二进制位的0变成1,1变成0</p>
<h4 id="gt-gt-和-lt-lt-左移-amp-右移"><a href="#gt-gt-和-lt-lt-左移-amp-右移" class="headerlink" title="&gt;&gt;和&lt;&lt; : 左移&amp;右移"></a>&gt;&gt;和&lt;&lt; : 左移&amp;右移</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191224142536.png" alt="20191224142536.png"></p>
<p>结论 : 将左边3位0舍弃, 再末尾添加3位.</p>
<h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><p>简单来说 :  <strong>算术运算符优先级较高，关系和逻辑运算符优先级较低,有括号先算括号内部的,如果算术运算中包含单目运算符,则单目优先级比算术运算符高. 并不要求去记忆运算符的优先级,理解为主.</strong></p>
<h1 id="Section-3-字面量"><a href="#Section-3-字面量" class="headerlink" title="Section.3  字面量"></a>Section.3  字面量</h1><p>字面量是指在程序中通过源代码直接给出的值 , 如 int a = 1; String name = “zhangsan”; 此处  1 和 “zhangsan”则分别为 整数字面量和字符串字面量.</p>
<p>不同类型的字面量赋值 :</p>
<p><strong>int 类型</strong> :   整数字面量, 可以为 二进制 ( 0b0011 ),八进制( 020 ),十进制( 12 ),十六进制 (0x12a).</p>
<p><strong>long类型</strong> : 长整型字面量,在赋值时,需要在整型后加上l或者L , 如 : 18L , 18l</p>
<p><strong>float类型</strong> : 单精度浮点型 , 需要在小数后加上f 或者 F , 如 : 1.8f ,1.8F</p>
<p><strong>double类型</strong> : 双精度浮点型, 直接赋值小数即可, 如 : 3.4</p>
<p><strong>boolean类型</strong> : 布尔类型,只有 true 和 false 俩个字面量</p>
<p><strong>String类型</strong> : 双引号标识的就是字符串字面量</p>
<p><strong>char类型</strong> : 用单引号括起来的字符、转义字符和 Unicode 值表示的字符。例如 ‘a’，‘\n’ 和 ‘\u0036’ 都代表char类型字面量</p>
<h1 id="Section-4-总结"><a href="#Section-4-总结" class="headerlink" title="Section.4 总结"></a>Section.4 总结</h1><p>1.转义符 (掌握)</p>
<p>2.<b style="color:red">运算符</b>(<strong>重点</strong>)</p>
<p>3.字面量(掌握)</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191224105532.png" alt="20191224105532.png" style="zoom:67%;" />
]]></content>
      <categories>
        <category>后台</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1.Vue环境搭建(图文)</title>
    <url>/01-vue.html</url>
    <content><![CDATA[<img src="https://cn.vuejs.org/images/logo.png" alt="20191223092306.png" style="zoom: 67%;" />

<a id="more"></a>

<h1 id="Vue环境搭建"><a href="#Vue环境搭建" class="headerlink" title="Vue环境搭建"></a>Vue环境搭建</h1><p>废话不多说,vue环境的搭建其实不是很难,我们来看一下我们要准备一些什么东西?</p>
<ol>
<li><p>git</p>
<ul>
<li><p>下载地址 :  <a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a>  直接点击右边的download下载.</p>
</li>
<li><p>安装步骤 :  没有什么太多要求的话,傻瓜式下一步安装即可.</p>
</li>
<li><p>如果在github中注册过,就在桌面右键 选择git bash 输入命令</p>
</li>
</ul>
</li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name lee #将用户名设为lee</span><br><span class="line">git<span class="built_in"> config </span>--global user.email lee@163.com #将用户邮箱设为163邮箱</span><br><span class="line"></span><br><span class="line">输入完后继续输入,查看配置的用户名和邮箱</span><br><span class="line">git<span class="built_in"> config </span>user.name</span><br><span class="line">git<span class="built_in"> config </span>user.email</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>node</p>
<ul>
<li><p>下载地址 :  <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a>  点击download 下载.</p>
</li>
<li><p>安装步骤 : 同上,傻瓜式下一步安装</p>
</li>
<li><p>安装完毕后 , 打开cmd 输入命令</p>
</li>
</ul>
</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">node - v <span class="comment">// 输出版本信息无误</span></span><br><span class="line">npm - v <span class="comment">// 输出版本信息无误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里最好将npm的镜像换成淘宝镜像cnpm</span></span><br><span class="line">npm install -g cnpm --registry=<span class="string">https:</span><span class="comment">//registry.npm.taobao.org</span></span><br><span class="line">cnpm -v <span class="comment">//查看版本信息</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>VScode</p>
<ul>
<li><p>下载地址 :  <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a>  点击 download 下载.</p>
</li>
<li><p>安装步骤 : 傻瓜式 下一步安装</p>
</li>
<li><p>插件安装 : <img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191223095210.png" alt="20191223095210.png"></p>
</li>
<li><p>推荐插件 :</p>
<ol>
<li><strong>Chinese (Simplified) Language…</strong> 中文简体,如果英语够好,使用英文版即可</li>
<li><strong>Prettier</strong>  代码格式化工具</li>
<li><strong>ESLint</strong>和<strong>TSLint</strong> 用来统一JavaScript 和 TypeScript的风格,当前项目用Js则装ESlint,Ts用TSLint</li>
<li><strong>EditorConfig</strong>  VSCode的扩展插件   在当前项目根目录下添加<code>.editorconfig</code>文件,普通项目练习不用配置也可以,用Prettier足够 , 这个的作用是为项目统一编辑器的实时格式。</li>
<li><strong>Bootstrap 3 Snippets</strong> 或者 <strong>4 Snippets</strong> 如果项目中使用了 Bootstrap 可以用来出现模板代码</li>
<li><strong>Vetur,Vue 2Snippets,Vue VSCode Snippets</strong>  Vue语法提示等作用.</li>
</ol>
</li>
<li><p>插件配置 :  点击左上角 <strong>文件</strong> –&gt; <strong>首选项</strong> –&gt; <strong>设置</strong> –&gt; <strong>右上角第一个图标,打开json</strong></p>
</li>
</ul>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"editor.renderIndentGuides"</span>: <span class="literal">false</span>, <span class="comment">//控制编辑器是否显示缩进参考线。</span></span><br><span class="line">  <span class="attr">"editor.fontSize"</span>: <span class="number">26</span>, <span class="comment">//以像素为单位控制字体大小。</span></span><br><span class="line">  <span class="attr">"files.autoSave"</span>: <span class="string">"afterDelay"</span>, <span class="comment">//自动保存</span></span><br><span class="line">  <span class="attr">"editor.lineNumbers"</span>: <span class="string">"on"</span>, <span class="comment">//打开行号</span></span><br><span class="line">  <span class="attr">"editor.quickSuggestions"</span>: &#123;</span><br><span class="line">    <span class="comment">//开启自动显示建议</span></span><br><span class="line">    <span class="attr">"other"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"comments"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"strings"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"editor.tabSize"</span>: <span class="number">2</span>, <span class="comment">//制表符符号eslint</span></span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span>, <span class="comment">//保存时自动格式化</span></span><br><span class="line">  <span class="attr">"editor.codeActionsOnSave"</span>: &#123;</span><br><span class="line">    <span class="attr">"source.fixAll"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;, <span class="comment">//让prettier使用eslint的代码格式进行校验</span></span><br><span class="line">  <span class="attr">"prettier.semi"</span>: <span class="literal">false</span>, <span class="comment">//去掉代码结尾的分号</span></span><br><span class="line">  <span class="attr">"prettier.singleQuote"</span>: <span class="literal">true</span>, <span class="comment">//使用带引号替代双引号</span></span><br><span class="line">  <span class="attr">"javascript.format.insertSpaceBeforeFunctionParenthesis"</span>: <span class="literal">true</span>, <span class="comment">//让函数(名)和后面的括号之间加个空格</span></span><br><span class="line">  <span class="attr">"vetur.format.defaultFormatter.html"</span>: <span class="string">"js-beautify-html"</span>, <span class="comment">//格式化.vue中html</span></span><br><span class="line">  <span class="attr">"vetur.format.defaultFormatter.js"</span>: <span class="string">"vscode-typescript"</span>, <span class="comment">//让vue中的js按编辑器自带的ts格式进行格式化</span></span><br><span class="line">  <span class="attr">"vetur.format.defaultFormatterOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"js-beautify-html"</span>: &#123;</span><br><span class="line">      <span class="attr">"wrap_attributes"</span>: <span class="string">"force-aligned"</span> <span class="comment">//属性强制折行对齐</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"eslint.validate"</span>: [</span><br><span class="line">    <span class="comment">//开启对.vue文件中错误的检查</span></span><br><span class="line">    <span class="string">"javascript"</span>,</span><br><span class="line">    <span class="string">"javascriptreact"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"html"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"emmet.triggerExpansionOnTab"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"files.associations"</span>: &#123;</span><br><span class="line">    <span class="comment">//要进行html补全的文件</span></span><br><span class="line">    <span class="attr">"*.js"</span>: <span class="string">"html"</span>,</span><br><span class="line">    <span class="attr">"*.vue"</span>: <span class="string">"html"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"workbench.colorTheme"</span>: <span class="string">"Quiet Light"</span>,</span><br><span class="line">  <span class="attr">"explorer.confirmDelete"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"terminal.integrated.fontSize"</span>: <span class="number">24</span>,</span><br><span class="line">  <span class="attr">"editor.autoClosingBrackets"</span>: <span class="string">"always"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>Chrome 这个装个最新版本的就好,然后装一个谷歌访问助手 , 然后打开设置.点击左侧高级下的扩展程序 ,然后点击扩展程序左边的菜单按钮,然后打开谷歌应用商店搜索devtools 安装<strong>Vue.js devtools</strong>即可.下图我已经安装过了所以没有显示 添加到 Chrome.<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/r3.gif" alt=""></p>
</li>
<li><p>如果想美化Google标签页的话 在应用商城搜索 <strong>momentum</strong> 即可</p>
</li>
</ol>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191223092306.png" alt="20191223092306.png" style="zoom:67%;" />
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Part2·Java结构&amp;基本语法(图文)</title>
    <url>/04-java.html</url>
    <content><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191222183619.png" alt="20191222183619.png"></p>
<a id="more"></a>

<h2 id="Section-1-Java程序结构"><a href="#Section-1-Java程序结构" class="headerlink" title="Section.1  Java程序结构"></a>Section.1  Java程序结构</h2><p>在第一篇文章中我们已经学会了如何在系统中安装Java开发工具和开发Java所需要的环境,并创建了我们第一个Java项目,建立了第一个Java类文件并成功运行.那现在我们来分析一下之前的代码是什么意思.</p>
<p>首先我们再来回顾一下之前的第一个Java程序 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span></span>&#123; <span class="comment">//程序的外层框架</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; <span class="comment">//程序的内层框架</span></span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>); <span class="comment">//程序所要执行的代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h4><p>这里我着重的讲解一下上篇代码中的 public static void main(String[] args){} 这个程序的内层框架, 我们把它简称为<strong>main方法</strong>,是整个Java程序的入口.那在这里我再简单介绍一下一些基本的概念.</p>
<ol>
<li><p>程序 : 什么是程序? <img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191222195458.png" alt="20191222195458.png">这里字典给我们解释的非常清楚了.  就是一件事情进行的步骤和次序. 在计算机中 程序就是一堆有次序的<strong>指令</strong>的集合.那指令又是什么? 这里我们把指令就理解为步骤就好.在实际生活中,程序无所不在,比如去银行办理各种业务就是一个程序.<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191222200359.png" alt="20191222200359.png">对于我们现在看到的这个办理业务的程序而言,程序是从上至下,依次执行,不能将以上的顺序打乱,因为我们不能直接去了银行就去柜台输密码,签字什么的.没取号,没排队,银行职员也不知道你要办理什么业务咱们输密码有什么用?<strong>所以程序的执行是有顺序的,并且缺一不可的.</strong></p>
</li>
<li><p><strong>main 方法</strong> : main : 主要的 . main方法就是Java程序的主入口,也就是说Java程序要从main方法开始来执行我们设计的程序, 相当于我要去银行办理业务,那首先得从银行的大门进去才能正式开始我们银行办理业务的程序,那银行的大门就是我们的main方法,main方法有4要素,4者缺一不可.</p>
<ol>
<li>public</li>
<li>static</li>
<li>void</li>
<li>String[] args</li>
</ol>
</li>
<li><p>上面第一条我们介绍到了指令的概念,现在我们在代码中新加入几行代码</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     System.out.println(<span class="string">"1.输入用户名"</span>);</span><br><span class="line">     System.out.println(<span class="string">"2.输入密码"</span>);</span><br><span class="line">     System.out.println(<span class="string">"3.点击登陆按钮"</span>);</span><br><span class="line">     System.out.println(<span class="string">"4.登陆成功"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   然后点击绿色的箭头开始运行代码.</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>输入用户名</span><br><span class="line"><span class="number">2.</span>输入密码</span><br><span class="line"><span class="number">3.</span>点击登陆按钮</span><br><span class="line"><span class="number">4.</span>登陆成功</span><br></pre></td></tr></table></figure>

<p>   从上面的执行结果我们就能看出来,程序是从main方法开始执行,然后从main方法的大括号内部由上至下依次执行的,而其中写的代码 <strong>System.out.println(“xxx”);</strong> 的作用就是将双引号 <b style="color:red">“ “</b> 内部的内容输出到控制台上,我们就能看到输出结果.</p>
<h2 id="Section-2-注释-amp-关键字-amp-标识符"><a href="#Section-2-注释-amp-关键字-amp-标识符" class="headerlink" title="Section.2  注释&amp;关键字&amp;标识符"></a>Section.2  注释&amp;关键字&amp;标识符</h2><h4 id="A-Java严格区分大小写"><a href="#A-Java严格区分大小写" class="headerlink" title="A. Java严格区分大小写"></a>A. Java严格区分大小写</h4><p>首先我们在编写Java程序的时候要注意 Java 是大小写敏感的,严格区分大小写, Class 和 class 的 意义和作用都不一样.</p>
<h4 id="B-关键字"><a href="#B-关键字" class="headerlink" title="B. 关键字"></a>B. 关键字</h4><p>在java中有一些单词是具备特殊含义的,不能作为其他用途来使用,下面用一个表格来整理Java中所有的关键字和保留字</p>
<table>
<thead>
<tr>
<th>类别</th>
<th>关键字</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>权限控制</td>
<td>private</td>
<td>私有的</td>
</tr>
<tr>
<td></td>
<td>public</td>
<td>公共的</td>
</tr>
<tr>
<td></td>
<td>protected</td>
<td>受保护的</td>
</tr>
<tr>
<td>类、方法和变量修饰符</td>
<td>class</td>
<td>类</td>
</tr>
<tr>
<td></td>
<td>static</td>
<td>静态</td>
</tr>
<tr>
<td></td>
<td>final</td>
<td>最终,不可变</td>
</tr>
<tr>
<td></td>
<td>extends</td>
<td>继承</td>
</tr>
<tr>
<td></td>
<td>abstract</td>
<td>抽象</td>
</tr>
<tr>
<td></td>
<td>implements</td>
<td>实现</td>
</tr>
<tr>
<td></td>
<td>interface</td>
<td>接口</td>
</tr>
<tr>
<td></td>
<td>new</td>
<td>新建,创建</td>
</tr>
<tr>
<td></td>
<td>native</td>
<td>本地,原生</td>
</tr>
<tr>
<td></td>
<td>strictfp</td>
<td>精确</td>
</tr>
<tr>
<td></td>
<td>synchronized</td>
<td>同步</td>
</tr>
<tr>
<td></td>
<td>transient</td>
<td>瞬态</td>
</tr>
<tr>
<td></td>
<td>volatile</td>
<td>易变的</td>
</tr>
<tr>
<td>程序控制语句</td>
<td>break</td>
<td>跳出</td>
</tr>
<tr>
<td></td>
<td>case</td>
<td>和switch结合使用,用来选择</td>
</tr>
<tr>
<td></td>
<td>continue</td>
<td>跳出当前循环,继续下一轮循环</td>
</tr>
<tr>
<td></td>
<td>default</td>
<td>默认值</td>
</tr>
<tr>
<td></td>
<td>do</td>
<td>执行</td>
</tr>
<tr>
<td></td>
<td>else</td>
<td>否则</td>
</tr>
<tr>
<td></td>
<td>if</td>
<td>如果</td>
</tr>
<tr>
<td></td>
<td>for</td>
<td>循环</td>
</tr>
<tr>
<td></td>
<td>while</td>
<td>循环</td>
</tr>
<tr>
<td></td>
<td>switch</td>
<td>选择结构</td>
</tr>
<tr>
<td></td>
<td>return</td>
<td>返回</td>
</tr>
<tr>
<td></td>
<td>instanceof</td>
<td>判断是否为该类实例</td>
</tr>
<tr>
<td>异常处理</td>
<td>try</td>
<td>尝试</td>
</tr>
<tr>
<td></td>
<td>catch</td>
<td>捕捉异常</td>
</tr>
<tr>
<td></td>
<td>finally</td>
<td>不管是否出现异常都会执行</td>
</tr>
<tr>
<td></td>
<td>throw</td>
<td>抛出一个异常对象</td>
</tr>
<tr>
<td></td>
<td>throws</td>
<td>声明一个或者多个异常类</td>
</tr>
<tr>
<td></td>
<td>assert</td>
<td>断言</td>
</tr>
<tr>
<td>包</td>
<td>import</td>
<td>导入</td>
</tr>
<tr>
<td></td>
<td>package</td>
<td>包</td>
</tr>
<tr>
<td>数据类型</td>
<td>byte</td>
<td>字节型</td>
</tr>
<tr>
<td></td>
<td>short</td>
<td>短整型</td>
</tr>
<tr>
<td></td>
<td>int</td>
<td>整型</td>
</tr>
<tr>
<td></td>
<td>long</td>
<td>长整型</td>
</tr>
<tr>
<td></td>
<td>float</td>
<td>单精度浮点</td>
</tr>
<tr>
<td></td>
<td>double</td>
<td>双精度浮点</td>
</tr>
<tr>
<td></td>
<td>boolean</td>
<td>布尔</td>
</tr>
<tr>
<td></td>
<td>char</td>
<td>字符</td>
</tr>
<tr>
<td></td>
<td>void</td>
<td>无返回值类型</td>
</tr>
<tr>
<td>引用</td>
<td>this</td>
<td>当前类引用</td>
</tr>
<tr>
<td></td>
<td>super</td>
<td>父类引用</td>
</tr>
<tr>
<td>保留字</td>
<td>goto</td>
<td>不能使用</td>
</tr>
<tr>
<td></td>
<td>const</td>
<td>不能使用</td>
</tr>
<tr>
<td>值</td>
<td>null</td>
<td>空</td>
</tr>
</tbody></table>
<h5 id="注"><a href="#注" class="headerlink" title="注"></a>注</h5><p>有些同学可能一看,哇这么多单词,对于一些英语可能比较差的同学在这里可能就懵逼了,其实这里我要补充一句,要想学了Java然后出去找一份工作的话,其实需要掌握的词汇量也就100 200个就足够了,每天记10个单词,不到1个月就记完了,所以每天学习所涉及到不懂的单词,当天就即时的消化掉.这里也要注意,<strong>关键字不需要死记硬背</strong>,,<strong>关键字不需要死记硬背</strong>,<strong>关键字不需要死记硬背</strong>,咱们在后面的学习过程中,慢慢的就掌握了,只要代码敲的多就好.这里还要提醒一句,其实有了工具后关键字在工具中有着和其他单词不同的颜色,用眼睛就能看出来哪个是关键字,哪个不是了.</p>
<h4 id="C-标识符"><a href="#C-标识符" class="headerlink" title="C. 标识符"></a>C. 标识符</h4><p> Java 所有的组成部分都需要名字。类名、变量名,常量名以及方法名都被称为标识符。</p>
<p>关于标识符我们要注意的是标识符的命名规则和命名规范 :</p>
<p>规则 :  </p>
<ol>
<li>标识符不能用数字开头</li>
<li>标识符由字母数字和符号组成,符号中不能有特殊符号除了下划线 _ 和 美元符号 $</li>
<li>关键字不能用来做为标识符使用</li>
<li>标识符大小写是敏感的,也就是说 name 和 Name 是不同的标识符</li>
</ol>
<p>规范:</p>
<ol>
<li>命名尽量要有意义.</li>
<li>类名,也就是关键字后class后的名称 , class名称一般都是每个单词首字母大写,比如 : Student,Teacher,ProdcutInfo,OrderInfo,OrderService,等等</li>
<li>变量名 , 一般都是第一个单词字母小写,之后的每个单词首字母都大写,比如 : studentName,orderName,productPrice,等等</li>
<li>常量名, 一般都是每个单词都大写,单词之间使用下划线隔开 . 如 : ERROR_CODE , MAX_VALUE, MIN_VALUE</li>
<li>方法名 : 和变量名类似 , 如 getElementById() , getStudentByName() , 通常是根据要实现的功能来进行相应的命名</li>
</ol>
<h5 id="注-规则是一定要遵守的-但是规范我这里总结的只是大部分程序猿都这么去写-没有按照规范来不会错-但是希望大家去遵守-就跟排队一样的-插队体现了人品素质差-没有遵守代码规范也只是代表着你的编程素质差而已-除非是你的公司有明文规范要求你这么写-那我们还是要以公司为主"><a href="#注-规则是一定要遵守的-但是规范我这里总结的只是大部分程序猿都这么去写-没有按照规范来不会错-但是希望大家去遵守-就跟排队一样的-插队体现了人品素质差-没有遵守代码规范也只是代表着你的编程素质差而已-除非是你的公司有明文规范要求你这么写-那我们还是要以公司为主" class="headerlink" title="注 : 规则是一定要遵守的,但是规范我这里总结的只是大部分程序猿都这么去写,没有按照规范来不会错,但是希望大家去遵守,就跟排队一样的,插队体现了人品素质差,没有遵守代码规范也只是代表着你的编程素质差而已,除非是你的公司有明文规范要求你这么写,那我们还是要以公司为主"></a>注 : 规则是一定要遵守的,但是规范我这里总结的只是大部分程序猿都这么去写,没有按照规范来不会错,但是希望大家去遵守,就跟排队一样的,插队体现了人品素质差,没有遵守代码规范也只是代表着你的编程素质差而已,除非是你的公司有明文规范要求你这么写,那我们还是要以公司为主</h5><h4 id="D-注释"><a href="#D-注释" class="headerlink" title="D. 注释"></a>D. 注释</h4><p>注释 : 解释.比如说我们定义了一个方法,或者写了一段代码,或者定义了一个变量,都可以加上注释,注释中的文字不会被Java所执行,起一个解释的作用.</p>
<p>Java中有3种注释</p>
<ol>
<li><strong>单行注释</strong>    // 注释内容       这里要注意, 单行注释只会注释掉 双斜杠后面的内容.</li>
<li><strong>多行注释</strong>    /*    注释内容  */</li>
<li><strong>文档注释</strong>    /**  注释内容   */</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 这是一个show方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//声明了一个局部变量a,并赋值为1</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    String name;<span class="comment">//声明了一个局部变量name</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    给局部变量name赋值</span></span><br><span class="line"><span class="comment">    同时输出变量name中的值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    name = <span class="string">"zhangsan"</span>;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Section-3-变量-amp-数据类型"><a href="#Section-3-变量-amp-数据类型" class="headerlink" title="Section.3  变量&amp;数据类型"></a>Section.3  变量&amp;数据类型</h2><p>OK 介绍完一些Java中的标识符和关键字等概念后.我们继续开始讲解下面的内容.</p>
<h3 id="变量-variable"><a href="#变量-variable" class="headerlink" title="变量 [variable]"></a>变量 [variable]</h3><h4 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h4><p>在讲变量之前我还是用一个例子来帮助大家理解变量.</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191226153157.png" alt="20191226153157.png"></p>
<p>小明有1000块钱,小明不管是出去Shopping也好,还是出去玩也好携带在身上很不方便.那按照我们现在的人的思维是不是可以把钱存在支付宝或者微信里呢?然后想要用钱的时候就用支付宝或者微信支付就可以了,这样是不是更加方便?</p>
<p>那在上面这个例子里,支付宝或者微信就是我们用来存储或者保存钱的一个容器.小明想要花钱或者存钱的时候只需要选用一种容器,然后用容器来去操作就好了.然后,容器中可以用来操作钱的种类又有很多,比如说花呗,借呗,余额宝,账户余额等等,那现在小明现在操作或者存储的是哪种类型的钱呢?</p>
<p>到了这里我们就来总结一下上面的例子 ;</p>
<ol>
<li>存储钱的容器    ======&gt;  变量</li>
<li>使用 支付宝 or 微信 ?  ======&gt;  变量名称</li>
<li>1000块钱             ======&gt;     数据值</li>
<li>账户余额,花呗,借呗              ======&gt;     数据类型</li>
</ol>
<p>到这里我们再来用专业一点的语言来描述这几个概念 :</p>
<p><strong>变量  :  Java内存中的一块存储空间,这块空间中存储的数据是可变的</strong> =====&gt;     容器</p>
<p><strong>变量名  : 引用存储空间所起的名称</strong> ======&gt;    支付宝,微信</p>
<p><strong>数据类型 : 在java中,根据存储空间所存储的数据不同,划分了多种数据类型,比如说,存储的是数字,数字又分小数类型和整数类型,存储的是字母或者汉字或者拼音等,可以称之为字符或者字符串类型等等</strong></p>
<p>======&gt;  余额,花呗,借呗</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">变量的语法 :</span><br><span class="line"></span><br><span class="line">数据类型 变量名1 [<span class="string"> = 数据值2</span>][<span class="symbol">, 变量名2 [= 数据值2</span>] ...] ;</span><br><span class="line"></span><br><span class="line">---这里要注意的是 [] 中的内容代表可写可不写---</span><br></pre></td></tr></table></figure>

<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>刚刚讲到了在Java中会根据数据的不同而划分了不同的数据类型,那现在我们来看一下具体有多少种数据类型</p>
<ol>
<li>基本数据类型<ol>
<li>整数类型 : 整数分为4种 byte short <b style="color:red;">int </b> long  如 : 1,2,3,4 100 ,200 , -100,-200..</li>
<li>浮点类型 : 浮点型 2种 float <b style="color:red;">double</b>  如 : 0.1, 1.1234, -0.123…</li>
<li>布尔类型 : <b style="color:red;">boolean</b> 如 : true ,false  </li>
<li>字符类型 : char 如 : ‘a’ ‘b’ ‘我’ ‘好’ ‘了’</li>
</ol>
</li>
<li>引用数据类型  :   数组,类类型 等…  <b style="color:red;">String </b></li>
</ol>
<p>上面列表中我标红的类型就是在java基础学习的过程中常见的数据类型.</p>
<p><b style="color:red">int &amp; double</b> : 在 Java 中 整数和浮点型小数的默认类型</p>
<p><b style="color:red">boolean</b> : 在 Java 中 称之为 boolean类型 , boolean类型只有2个值, <strong>true</strong> 和 <strong>false</strong>. 代表<strong>真</strong>或者<strong>假</strong></p>
<h5 id="String和char的区别"><a href="#String和char的区别" class="headerlink" title="String和char的区别"></a><b style="color:red">String和char的区别</b></h5><ol>
<li><p>char 称之为 字符 , 在Java语言中,所有的单个字母,数字,或者汉字和字符,都能被’’单引号所标识,比如 ‘a’,’b’,’我’,’1’ ,’=’ 都称之为字符</p>
</li>
<li><p>String 称之为 字符串 , 通俗一点理解,字符串即一串字符, 也就是如果有多个字母或者符号,我们就需要用 “” 双引号来标识, 如  : “我好了”, “下次一定” , “湖人总冠军” , “abc” , “123” 等等..</p>
</li>
</ol>
<h5 id="注意-并不是说一定要多个字符才称之为字符串-只要用双引号标识的-我们都认为是字符串-打个比方-一块羊肉叫羊肉-一根竹子上串5块羊肉就叫羊肉串了-那羊肉串被你吃了4块-还剩一块-那不还得是羊肉串嘛"><a href="#注意-并不是说一定要多个字符才称之为字符串-只要用双引号标识的-我们都认为是字符串-打个比方-一块羊肉叫羊肉-一根竹子上串5块羊肉就叫羊肉串了-那羊肉串被你吃了4块-还剩一块-那不还得是羊肉串嘛" class="headerlink" title="注意 : 并不是说一定要多个字符才称之为字符串,只要用双引号标识的,我们都认为是字符串,打个比方,一块羊肉叫羊肉,一根竹子上串5块羊肉就叫羊肉串了, 那羊肉串被你吃了4块,还剩一块,那不还得是羊肉串嘛!"></a>注意 : 并不是说一定要多个字符才称之为字符串,只要用双引号标识的,我们都认为是字符串,打个比方,一块羊肉叫羊肉,一根竹子上串5块羊肉就叫羊肉串了, 那羊肉串被你吃了4块,还剩一块,那不还得是羊肉串嘛!<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/xiao111.gif" alt=""></h5><p>   比如 “Hello World!” , “abc123”  这些都是多个字符组成的 必须用双引号标识,代表字符串, 但是 如果 是 <strong>“a”</strong>,双引号只标识了单个字符 也是代表字符串,只有 <strong>‘a’</strong> 才是 字符.</p>
<h4 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h4><p>变量的使用分为2步 :</p>
<ol>
<li>声明变量</li>
<li>给变量赋值</li>
<li>使用变量来对数据进行操作</li>
</ol>
<p>也可以一步到位 :  声明变量并赋值,然后再操作</p>
<p>按照第一篇文章介绍的方式我们再创建一个VariableDemo01的class,用上面的语法来描述小明存钱到支付宝或者微信,然后到使用钱的过程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableDemo01</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="comment">//1.确定小明要存什么类型的数据,数据为1000 那数据类型在Java中就为整数类型</span></span><br><span class="line">        <span class="comment">//整数类型 int</span></span><br><span class="line">        <span class="comment">//2.小明将钱存入哪一个容器中</span></span><br><span class="line">        <span class="comment">//容器名称,也就是变量名 weixin</span></span><br><span class="line">        <span class="comment">//上面2步就是 : 声明变量的过程 .</span></span><br><span class="line">        <span class="keyword">int</span> weixin ;</span><br><span class="line">        <span class="comment">//3.小明要存1000  存到 weixin 中</span></span><br><span class="line">        <span class="comment">//这一步就是给变量赋值</span></span><br><span class="line">        weixin = <span class="number">1000</span>;</span><br><span class="line">        <span class="comment">//现在我们要去操作变量了.比如小明逛街花了100</span></span><br><span class="line">        System.out.println(weixin - <span class="number">100</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 :</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">900</span></span><br></pre></td></tr></table></figure>

<p>然后我们还可以换另一种方式 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.声明变量并赋值</span></span><br><span class="line">    <span class="keyword">int</span> zhifubao = <span class="number">2000</span>;</span><br><span class="line">    <span class="comment">//2.使用变量,查看支付宝中有多少余额</span></span><br><span class="line">    System.out.println(zhifubao);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果 :</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2000</span></span><br></pre></td></tr></table></figure>

<h5 id="注-我们如果想要输出这种结果"><a href="#注-我们如果想要输出这种结果" class="headerlink" title="注 : 我们如果想要输出这种结果"></a>注 : 我们如果想要输出这种结果</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">余额 = <span class="number">2000</span></span><br></pre></td></tr></table></figure>

<p>就要修改代码为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"余额 = "</span> + zhifubao);</span><br></pre></td></tr></table></figure>

<h2 id="Section-4-练习"><a href="#Section-4-练习" class="headerlink" title="Section.4 练习"></a>Section.4 练习</h2><p>好了..现在我们应该已经对变量有了一些基本的理解,来几个练习吧</p>
<ol>
<li>在main方法中声明并使用变量存储以下内容,并输出<ol>
<li>名称(name)  Lucy  String 类型</li>
<li>身高(height) 1.7    double 类型</li>
<li>体重(weight) 50    int 类型</li>
<li>性别(gender) 女    char 类型</li>
<li>是否结婚(isMarried) 否(false) boolean类型</li>
</ol>
</li>
</ol>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">名称 : <span class="type">Lucy</span></span><br><span class="line">身高 : 1.7</span><br><span class="line">体重 : 50</span><br><span class="line">性别 : 女</span><br><span class="line">是否结婚 : <span class="type">false</span></span><br></pre></td></tr></table></figure>

<h2 id="Section-5-总结"><a href="#Section-5-总结" class="headerlink" title="Section.5 总结"></a>Section.5 总结</h2><p>今天内容有点多 , 就简单总结一下 :</p>
<ol>
<li>java中的 main方法 (理解,多敲拿这个练手感)</li>
<li><strong>关键字&amp;标识符&amp;注释</strong> (掌握概念,不用死记)</li>
<li><b style="color:red">变量&amp;数据类型</b> (重点掌握)</li>
</ol>
<p>好了,来个詹韦连线激情一下.</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/james&wade.gif" alt=""></p>
<p>  <img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191223005929.png" alt="20191223005929.png"></p>
]]></content>
      <categories>
        <category>后台</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo next7.X主题 添加版权信息</title>
    <url>/01-next.html</url>
    <content><![CDATA[<p style="text-align:center">hexo 7.x next 版权配置.</p>

<a id="more"></a>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Creative Commons 4.0 International License.</span></span><br><span class="line"></span><br><span class="line"><span class="section"># See: https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class="line"></span><br><span class="line"><span class="section"># Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class="line"></span><br><span class="line"><span class="section"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class="line"></span><br><span class="line"><span class="section"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class="line"></span><br><span class="line">creative_commons:</span><br><span class="line">license: by-nc-sa</span><br><span class="line">sidebar: true</span><br><span class="line">post: true</span><br><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure>

<p>把 post 和 sidebar 和 language 配置下即可.. OK.</p>
]]></content>
      <categories>
        <category>next</category>
      </categories>
      <tags>
        <tag>next主题</tag>
        <tag>版权信息</tag>
      </tags>
  </entry>
  <entry>
    <title>Part7·面向对象编程·二(图文)</title>
    <url>/03-java.html</url>
    <content><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191221160614.png" alt="20191221160614.png"></p>
<a id="more"></a>

<h2 id="Section-1-前文引入"><a href="#Section-1-前文引入" class="headerlink" title="Section. 1 前文引入"></a>Section. 1 前文引入</h2><p>在上一篇文章中我们知道了在 Java 中如何设计一个类,来定义类中的属性和行为,那属性这个东西呢,和咱们之前学过的变量非常相似.所以我们这里暂时先不提,这篇文章主要来给大家分析我们类中的<b style="color:red">行为</b>.</p>
<h2 id="Section-2-理论"><a href="#Section-2-理论" class="headerlink" title="Section. 2 理论"></a>Section. 2 理论</h2><p>行为 : 在程序语言中,我们可以用 function 或者 method 这俩个单词来对他进行翻译,也可以称之为函数或者方法.在 class(类,以后我这里都写成 class)中,通常有 4 种形态的方法.那在掌握不同形态方法之前我们首先来了解一下创建方法的语法是什么?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法的基本语法</span></span><br><span class="line">[修饰符] 返回值类型 方法名([参数类型<span class="number">1</span> 参数名<span class="number">1</span>,参数类型<span class="number">2</span> 参数名<span class="number">2</span>,...])&#123;</span><br><span class="line">    方法体</span><br><span class="line">    ...</span><br><span class="line">    [<span class="keyword">return</span> 返回值;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里来对上面的语法来做一个简单的解释 :</p>
<p><strong>修饰符</strong> : 方法的修饰符有很多,不同的修饰符作用也不同 比如 : 对方法权限限定的 public private protected , 是否静态 static ,能否被重写 final 等.. 这里目前我们先使用一个 public(公共的)</p>
<p><strong>返回值类型</strong> : 方法的返回值类型就是 一个数据类型, 但是 返回值类型不能随便定义,我们需要通过具体方法所设计到的需求来决定是否给定具体返回值类型,如果该方法没有具体返回值类型 我们可以定义为 <strong>void</strong></p>
<p><strong>方法名</strong> : 方法的名称.注意取名的规范即可,和变量一样,尽量要有意义,首个单词小写,其余单词首字母大写,如 showProductInfo , getStudentById 等等…</p>
<p><strong>参数类型和参数名</strong> : 在调用该方法的时候,比如我们前文设计的猫和狗类种吃东西的方法 , 那具体猫和狗吃什么呢?对于吃的食物不确定,我们就可以通过传入参数的形式来决定,比如猫吃鱼,狗吃骨头,那 鱼和骨头 我们简单认为就是一个字符串,那传入的参数类型就是 String 参数名称就是 food</p>
<p><strong>方法体</strong> : 方法中所需要执行的代码</p>
<p><strong>return 返回值</strong> : 如果方法中定义了返回值类型,我们就必须要在方法的最后加上 <strong>return</strong> 关键字 .理解起来也很简单,调用该方法有返回值 那是不是应该给我返回 一个值出来了? 这里 正好和返回值类型呼应, 返回什么类型的值,方法上就应该填写什么返回值类型或者能够兼容的返回值类型.</p>
<h5 id="举例-1"><a href="#举例-1" class="headerlink" title="举例 1 :"></a>举例 1 :</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//现在我们设计一个计算器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calucator</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//那计算器中肯定具备了一些行为,比如 加减乘除</span></span><br><span class="line">    <span class="comment">//那我们定义一个最基本的 加法的 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">plus1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是计算器中的加法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上面是一个最基本的方法,调用方法应该这么调用.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     	<span class="comment">//1.创建计算器对象</span></span><br><span class="line">        Calucator calucator = <span class="keyword">new</span> Calucator();</span><br><span class="line">        <span class="comment">//2.调用计算器中的加法</span></span><br><span class="line">        calucator.plus1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用的结果 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是计算器中的加法</span><br></pre></td></tr></table></figure>

<p>很显然,这个结果虽然正确的运行了计算器中的加法方法,但是并不是我们想要的.这个时候我们就需要其他几种形态的方法了.那先介绍一下有几种 :</p>
<ol>
<li>无返回值 无参数的方法 —&gt;就是上面的 plus1 方法</li>
<li>无返回值 有参数的方法</li>
<li>有返回值 无参数的方法</li>
<li>有返回值 有参数的方法</li>
</ol>
<p>其实总的来说就是看是否有没有返回值,是否有没有参数?那我们在定义方法的时候怎么决定是否定义返回值,是否传入参数呢?也是通过 2 个方面来决定</p>
<ol>
<li>在调用方法的时候,方法体中的代码需不需要使用到未知的数据?</li>
<li>在调用方法完成的时候,调用者是否需要拿到方法产生的结果?</li>
</ol>
<p>好.根据上面 2 个问题 我们重新来设计我们计算器中的 plus 方法,在上面的代码中我们重新设计 :</p>
<h5 id="举例-2"><a href="#举例-2" class="headerlink" title="举例 2 :"></a>举例 2 :</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*第一 : 方法体中的代码需不需要使用到未知的数据 ? 很明显计算器要做加法运算肯定是要对2个未知的数来进行加法运算,比如 : a + b , 那也就是说我们方法体在运行的时候需要用到一个 数字 a  和 数字 b ,那这样我们就确定了当前方法的参数类型和参数名称.</span></span><br><span class="line"><span class="comment">	参数类型1 : int 参数名1 : a</span></span><br><span class="line"><span class="comment">    参数类型2 : int 参数名2 : b</span></span><br><span class="line"><span class="comment">  第二 : 调用者是否需要拿到方法产生的数据? 计算器在计算完 a 和 b 的和之后,我们需要拿到运算后的结果,这样我们就确定了当前方法的返回值.</span></span><br><span class="line"><span class="comment">    return a+b的和; //记住分号一定要写</span></span><br><span class="line"><span class="comment">  那确定了参数和返回值 我们重新来定义plus方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calucator</span></span>&#123;</span><br><span class="line">    <span class="comment">//返回值 是 2 个 int 类型的和 那也是 int类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus2</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = a + b;<span class="comment">//声明变量sum来接收a和b的和</span></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//又是创建对象和调用的过程</span></span><br><span class="line">        Calucator calucator = <span class="keyword">new</span> Calucator();</span><br><span class="line">        <span class="comment">//调用的时候要注意,既然我们在方法上声明了参数,那我们就要传入对应的参数类型的值.</span></span><br><span class="line">        <span class="comment">//比如我们要计算3和5的值</span></span><br><span class="line">        <span class="comment">//因为我们将和从方法中返回了出来,所以我们可以用对应的sum的数据类型来对返回值进行接收</span></span><br><span class="line">        <span class="keyword">int</span> sum = calucator.plus2(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//最后打印输出 我们得到的结果</span></span><br><span class="line">        System.out.println(<span class="string">"3 + 5 = "</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到结果 :</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span>+ <span class="number">5</span> = <span class="number">8</span></span><br></pre></td></tr></table></figure>



<h2 id="Section-3-练习"><a href="#Section-3-练习" class="headerlink" title="Section. 3 练习"></a>Section. 3 练习</h2><p>好了,经过上文的学习后,我们自己来练习一下具体方法的定义和调用</p>
<p>练习 1 : 在 Calucator 中完善其他减法(sub)乘法(mul)和除法(div),方法名已经给出来了哦.</p>
<p>练习 2 : 重新设计之前敲过的猫和狗类的吃东西的方法,比如说给一种食物(food) 就代表狗或者猫在吃什么? 食物我们先定义为 String 类型即可.</p>
<h2 id="Section-4-总结"><a href="#Section-4-总结" class="headerlink" title="Section. 4 总结"></a>Section. 4 总结</h2><ol>
<li><p>方法的定义</p>
<ol>
<li>方法具体用来干什么? 确定方法名称,比如说方法的作用是 吃饭 eat ,计算总价 getTotalPrice,根据学生的名称来查询学生信息 getStudentInfoByName 等.</li>
<li>方法体中需不需要用到未知的参数. 确定参数类型和参数名</li>
<li>方法结束后调用者需不需要使用方法调用完的结果. 如果需要 就应该写返回值类型 和 在方法体中 使用 return 返回对应类型的值</li>
</ol>
</li>
<li><p>方法的调用</p>
<ol>
<li><strong>有参数</strong> 比如 void plus(int a,int b) 那在调用时,就必须传入对应参数列表的参数,第一个参数是 int 类型,那就要传入 int 类型数据,第二个类型如果是 String 那就要传入 String. 该 plus 方法 2 个参数都是 int 类型,</li>
</ol>
<ul>
<li>调用方式 : <strong>对象.plus(1,2);</strong></li>
</ul>
<ol start="2">
<li><strong>有返回值</strong> 比如 int plus(int a,int b) 那在调用时,我们就能通过 对应的返回值类型来接收数据</li>
</ol>
<ul>
<li>调用方式 : <strong>int sum = 对象.plus(3,4);</strong></li>
</ul>
</li>
</ol>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/baodao.gif" />
]]></content>
      <categories>
        <category>后台</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>Part6·面向对象编程(图文)</title>
    <url>/02-java.html</url>
    <content><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/xiao1.jpg" alt=""></p>
<a id="more"></a>

<h2 id="Section-1-前文引入"><a href="#Section-1-前文引入" class="headerlink" title="Section. 1 前文引入"></a>Section. 1 前文引入</h2><p>OK!今天咱们正式进入到 Java 的核心思想的学习了.标题的面向对象编程是什么意思呢?是不是这样呢?</p>
<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/xiao2.jpeg" alt="xiao2" style="zoom:67%;" />

<p>开个玩笑了,那什么是面向对象编程呢?要搞清楚面向对象是什么?首先我们得知道什么是对象?在学 Java 的当中 90%的人应该都听说过一句话 : <strong>万物皆对象</strong></p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/xiao3.png" alt=""></p>
<h2 id="Section-2-理论"><a href="#Section-2-理论" class="headerlink" title="Section. 2 理论"></a>Section. 2 理论</h2><p><b style="color:red">万物皆对象</b> : 故名思意 , 世间万物在 Java 中我们都可以认为是一个对象,比如一花一草,一人一物,具体点的,比如从你眼前驶过的车辆,无论是小汽车还是公共汽车还是货车,还是从你头上飞过的飞禽,燕子,乌鸦,鸽子,还是从你脚边跑过的走兽,哈士奇,萨摩耶,橘猫,等等…. 这些都可以称之为<strong>对象</strong>,也就是对象就是一些实际存在于我们生活中的个体</p>
<p>了解了对象的概念后,我们再来思考,大部分对象之间是不是都有一些共同的特征,我们人类再对这些具有共同的特征的对象统一归类,比如说刚才我们提到的燕子,乌鸦,鸽子,这些物种都具备<b style="color:red">飞的行为</b>,还有他们都有体重,大小,和年龄的一些<b style="color:red">特征</b>,所以我们人类都将具备此类对象相同的<b style="color:red">行为和属性</b>归纳成鸟类.同样的还有无论是哈士奇还是萨摩耶还是阿拉斯加,他们也有着相同的<b style="color:red">特征</b>比如,他们的主要生活地点都是寒冷区域,也有体重,性别,身高,体重等,还具备着拉雪橇,看家,打猎等<b style="color:red">行为</b>,我们人类也将具备此类对象相同的行为的属性归纳成狗类.</p>
<p>注意上一段中我大量的引用到了 2 个词,<b style="color:red">行为</b>和<b style="color:red">属性特征</b>,也就是说我们将根据一些对象相同的行为或者属性特征描述成了某一类事物,并且只要具备了该事物的行为和属性特征的具体的实例对象都是属于同一类事物.再来看图说话.</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/b1.png" alt=""></p>
<p>那我们在 Java 中如何来描述以上这一归纳成狗类的过程呢?</p>
<p>在 Java 中 我们用并不陌生的一个关键字 <b style="color: red;font-size: 20px;">class </b>来描述一类事物,接下来我们用代码来演示如何通过一个事物的属性和行为描述一个类.</p>
<p>在工程中 src 文件夹对应的 package 中创建 Dog 类 new –&gt; Class –&gt; 名称为 Dog</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  狗类</span></span><br><span class="line"><span class="comment">  属性特征 :</span></span><br><span class="line"><span class="comment">  	智商(iq)  	  0--&gt; 	  整数  	int</span></span><br><span class="line"><span class="comment">  	外号(nickName)  二哈 --&gt; 字符串  String</span></span><br><span class="line"><span class="comment">  	体重(weight)	  60  --&gt; 正数    int</span></span><br><span class="line"><span class="comment">  	品种(brand)    哈士奇 --&gt; 字符串  String</span></span><br><span class="line"><span class="comment">  行为 :</span></span><br><span class="line"><span class="comment">  	拉雪橇 komatik();//英语随便百度的....</span></span><br><span class="line"><span class="comment">  	吃东西 eat();</span></span><br><span class="line"><span class="comment">  	看家 lookHome();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="comment">//描述狗类的属性</span></span><br><span class="line">    <span class="keyword">int</span> iq;</span><br><span class="line">    String nickName;</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    String brand;</span><br><span class="line">    <span class="comment">//描述狗类的行为</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">komatik</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(nickName + <span class="string">"拉雪橇咯..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃饭饭..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lookHome</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"一只体重 : "</span> + weight + <span class="string">"斤的"</span> + brand + <span class="string">"正在看家,"</span> + <span class="string">"看起来智商为 : "</span> + iq);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面我们用一个 class 关键字来定义一个狗类, 然后 在狗类中对狗类进行具体的描述,比如,根据上面的图片中的狗体现的属性和行为,我们定义了 智商,外号等属性,看家,吃东西等行为.OK! 在 Java 中我们已经将狗类描述好了,那怎么在 Java 中根据狗的描述来创建一个具体的二哈对象呢?同样看代码.</p>
<p>在创建另一个名字为 TestClass 的 class 文件,我们在 main 方法中输入代码 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建第一只狗东西  ---&gt; 通过 new关键字来创建</span></span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();<span class="comment">//大写的Dog就是要创建的对象所属的类的名称</span></span><br><span class="line">        <span class="comment">//给创建出来的小dog的属性赋值.</span></span><br><span class="line">        dog.iq = <span class="number">0</span>;</span><br><span class="line">        dog.nickName = <span class="string">"二哈"</span>;</span><br><span class="line">        dog.weight = <span class="number">80</span>;</span><br><span class="line">        dog.brand = <span class="string">"哈士奇"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用小dog具备的行为</span></span><br><span class="line">        dog.eat();<span class="comment">//给小dog吃饭</span></span><br><span class="line">        dog.komatik();<span class="comment">//拉出去溜溜,</span></span><br><span class="line">        dog.lookHome();<span class="comment">//再回来看家</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码写完后我们看一下程序运行的结果 :</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">吃饭饭...</span><br><span class="line">二哈拉雪橇咯...</span><br><span class="line">一只体重 : <span class="number">80</span>斤的哈士奇正在看家,看起来智商为 : <span class="number">0</span></span><br></pre></td></tr></table></figure>



<h2 id="Section-3-练习"><a href="#Section-3-练习" class="headerlink" title="Section. 3 练习"></a>Section. 3 练习</h2><p>OK,到现在我们已经成功在 Java 中创建出了一个对象,该对象所属于 Dog 类,对象具备的属性为: 昵称,体重,品种等.有着吃东西和看门等行为.那我就出另外几个练习,大家在 Java 中练习一下.</p>
<hr>
<table>
<thead>
<tr>
<th>class 名称</th>
<th>猫 Cat</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>属性</strong></td>
<td></td>
<td>数据类型</td>
</tr>
<tr>
<td>品种 brand</td>
<td>美短</td>
<td>String</td>
</tr>
<tr>
<td>昵称 nickName</td>
<td>招财</td>
<td>String</td>
</tr>
<tr>
<td>体重 weight</td>
<td>20</td>
<td>int</td>
</tr>
<tr>
<td>体型大小 size</td>
<td>中型</td>
<td>String</td>
</tr>
<tr>
<td><strong>行为</strong></td>
<td></td>
<td>行为中的代码</td>
</tr>
<tr>
<td>吃东西</td>
<td>eat</td>
<td>输出 : 吃饭饭…</td>
</tr>
<tr>
<td>抓老鼠</td>
<td>catchMouse</td>
<td>输出 : 体重,品种,体型的猫在捕捉老鼠</td>
</tr>
<tr>
<td>睡觉</td>
<td>sleep</td>
<td>输出 : 谁在睡觉</td>
</tr>
</tbody></table>
<hr>
<h2 id="Section-4-总结"><a href="#Section-4-总结" class="headerlink" title="Section. 4 总结"></a>Section. 4 总结</h2><p>对于面向对象编程思想而言,其实就是要掌握在 Java 中如何设计类和根据类来创建对应的对象,然后再给对象赋值.总的来说我们简单归纳为 3 步 :</p>
<p>考试时根据题目描述的或者实际开发中根据需求所掌握的内容来设计类.而设计类无非就是要掌握 3 个方面.</p>
<ol>
<li>当前需要创建的类的名称是什么? 这里名称必须是一个每个单词首字母大写的英文单词,并且起名要有意义 : 比如说,商品详情类 : ProductInfo , 订单详情类 : OrderInfo 等等..</li>
<li>创建的类具备哪些静态属性? 比如 商品详情类中 应该有 商品名称 : productName, 商品价格 : prodcutPrice , 商品的数量 : productNum …等等 . <strong>要注意的是 这些静态属性的命名和前面学习的变量是一样的</strong></li>
<li>创建的类中具备哪些动态行为? 比如 商品详情类中 有描述商品具体信息的方法 . showProdcutInfo<br>此方法内部具体的描述所有属性内容即可.</li>
</ol>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191221155629.png" alt="20191221155629.png"></p>
]]></content>
      <categories>
        <category>后台</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>Part1·初识Java(图文)</title>
    <url>/01-java.html</url>
    <content><![CDATA[<p>Hello,各位小朋友,不知道在前面的网页制作课程中有没有提升大家对编程的兴趣和信心?从现在开始我们将要进入到<strong>Java</strong>的学习中来了.废话不多说,直接上手.</p>
<h1 id="Java-环境搭建"><a href="#Java-环境搭建" class="headerlink" title="Java 环境搭建"></a>Java 环境搭建</h1><p>相信大家在学校的课程中,已经通过老师的讲解已经知道 Java 是什么?用来干嘛的?在这里我将直接从 Java 的环境搭建开始.这里主要以 windows10 为例:</p>
<h2 id="jdk-amp-jre-amp-jvm"><a href="#jdk-amp-jre-amp-jvm" class="headerlink" title="jdk&amp;jre&amp;jvm"></a>jdk&amp;jre&amp;jvm</h2><p> 在安装 jdk 之前,还是先介绍一下 jdk 的作用.</p>
<p> <strong>jdk</strong> : Java Development Kit 是<strong>Java</strong>语言的软件开发工具包.鲁迅先生曾经说过:<strong>想要建高楼,先得学会使锤子,锤子都不会用,还建个锤子的高楼</strong>(:smile:是不是鲁迅说的我就不知道了) . 在 jdk 中的 bin 目录中存放着我们在开发一幢高楼<strong>(Java 应用程序</strong>)中要使用到的一些锤子(<strong>工具</strong>)，比如 javac.exe(将源文件<strong>.java</strong>文件编译成<strong>.class</strong>文件),java.exe（运行<strong>.class</strong>文件）等工具.</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/1.png" alt=""> <a id="more"></a></p>
<p> <strong>jre</strong> : Java Runtime Environment <strong>Java 程序的运行环境</strong>.也就是说咱们开发的 Java 程序想要运行起来就得依靠 jre 的支持,你想想我们人类是不是也得靠地球这个大环境才能生存呢？在 jre 中有<strong>Java 虚拟机(JVM)</strong>,Java 核心类库和一些支持文件.</p>
<p> <strong>jvm</strong> : Java Virtual Machine <strong>Java 虚拟机</strong> ，有了 Java 虚拟机,Java 语言在不同平台上运行时不需要重新编译 .也就是说有了虚拟机，咱们就可以把 Java 程序运行在各种不同的平台，让 Java 具备了跨平台性.</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p> 好了，介绍完一些基本概念，咱们开始正式安装，首先我们得去官网下载一个 jdk，现在市面主流还是以 jdk8 为主 所以我这里提供 8 的链接给各位同学下载 链接地址 : <a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a> . 进入页面后往下翻就能看到下面图片，按照图片说明进行下载，我这里以 windows 64 位为例，如果是 32 位系统 就选择上面的 x86 下载即可.</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/2.png" alt=""></p>
<h5 id="下载完毕后，双击安装，建议一直下一步（next）即可。直到安装（finish）完毕"><a href="#下载完毕后，双击安装，建议一直下一步（next）即可。直到安装（finish）完毕" class="headerlink" title="下载完毕后，双击安装，建议一直下一步（next）即可。直到安装（finish）完毕"></a>下载完毕后，双击安装，建议一直<strong>下一步</strong>（next）即可。直到安装（finish）完毕</h5><h2 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h2><ol>
<li><h4 id="安装好-jdk-之后，我们还需要配置一下系统环境变量，右键我的电脑-此电脑-计算机，如果桌面的计算机图标被删除的话进入到文件夹中左侧此电脑右键也可以。然后选择属性"><a href="#安装好-jdk-之后，我们还需要配置一下系统环境变量，右键我的电脑-此电脑-计算机，如果桌面的计算机图标被删除的话进入到文件夹中左侧此电脑右键也可以。然后选择属性" class="headerlink" title="安装好 jdk 之后，我们还需要配置一下系统环境变量，右键我的电脑/此电脑/计算机，如果桌面的计算机图标被删除的话进入到文件夹中左侧此电脑右键也可以。然后选择属性"></a>安装好 jdk 之后，我们还需要配置一下系统环境变量，右键<strong>我的电脑</strong>/<strong>此电脑</strong>/<strong>计算机</strong>，如果桌面的计算机图标被删除的话进入到文件夹中左侧<strong>此电脑</strong>右键也可以。然后选择<strong>属性</strong><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/1.gif" alt=""></h4></li>
<li><h4 id="在属性中选择左侧的高级系统设置然后选择高级选项卡，再点击环境变量按钮"><a href="#在属性中选择左侧的高级系统设置然后选择高级选项卡，再点击环境变量按钮" class="headerlink" title="在属性中选择左侧的高级系统设置然后选择高级选项卡，再点击环境变量按钮."></a>在属性中选择左侧的<strong>高级系统设置</strong>然后选择<strong>高级</strong>选项卡，再点击<strong>环境变量</strong>按钮.<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/2.gif" alt=""></h4></li>
<li><h4 id="点击按钮后-在下面的系统变量中新建-JAVA-HOME-记住最后一定要点确定"><a href="#点击按钮后-在下面的系统变量中新建-JAVA-HOME-记住最后一定要点确定" class="headerlink" title="点击按钮后,在下面的系统变量中新建 JAVA_HOME,记住最后一定要点确定"></a>点击按钮后,在下面的系统变量中新建 JAVA_HOME,记住最后一定要点<strong>确定</strong><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/r2.gif" alt=""></h4></li>
<li><h4 id="查找-CLASSPATH-如没有就新建-JAVA-HOME-lib-JAVA-HOME-lib-tools-jar-前面的点别忘了"><a href="#查找-CLASSPATH-如没有就新建-JAVA-HOME-lib-JAVA-HOME-lib-tools-jar-前面的点别忘了" class="headerlink" title="查找 CLASSPATH,如没有就新建. .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar; 前面的点别忘了"></a>查找 CLASSPATH,如没有就新建. <strong>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar;</strong> 前面的点别忘了<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/4.gif" alt=""></h4></li>
<li><h4 id="找到-Path-变量进行编辑-添加-JAVA-HOME-bin-JAVA-HOME-jre-bin”-最后别忘了点确定哦"><a href="#找到-Path-变量进行编辑-添加-JAVA-HOME-bin-JAVA-HOME-jre-bin”-最后别忘了点确定哦" class="headerlink" title="找到 Path 变量进行编辑,添加 %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin” , 最后别忘了点确定哦!)"></a>找到 Path 变量进行编辑,添加 %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin” , <strong>最后别忘了点确定哦!</strong><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/3.png" alt="">)<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/4.png" alt=""></h4></li>
<li><h4 id="最后测试环境变量是否配置成功-win-r-输入-cmd-回车-打开-cmd-界面-输入-javac-如果没有报错-出现-error-或者出现以下界面均配置-OK"><a href="#最后测试环境变量是否配置成功-win-r-输入-cmd-回车-打开-cmd-界面-输入-javac-如果没有报错-出现-error-或者出现以下界面均配置-OK" class="headerlink" title="最后测试环境变量是否配置成功.win + r 输入 cmd 回车 打开 cmd 界面 输入 javac , 如果没有报错(出现 error)或者出现以下界面均配置 OK"></a>最后测试环境变量是否配置成功.win + r 输入 cmd 回车 打开 cmd 界面 输入 javac , 如果没有报错(出现 error)或者出现以下界面均配置 OK<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/5.png" alt="5" style="zoom: 80%;" /></h4></li>
<li><h4 id="如果还有错-把-Path-环境变量中的下方所示的第一个删除"><a href="#如果还有错-把-Path-环境变量中的下方所示的第一个删除" class="headerlink" title="如果还有错 把 Path 环境变量中的下方所示的第一个删除"></a>如果还有错 把 Path 环境变量中的下方所示的第一个删除<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191221163244.png" alt="20191221163244.png"></h4></li>
</ol>
<h2 id="开发工具的介绍"><a href="#开发工具的介绍" class="headerlink" title="开发工具的介绍"></a>开发工具的介绍</h2><p> 配置好 jdk 之后.就开始安装我们的 Java 开发工具了,孔子曾说过: <strong>工欲善其事,必先利其器</strong>.那我们想要开发自己的 Java 应用程序,选择一款合适的开发工具肯定会事半功倍.</p>
<p>这里我要给各位同学提几点要求.在学习的阶段要对自己狠一点,学习是一个长久,循序渐进的过程,不能三天打鱼两天晒网.所以当我们做好准备开始学习就需要严格要求自己每天都吸收一点新知识和回顾之前的内容,一开始接触 Java 肯定是比较困难的,但是也有无数个成功的例子,而这些成功的人无疑是每天都在努力,所以,如果大家对 Java 或者编程感兴趣的话,坚持下去,你就能成功!</p>
<p>现在市面上的 Java 开发工具主流无非 2 种,Eclipse <img src="https://dss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=2712477069,1146026712&fm=179&app=42&f=JPEG?w=56&h=56" alt="img"> 和 Idea <img src="https://dss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=2995446634,2852731158&amp;fm=179&amp;app=42&amp;f=JPG?w=121&amp;h=140" alt="img" style="zoom:50%;" /></p>
<p><strong>说明</strong> : 我这个博客针对的人群可能在校大学生居多,这样有一些大学生在校期间没有自己的电脑,这样工具的选择就会很尴尬,因为有一些大学机房里都装的是 Eclipse,Idea 没有,那这样的话我们学起来肯定有差别,所以我接下来的课程还是以 Eclipse 为主,到了 JavaEE 阶段我们再更换成 Idea 来进行开发,这样我们就学会使用了 2 种工具,而在校期间同学如果对 Java 很感兴趣,那可以在学习的后期跟父母沟通或者自己勤工俭学来获取一台自己的笔记本,笔记本的购买我这里也建议一下,最好还是 8G 内存为主,最好有固态硬盘,显卡不用太好,cpu 可以好一点即可.具体的购买,大家可以参考各种笔记本网站的推荐即可.</p>
<p>有了自己的笔记本后,我这里还是推荐大家直接从 Idea 开始入门,但是没有 Idea 的同学也不用太担心,工具只是工具,就算你有高达,你不会写代码拿 Idea 有什么用呢?所以还是要以 Java 核心内容学习为主,工具为辅.</p>
<p>根据上面的说明,简单来说,现在大部分还是以 Idea 为主,但是不是说 Eclipse 就被完全淘汰了,很多公司很多项目还是在使用 Eclipse 甚至 MyEclipse 的.所以学习 2 个工具的使用我觉得还是很有必要哦.好了先来介绍 Eclipse 的使用.</p>
<h5 id="Eclipse-的安装-如果大学机房有的话可以省略此步骤-但是可以在自己笔记本上安装试一试-环境变量也是一样"><a href="#Eclipse-的安装-如果大学机房有的话可以省略此步骤-但是可以在自己笔记本上安装试一试-环境变量也是一样" class="headerlink" title="Eclipse 的安装 : (如果大学机房有的话可以省略此步骤,但是可以在自己笔记本上安装试一试,环境变量也是一样)"></a>Eclipse 的安装 : (如果大学机房有的话可以省略此步骤,但是可以在自己笔记本上安装试一试,环境变量也是一样)</h5><ol>
<li><h5 id="下载-直接官网-https-www-eclipse-org-downloads-点击-Download-下载即可"><a href="#下载-直接官网-https-www-eclipse-org-downloads-点击-Download-下载即可" class="headerlink" title="下载 直接官网 https://www.eclipse.org/downloads/ 点击 Download 下载即可"></a>下载 直接官网 <a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">https://www.eclipse.org/downloads/</a> 点击 Download 下载即可</h5></li>
<li><h5 id="安装-选择-Eclipse-IDE-for-Enterprise-Java-Developers-也就是第二个"><a href="#安装-选择-Eclipse-IDE-for-Enterprise-Java-Developers-也就是第二个" class="headerlink" title="安装 选择 Eclipse IDE for Enterprise Java Developers 也就是第二个"></a>安装 选择 <strong>Eclipse IDE for Enterprise Java Developers</strong> 也就是第二个</h5></li>
</ol>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/6.png" alt=""></p>
<h5 id="选择你要安装的路径-然后点击-Install-即可"><a href="#选择你要安装的路径-然后点击-Install-即可" class="headerlink" title="选择你要安装的路径 然后点击 Install 即可"></a>选择你要安装的路径 然后点击 Install 即可</h5><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/7.png" alt=""></p>
<h5 id="如果出现以下界面-点击-AcceptNow-即可"><a href="#如果出现以下界面-点击-AcceptNow-即可" class="headerlink" title="如果出现以下界面 点击 AcceptNow 即可"></a>如果出现以下界面 点击 AcceptNow 即可</h5><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/8.png" alt=""></p>
<h5 id="如果又出现下方界面-勾选-Remember-accepted-licenese-再点击-Accept-即可"><a href="#如果又出现下方界面-勾选-Remember-accepted-licenese-再点击-Accept-即可" class="headerlink" title="如果又出现下方界面 勾选 Remember accepted licenese 再点击 Accept 即可"></a>如果又出现下方界面 勾选 Remember accepted licenese 再点击 Accept 即可</h5><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/9.png" alt=""></p>
<h2 id="创建第一个-Java-应用程序"><a href="#创建第一个-Java-应用程序" class="headerlink" title="创建第一个 Java 应用程序"></a>创建第一个 Java 应用程序</h2><h4 id="创建-Java-程序"><a href="#创建-Java-程序" class="headerlink" title="创建 Java 程序"></a>创建 Java 程序</h4><p> 好了,到了激动人心的时刻了.在创建 Java 程序之前我们先打开 Eclipse 对工具进行简单的设置和页面的介绍</p>
<ol>
<li><h5 id="设置字体大小和切换工作面板"><a href="#设置字体大小和切换工作面板" class="headerlink" title="设置字体大小和切换工作面板"></a>设置字体大小和切换工作面板</h5><p> 在打开后的 Eclipse 界面中.</p>
</li>
</ol>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/10.png" alt=""></p>
<p>图中的 Workspace 对应的路径是工作空间的路径,就是我们编写代码存放的目录.设置好后点击 Launch 启动 Eclipse. <strong>注意</strong>:我们在安装软件的过程中或者创建的文件夹目录都尽量不要有中文路径和特殊符号.</p>
<p>启动后关闭 welcome 界面,在 Eclipse 的上方菜单栏中找到 Window 修改字体样式和大小</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/a1.png" alt=""></p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/g1.gif" alt=""></p>
<p>修改完字体后还需要将 Eclipse 当前的工作面板切换成普通 Java 的面板,因为现在默认安装的是 JavaEE 的开发面板</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/g2.gif" alt=""></p>
<p>留下如图所示 3 块空白区域即可.如果不小心关闭了 Package Explorer 面板或者其他面板我们都可以通过 Window 中的 Show View 来找到对应的面板</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20191221170735.png" alt="20191221170735.png"></p>
<ol start="2">
<li><h5 id="创建-Java-程序-1"><a href="#创建-Java-程序-1" class="headerlink" title="创建 Java 程序"></a>创建 Java 程序</h5></li>
</ol>
<p>在左侧 Package Explorer 中右键选择 new Java Project 即可</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/a2.png" alt=""></p>
<p>在弹出的窗口中填写 Java 工程的名称.这里 Project:工程的意思(<strong>在前面我们提过写代码就像建高楼,建楼是一个工程,敲代码亦如此</strong>.)</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/a3.png" alt=""></p>
<p>填写完工程名点击 Finish,在 Package Explorer 中出现工程</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/a4.png" alt=""></p>
<p>Package Explorer : 包资源管理器.在这里我们可以认为这是用来管理当前工程中的各种文件的.</p>
<p>上图中的 src 文件夹就是我们放置 java 源代码文件的根目录.</p>
<p>创建好工程后,我们可以去观察下我们之前的工作空间目录下会有一个新建的目录就是我们当前的工程,以后我们每次创建的工程都可以在此处找到.</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/a5.png" alt=""></p>
<p>继续右键选中 src 文件夹选择 new –&gt; Package,然后填写 Package 名称,名称的格式一般为公司域名的倒写+模块名. 如 xxx.xxx.xxx.xx, com.java.firstlearn.p1.创建好 package 后,观察原项目会发现在 src 下创建了对应层级的文件夹目录,这样的好处就是我们可以<strong>方便的对当前工程下的不同作用类型的 java 源文件进行分类管理</strong>.</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/g3.gif" alt=""></p>
<p>创建好 Package 后继续选中对应的 package 右键 new –&gt; Class</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/g4.gif" alt=""></p>
<p>这里我们再去工程下的 p1 文件夹下查看是否有 FirstLearn1.java 源文件</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/a6.png" alt=""></p>
<p>好了,终于到了最后一步了,编写 Java 代码,查看运行效果.根据如下图所示输入代码.</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/g5.gif" alt=""></p>
<p>代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.firstlearn.p1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstLearn01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意 :</strong> 虽然给出了代码,但是一定要自己手动的操作几遍加深印象.代码是什么意思不需要理解我们下节课再分解.</p>
<p>但是代码的</p>
<p><strong>英文大小写</strong>和<strong>空格</strong>还有<strong>中英文符号</strong>的问题</p>
<p><strong>英文大小写</strong>和<strong>空格</strong>还有<strong>中英文符号</strong>的问题</p>
<p><strong>英文大小写</strong>和<strong>空格</strong>还有<strong>中英文符号</strong>的问题</p>
<p>一定要注意(<strong>重要的事情一定得强调三遍</strong>)</p>
<p>就是大家在敲代码的时候一定要把输入法调成英文输入来进行编写.代码的缩进处理可以使用 <strong>Tab</strong>键来进行缩进 大家可以试一下.下节课我会继续给大家讲解 Eclipse 的具体使用.今天就到这,同学们再把前面的操作回顾一下,我们下章再见.</p>
<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/a7.png" alt=""></p>
]]></content>
      <categories>
        <category>后台</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jdk</tag>
        <tag>eclipse</tag>
      </tags>
  </entry>
</search>
