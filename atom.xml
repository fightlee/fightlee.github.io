<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Here is Lee Blog.</title>
  
  <subtitle>Keep fighting,Keep your mind,Be patient,and Never give up!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fightlee.fun/"/>
  <updated>2020-11-15T04:08:11.553Z</updated>
  <id>http://fightlee.fun/</id>
  
  <author>
    <name>Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSM整合+Mybatis-Plus简单使用</title>
    <link href="http://fightlee.fun/ssm%E6%95%B4%E5%90%88.html"/>
    <id>http://fightlee.fun/ssm%E6%95%B4%E5%90%88.html</id>
    <published>2020-11-15T04:00:00.000Z</published>
    <updated>2020-11-15T04:08:11.553Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201109162346.png" alt="20201109162346"></p><a id="more"></a><h1 id="SSM整合-Mybatis-Plus简单使用"><a href="#SSM整合-Mybatis-Plus简单使用" class="headerlink" title="SSM整合+Mybatis-Plus简单使用"></a>SSM整合+Mybatis-Plus简单使用</h1><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><div style="position: relative; width: 100%; height: 0;padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=627764971&bvid=BV1yt4y1e7ym&cid=255951762&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><blockquote><p>开发工具 : IDEA 2020.2.3</p><p>服务器 : Tomcat 8.0</p><p>数据库 : Mysql 5.6</p><p>使用框架 : Spring + SpringMVC + Mybatis / Mybatis - Plus</p></blockquote><h2 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h2><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据库连接包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.39<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis相关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Ajax相关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet/jsp相关的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a>springmvc.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加SpringMVC相关的配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描Controller&amp;ControllerAdvice注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.java.ssm"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.ControllerAdvice"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--MVC的注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--MVC处理静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="spring-xml"><a href="#spring-xml" class="headerlink" title="spring.xml"></a>spring.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加Spring相关的配置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扫描SpringIOC注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.java.ssm"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.ControllerAdvice"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扫描自动注入注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置外部文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据源的配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.driverClassName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--Mybatis相关的设置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.java.ssm.domain"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mapper.xml文件的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--mapper.class接口文件的扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.java.ssm.dao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--事务相关--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事务的注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- Mybatis的参数设置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--日志 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--驼峰命名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--懒加载--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--按需加载--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="db-properties"><a href="#db-properties" class="headerlink" title="db.properties"></a>db.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">druid.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">druid.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">druid.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">druid.url</span>=<span class="string">jdbc:mysql://localhost:3306/mydb</span></span><br></pre></td></tr></table></figure><h4 id="resourecs-mapper-UserMapper-xml"><a href="#resourecs-mapper-UserMapper-xml" class="headerlink" title="resourecs/mapper/UserMapper.xml"></a>resourecs/mapper/UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.java.ssm.dao.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询单个用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        select * from users where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.ssm.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.java.ssm.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IService&lt;User&gt; userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testUser</span><span class="params">(@PathVariable Integer id)</span></span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        User user = userService.getUserById(id);</span><br><span class="line">        mv.setViewName(<span class="string">"success"</span>);</span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>,<span class="string">"this is a test msg"</span>);</span><br><span class="line">        mv.addObject(<span class="string">"user"</span>,user);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UserService接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//UserService实现类</span></span><br><span class="line"><span class="keyword">package</span> com.java.ssm.service;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImp</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.ssm.dao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">     <span class="function">User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>Mybatis虽然好用,但是对于一些基本的CRUD的操作仍需自己编写Service接口,Mapper接口和其具体实现</li></ul><h2 id="使用Mybatis-plus"><a href="#使用Mybatis-plus" class="headerlink" title="使用Mybatis-plus"></a>使用Mybatis-plus</h2><h4 id="修改pom-xml"><a href="#修改pom-xml" class="headerlink" title="修改pom.xml"></a>修改pom.xml</h4><ul><li>删掉mybatis原有的依赖和mybatis-spring的依赖,添加mybatis-plus依赖(避免冲突)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-plus相关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加 lombok 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改Dao层"><a href="#修改Dao层" class="headerlink" title="修改Dao层"></a>修改Dao层</h4><ul><li><strong>UserMapper.class</strong>继承<strong>BaseMapper.class</strong>接口即可,泛型使用当前操作的Model类型,基本的CRUD都已经在BaseMapper中实现,不用写XXMapper.xml文件和定义CRUD方法.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.ssm.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.java.ssm.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改Service层"><a href="#修改Service层" class="headerlink" title="修改Service层"></a>修改Service层</h4><ul><li>mybatis-plus提供了IService 接口,接口中同样提供了大量的CRUD业务方法.直接创建XXService实现该接口即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.ssm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.Wrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.java.ssm.dao.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.java.ssm.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImp</span> <span class="keyword">implements</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入UserMapper</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">saveBatch</span><span class="params">(Collection&lt;User&gt; entityList, <span class="keyword">int</span> batchSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">saveOrUpdateBatch</span><span class="params">(Collection&lt;User&gt; entityList, <span class="keyword">int</span> batchSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateBatchById</span><span class="params">(Collection&lt;User&gt; entityList, <span class="keyword">int</span> batchSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">saveOrUpdate</span><span class="params">(User entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getOne</span><span class="params">(Wrapper&lt;User&gt; queryWrapper, <span class="keyword">boolean</span> throwEx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMap</span><span class="params">(Wrapper&lt;User&gt; queryWrapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;V&gt; <span class="function">V <span class="title">getObj</span><span class="params">(Wrapper&lt;User&gt; queryWrapper, Function&lt;? <span class="keyword">super</span> Object, V&gt; mapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseMapper&lt;User&gt; <span class="title">getBaseMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class&lt;User&gt; <span class="title">getEntityClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取对应参数用户信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">list</span><span class="params">(Wrapper&lt;User&gt; queryWrapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectList(queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取对应ID用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getById</span><span class="params">(Serializable id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除对应ID用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeById</span><span class="params">(Serializable id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单个添加用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">save</span><span class="params">(User entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.insert(entity) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//单个更新用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateById</span><span class="params">(User entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.updateById(entity) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改Model层"><a href="#修改Model层" class="headerlink" title="修改Model层"></a>修改Model层</h4><ul><li>这里使用Lombok自动生成JavaBean的构造<ul><li>@AllArgsConstructor : 所有参数构造</li><li>@NoArgsConstructor : 无参构造</li><li>@Getter : 所有属性getter方法</li><li>@Setter : 所有属性Setter方法</li><li>@ToString : 所有属性toString方法</li><li>@TableName : 该注解为Mybatis-plus提供注解,当Bean的名称和表名不一致时,需要添加该注解,注解中的值为数据库中所对应的表名.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.ssm.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userEmail;</span><br><span class="line">    <span class="keyword">private</span> String userPassword;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller调用"><a href="#Controller调用" class="headerlink" title="Controller调用"></a>Controller调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.ssm.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.java.ssm.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IService&lt;User&gt; userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testUser</span><span class="params">(@PathVariable Integer id)</span></span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//查询单个用户</span></span><br><span class="line">        User user = userService.getById(id);</span><br><span class="line"><span class="comment">//查询所有</span></span><br><span class="line">        List&lt;User&gt; users = userService.list(<span class="keyword">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">        <span class="comment">//设置跳转视图</span></span><br><span class="line">        mv.setViewName(<span class="string">"success"</span>);</span><br><span class="line">        <span class="comment">//添加测试数据</span></span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>,<span class="string">"this is a test msg"</span>);</span><br><span class="line">        mv.addObject(<span class="string">"user"</span>,user);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">        <span class="comment">//boolean result = userService.removeById(2);</span></span><br><span class="line">        <span class="comment">//System.out.println(result);</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line">        User user1 = <span class="keyword">new</span> User();</span><br><span class="line">        user1.setId(<span class="number">3l</span>);</span><br><span class="line">        user1.setUserName(<span class="string">"lisi"</span>);</span><br><span class="line">        user1.setUserEmail(<span class="string">"lisi@qq.com"</span>);</span><br><span class="line">        user1.setUserAddress(<span class="string">"changsa"</span>);</span><br><span class="line">        user1.setUserPassword(<span class="string">"123456"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> result = userService.updateById(user1);</span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">        <span class="comment">//User user1 = new User();</span></span><br><span class="line">        <span class="comment">//user1.setUserName("lisi");</span></span><br><span class="line">        <span class="comment">//user1.setUserEmail("lisi@qq.com");</span></span><br><span class="line">        <span class="comment">//user1.setUserAddress("changsa");</span></span><br><span class="line">        <span class="comment">//user1.setUserPassword("123456");</span></span><br><span class="line">        <span class="comment">//boolean result = userService.save(user1);</span></span><br><span class="line">        <span class="comment">//System.out.println(result);</span></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201109162346.png&quot; alt=&quot;20201109162346&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="ssm" scheme="http://fightlee.fun/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>常用工具(不时更新)</title>
    <link href="http://fightlee.fun/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7.html"/>
    <id>http://fightlee.fun/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7.html</id>
    <published>2020-11-08T07:28:25.000Z</published>
    <updated>2020-11-09T08:22:26.247Z</updated>
    
    <content type="html"><![CDATA[<img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201108234057.png" alt="20201108234057" style="zoom:67%;" /><a id="more"></a><h2 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="IDEA快捷键"></a>IDEA快捷键</h2><ul><li>alt + 1 : 切换面板.</li><li>alt + [fn] + insert : 在打开的Project面板,新建包,文件夹和类.</li><li>ctrl  + e : 弹窗显示最近浏览文件</li><li>ctrl + shift + e : 弹窗显示最近修改文件</li><li>shift + enter : 无论在行的什么位置直接创建新行</li><li>ctrl + n : 只能搜索类</li><li>ctrl + shift + n : 可以搜索文件,类</li><li>ctrl + shift + alt + n : 搜索,文件,类,甚至能定位到方法</li><li>双击shift : 啥都搜索.</li><li>shift + f6 : 修改文件名</li><li>ctrl + f4 : 关闭当前页面</li><li>ctrl + h : 查看类层级结构</li><li>ctrl + shift + f4 : 关闭类结构</li><li><code>userId</code>.nn : 判断userId是否为null</li><li><code>&quot;helloWorld&quot;</code>.sout : 打印输出HelloWorld</li><li><code>100</code>.fori : 遍历100次</li><li>ctrl + f12 : 查看当前类中的方法,属性等.</li></ul><h2 id="Postwoman"><a href="#Postwoman" class="headerlink" title="Postwoman"></a>Postwoman</h2><p>Postman的开源版,现换名为<strong>hoppscotch</strong> </p><p><strong>使用步骤</strong> : </p><ol><li><p>打开VS Code,从终端进入一个目录,比如H:\tools , 复制该连接<code>https://github.com/hoppscotch/hoppscotch.git</code>,然后输入 git clone 链接地址(右键就好)</p></li><li><p>进度条走完后 , <code>npm install</code> , 讲到这里前提是要有node.js</p></li><li><p>进度条走完后, <code>npm run dev</code> 运行postwoman , 第一次运行需等待加载客户端内容.</p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201108234842.png" alt="20201108234842"></p></li><li><p>进度条走完后 , 打开上面链接网站即可使用.</p><p> <img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201108235036.png" alt="20201108235036"></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201108234057.png&quot; alt=&quot;20201108234057&quot; style=&quot;zoom:67%;&quot; /&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="idea" scheme="http://fightlee.fun/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>javaee-mybatis01</title>
    <link href="http://fightlee.fun/javaee-mybatis01.html"/>
    <id>http://fightlee.fun/javaee-mybatis01.html</id>
    <published>2020-11-08T07:27:58.000Z</published>
    <updated>2020-11-15T02:17:13.465Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201109162346.png" alt="20201109162346"></p><a id="more"></a><h1 id="javaee-Mybatis-一"><a href="#javaee-Mybatis-一" class="headerlink" title="javaee-Mybatis(一)"></a>javaee-Mybatis(一)</h1><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><h3 id="数据库-amp-db-properties"><a href="#数据库-amp-db-properties" class="headerlink" title="数据库&amp;db.properties"></a>数据库&amp;db.properties</h3><p><strong>db.properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">druid.username</span>=<span class="string">你的用户名</span></span><br><span class="line"><span class="meta">druid.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">druid.password</span>=<span class="string">你的密码</span></span><br><span class="line"><span class="meta">druid.url</span>=<span class="string">jdbc:mysql://localhost:3306/你的数据库名</span></span><br></pre></td></tr></table></figure><p><strong>数据库</strong>(随便搞几个表弄几个字段就好)</p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201109170109.png" alt="20201109170109"></p><h3 id="1-创建-Maven-工程-导入相关依赖"><a href="#1-创建-Maven-工程-导入相关依赖" class="headerlink" title="1) 创建 Maven 工程,导入相关依赖"></a>1) 创建 Maven 工程,导入相关依赖</h3><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 目前来说的mybatis最新版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Mysql数据库连接包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.39<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 测试包,暂时把scope去掉了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-在-Resources-目录下创建主配置文件"><a href="#2-在-Resources-目录下创建主配置文件" class="headerlink" title="2) 在 Resources 目录下创建主配置文件"></a>2) 在 Resources 目录下创建主配置文件</h3><p><strong>mybatis-config.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入外部资源文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置标签,设置缓存,驼峰命名,日志等.--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启 Mybatis日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- environments的配置 前期玩一下,后期交给Spring管理,不用配 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--JDBC环境配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--environment标签可以配置多个,默认选择哪个在上面那个default中配置其ID--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--选用的事务管理器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--使用db.properties配置文件中的配置,或者可以直接配置--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         扫描mapper文件</span></span><br><span class="line"><span class="comment">         resource : 指定资源文件的路径 org/mybatis/example/BlogMapper.xml</span></span><br><span class="line"><span class="comment">         class : 指定接口文件的路径  com.java.dao.UserMapper</span></span><br><span class="line"><span class="comment">         package : com.java.dao</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描单个文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/java/dao/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描整个包的文件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;package name="com.java.dao"/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在-IDEA-新建文件模板"><a href="#在-IDEA-新建文件模板" class="headerlink" title="在 IDEA 新建文件模板"></a>在 IDEA 新建文件模板</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201109165108.png" alt="20201109165108"></p><h3 id="3-在-java-文件夹中创建-dao-包-创建-UserMapper-xml"><a href="#3-在-java-文件夹中创建-dao-包-创建-UserMapper-xml" class="headerlink" title="3) 在 java 文件夹中创建 dao 包,创建 UserMapper.xml"></a>3) 在 java 文件夹中创建 dao 包,创建 UserMapper.xml</h3><p><strong>com.java.dao.UserMapper.xml</strong> , 记住先配个模板哦!</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.java.dao.UserMapper"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getAllUsers"</span> resultType=<span class="string">"com.java.bean.User"</span>&gt;</span><br><span class="line">        select * from users</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getUserById"</span> resultType=<span class="string">"com.java.bean.User"</span>&gt;</span><br><span class="line">        select * from users where userId = #&#123;userId&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h3 id="4-和-UserMapper-xml-同一文件夹中创建-UserMapper-java"><a href="#4-和-UserMapper-xml-同一文件夹中创建-UserMapper-java" class="headerlink" title="4) 和 UserMapper.xml 同一文件夹中创建 UserMapper.java"></a>4) 和 UserMapper.xml 同一文件夹中创建 UserMapper.java</h3><p><strong>com.java.dao.UserMapper.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.java.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.java.pojo.Params;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-test-包下创建测试类"><a href="#5-test-包下创建测试类" class="headerlink" title="5) test 包下创建测试类"></a>5) test 包下创建测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//加载Mybatis的主配置文件</span></span><br><span class="line">    InputStream is = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">    <span class="comment">//builder建造者模式</span></span><br><span class="line">    <span class="comment">//创建SqlSessionFactory工厂</span></span><br><span class="line">    SqlSessionFactory sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">    <span class="comment">//获取SqlSession对象,可以将其想象成为一个链接对象</span></span><br><span class="line">    SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">    <span class="comment">//配置好后先查看sqlSession是否为null,如果报错为null.排查可能出现的错误.</span></span><br><span class="line">    System.out.println(sqlSession);</span><br><span class="line">    <span class="comment">//获取UserMapper.class对应的接口文件</span></span><br><span class="line">    UserMapper userMap = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//jdk动态代理</span></span><br><span class="line">    User user = userMap.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    List&lt;User&gt; users = userMap.getAllUsers();</span><br><span class="line">    users.forEach(x-&gt; System.out.println(x));</span><br><span class="line">    <span class="comment">//关闭链接</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>主配置文件中的 mapper 扫描方式建议换成<code>package</code>扫描.可以同时扫描当前包下的所有接口和 xml 文件</li><li>如果使用<code>package</code>扫描要注意以下几点 :<ol><li><strong>XXMapper.java 接口文件的路径要和 XXMapper.xml 文件的 namespace 要一致</strong></li><li><strong>XXMapper.xml 的配置文件中的 select 等标签的 id 要和 java 接口文件对应的方法名称一致</strong></li><li><strong>配置文件的 select 等标签的返回值要和 java 接口文件对应的方法的返回值一致</strong></li></ol></li></ol><p><strong>如果以上配置都没有问题,还会出现 XXMapper.xml 文件找不到或者主配置文件找不到的情况.进行以下操作.</strong></p><ol><li>在 pom.xml 中添加插件,重新 reload maven</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--资源插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在上方菜单栏中找到<strong>Build</strong> ===&gt; <strong>Rebuild Project</strong></li></ol><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201109171229.png" alt="20201109171229"></p><ol start="3"><li>在 maven 命令中先执行<strong>clean</strong>,然后重新<strong>compile</strong>.</li></ol><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201109171152.png" alt="20201109171152"></p><ol start="4"><li>还不行,直接复制文件到<strong>target</strong>目录中</li></ol><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201109171112.png" alt="20201109171112"></p><ol start="5"><li><p>还不行,就上面的步骤多试几次.</p></li><li><p>还不行,抽个烟冷静下吧.再不行电脑都给他砸咯.</p></li></ol><h2 id="传入参数"><a href="#传入参数" class="headerlink" title="传入参数"></a>传入参数</h2><p> 以上栗中的 UserMapper.xml 文件为例(注释中为 UserMapper.class 接口文件中对应方法)</p><h3 id="一-1-个参数"><a href="#一-1-个参数" class="headerlink" title="一 .1 个参数"></a>一 .1 个参数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- #&#123;name&#125;中的name 可以随便写 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- User getUserById(Integer userId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultType</span>=<span class="string">"com.java.bean.User"</span>&gt;</span></span><br><span class="line">        select * from users where userId = #&#123;a&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二-多个参数-Param-注解"><a href="#二-多个参数-Param-注解" class="headerlink" title="二.多个参数,@Param 注解"></a>二.多个参数,@Param 注解</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过@Param注解来实现 ,#&#123;name&#125;中的name 要和 @Param("name") 中的name一致 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--User getUserByUserNameAndPassword(@Param("name") String userName,@Param("pwd") String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByUserNameAndPassword"</span> <span class="attr">resultType</span>=<span class="string">"com.java.bean.User"</span>&gt;</span></span><br><span class="line">    select * from users where userName = #&#123;name&#125; and password = #&#123;pwd&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三-多个参数-Vo-传参"><a href="#三-多个参数-Vo-传参" class="headerlink" title="三.多个参数,Vo 传参"></a>三.多个参数,Vo 传参</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 封装一个VO(值对象,专门用于参数传值使用所封装的对象)对象 , #&#123;name&#125;中的name 要和 对象中的属性名称一致 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">class Params &#123;</span></span><br><span class="line"><span class="comment">    private String userName;</span></span><br><span class="line"><span class="comment">    private String password;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--User getUserByParams(Params params); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByParams"</span> <span class="attr">resultType</span>=<span class="string">"com.java.bean.User"</span>&gt;</span></span><br><span class="line">    select * from users where userName = #&#123;userName&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="四-多个参数-Map-传参"><a href="#四-多个参数-Map-传参" class="headerlink" title="四.多个参数,Map 传参"></a>四.多个参数,Map 传参</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过Map对象传参, #&#123;name&#125;中的name 要和 Map对象中的key值一致 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> Map&lt;String,String&gt; map = new HashMap();</span></span><br><span class="line"><span class="comment">        map.put("uName","zhangsan");</span></span><br><span class="line"><span class="comment">        map.put("uPwd","123456");</span></span><br><span class="line"><span class="comment">        User user = userMap.getUserByMap(map);</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- User getUserByMap(Map&lt;String,String&gt; map); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByMap"</span> <span class="attr">resultType</span>=<span class="string">"com.java.bean.User"</span>&gt;</span></span><br><span class="line">    select * from users where userName = #&#123;uName&#125; and password = #&#123;uPwd&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="五-位置传参"><a href="#五-位置传参" class="headerlink" title="五.位置传参"></a>五.位置传参</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过位置传参.4个可选值 #&#123;arg0&#125; #&#123;arg1&#125; #&#123;param1&#125; #&#123;param2&#125; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- User getUserByLocation(String userName,String password); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByLocation"</span> <span class="attr">resultType</span>=<span class="string">"com.java.bean.User"</span>&gt;</span></span><br><span class="line">    select * from users where userName = #&#123;arg0&#125; and password = #&#123;arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="六-和-的区别"><a href="#六-和-的区别" class="headerlink" title="六.$和#的区别"></a>六.$和#的区别</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> #&#123;&#125;  使用  ? 占位符 ,底层使用 PreparedStatement 对象, 解决SQL注入的问题</span></span><br><span class="line"><span class="comment"> $&#123;&#125;  相当于直接拼串 ,底层使用 Statement 对象, 动态处理表名,或者列名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- User getUserBy$(String userName,String password); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserBy$"</span> <span class="attr">resultType</span>=<span class="string">"com.java.bean.User"</span>&gt;</span></span><br><span class="line">    select * from users where userName = $&#123;arg0&#125; and password = $&#123;arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- List&lt;User&gt; getUserBy$Order(String colName);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserBy$Order"</span> <span class="attr">resultType</span>=<span class="string">"com.java.bean.User"</span>&gt;</span></span><br><span class="line">    select * from users order by $&#123;colName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输出参数"><a href="#输出参数" class="headerlink" title="输出参数"></a>输出参数</h2><h3 id="ResultType"><a href="#ResultType" class="headerlink" title="ResultType"></a>ResultType</h3><h4 id="返回单个对象"><a href="#返回单个对象" class="headerlink" title="返回单个对象"></a>返回单个对象</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById(Integer id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultType</span>=<span class="string">"com.java.bean.User"</span>&gt;</span></span><br><span class="line">    select * from users where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="返回集合对象"><a href="#返回集合对象" class="headerlink" title="返回集合对象"></a>返回集合对象</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByName(String userName);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByName"</span> <span class="attr">resultType</span>=<span class="string">"com.java.bean.User"</span>&gt;</span></span><br><span class="line">    select * from users where user_name like #&#123;userName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="返回-Map-对象"><a href="#返回-Map-对象" class="headerlink" title="返回 Map 对象"></a>返回 Map 对象</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">@MapKey("id") // 通过MapKey指定返回Map集合的key值</span></span><br><span class="line"><span class="comment">Map&lt;Integer,User&gt; getUserByNameReturnMap(String userName)</span></span><br><span class="line"><span class="comment">;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByNameReturnMap"</span> <span class="attr">resultType</span>=<span class="string">"com.java.bean.User"</span>&gt;</span></span><br><span class="line">    select * from users where user_name like #&#123;userName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ResultMap"><a href="#ResultMap" class="headerlink" title="ResultMap"></a>ResultMap</h3><h4 id="Model-层关系"><a href="#Model-层关系" class="headerlink" title="Model 层关系"></a>Model 层关系</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201115094940.png" alt="20201115094940"></p><p><strong>Level.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Level</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String levelName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;<span class="comment">//1对多</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLevelName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> levelName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLevelName</span><span class="params">(String levelName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.levelName = levelName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.users = users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Level&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", levelName='"</span> + levelName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", users="</span> + users +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Role.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;<span class="comment">//多对多</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleName</span><span class="params">(String roleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleName = roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.users = users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Role&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", roleName='"</span> + roleName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", users="</span> + users +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>User.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line">    <span class="keyword">private</span> String userEmail;</span><br><span class="line">    <span class="keyword">private</span> String userPassword;</span><br><span class="line">    <span class="keyword">private</span> Level level;<span class="comment">//1对1关联</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;<span class="comment">//多对多</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String userName, String userAddress, String userEmail, String userPassword)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.userAddress = userAddress;</span><br><span class="line">        <span class="keyword">this</span>.userEmail = userEmail;</span><br><span class="line">        <span class="keyword">this</span>.userPassword = userPassword;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserAddress</span><span class="params">(String userAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userAddress = userAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userEmail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserEmail</span><span class="params">(String userEmail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userEmail = userEmail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userPassword;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserPassword</span><span class="params">(String userPassword)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userPassword = userPassword;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Level <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLevel</span><span class="params">(Level level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(List&lt;Role&gt; roles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", userName='"</span> + userName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", userAddress='"</span> + userAddress + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", userEmail='"</span> + userEmail + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", userPassword='"</span> + userPassword + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", level="</span> + level +</span><br><span class="line">                <span class="string">", roles="</span> + roles +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><h5 id="级联映射"><a href="#级联映射" class="headerlink" title="级联映射"></a>级联映射</h5><ul><li>result中的<code>column</code>为查询语句中查询出的列名,如果有别名使用别名,<code>property</code>为当前属性所属类的属性名</li><li><code>javaType</code>为关联属性类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap1"</span> <span class="attr">type</span>=<span class="string">"com.java.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--主键配置 column : 列名  property: Java中的属性名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--非主键配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">property</span>=<span class="string">"userName"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_email"</span> <span class="attr">property</span>=<span class="string">"userEmail"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_password"</span> <span class="attr">property</span>=<span class="string">"userPassword"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_address"</span> <span class="attr">property</span>=<span class="string">"userAddress"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"lid"</span> <span class="attr">property</span>=<span class="string">"level.id"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"lname"</span> <span class="attr">property</span>=<span class="string">"level.levelName"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--级联映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByIdWithResultMap1"</span> <span class="attr">resultMap</span>=<span class="string">"userMap1"</span>&gt;</span></span><br><span class="line">    select u.*,l.id as lid , l.level_name as lname from users u , level l where u.level_id = l.id and u.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="关联映射"><a href="#关联映射" class="headerlink" title="关联映射"></a>关联映射</h5><ul><li>使用<code>association</code>标签来关联当前对象中的1对1对象属性<code>level</code>,关联的属性<code>column</code>仍然为查询出的列名, <code>property</code>为 Level对象的属性名</li><li>缺点 : 不能使用懒加载</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap2"</span> <span class="attr">type</span>=<span class="string">"com.java.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--主键配置 column : 列名  property: Java中的属性名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--非主键配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">property</span>=<span class="string">"userName"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_email"</span> <span class="attr">property</span>=<span class="string">"userEmail"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_password"</span> <span class="attr">property</span>=<span class="string">"userPassword"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_address"</span> <span class="attr">property</span>=<span class="string">"userAddress"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"level"</span> <span class="attr">javaType</span>=<span class="string">"com.java.domain.Level"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"lid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"lname"</span> <span class="attr">property</span>=<span class="string">"levelName"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--关联映射 === 第一种方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByIdWithResultMap2"</span> <span class="attr">resultMap</span>=<span class="string">"userMap2"</span>&gt;</span></span><br><span class="line">    select u.*,l.id as lid , l.level_name as lname from users u , level l where u.level_id = l.id and u.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><ul><li>使用<code>association</code>标签中的<code>select</code>属性来标识使用Level命名空间下的方法来查询Level的属性值.</li><li><code>javaType</code>为关联属性类型</li><li>通过<code>column</code>属性中的列名将查询出的Level的id传递给子查询语句,注意,这里的名称仍然是查询出的列名.</li><li>可以通过打开Mybatis-config的配置来使用对象延迟加载.使用到Level对象才会发送SQL语句查询Level对象信息.</li></ul><p><strong>UserMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap3"</span> <span class="attr">type</span>=<span class="string">"com.java.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--主键配置 column : 列名  property: Java中的属性名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--非主键配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">property</span>=<span class="string">"userName"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_email"</span> <span class="attr">property</span>=<span class="string">"userEmail"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_password"</span> <span class="attr">property</span>=<span class="string">"userPassword"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_address"</span> <span class="attr">property</span>=<span class="string">"userAddress"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"level"</span> <span class="attr">javaType</span>=<span class="string">"com.java.domain.Level"</span> <span class="attr">select</span>=<span class="string">"com.java.dao.LevelMapper.getLevelById"</span> <span class="attr">column</span>=<span class="string">"level_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--关联映射 === 第二种方式 子查询的方式,分布查询,按需查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByIdWithResultMap3"</span> <span class="attr">resultMap</span>=<span class="string">"userMap3"</span>&gt;</span></span><br><span class="line">    select * from users where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>LevelMapper.xml</strong></p><ul><li>通过<code>getLevelById</code>的子查询,该方法所需的<code>id</code>值为UserMapper.xml中<code>association</code>标签里的<code>column</code>的列</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Level getLevelById(Integer id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getLevelById"</span> <span class="attr">resultType</span>=<span class="string">"com.java.domain.Level"</span>&gt;</span></span><br><span class="line">    select * from level where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Mybatis-config.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--驼峰命名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--懒加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--按需加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><h5 id="关联映射-1"><a href="#关联映射-1" class="headerlink" title="关联映射"></a>关联映射</h5><ul><li>1对多关联映射,使用<code>collection</code>标签来定义关联属性<code>users</code>,<code>ofType</code>为该属性所属类型</li><li>缺点仍然是无法使用懒加载.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"levelMap1"</span> <span class="attr">type</span>=<span class="string">"com.java.domain.Level"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"level_name"</span> <span class="attr">property</span>=<span class="string">"levelName"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1对多的关联--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"users"</span> <span class="attr">ofType</span>=<span class="string">"com.java.domain.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uname"</span> <span class="attr">property</span>=<span class="string">"userName"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uemail"</span> <span class="attr">property</span>=<span class="string">"userEmail"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"upwd"</span> <span class="attr">property</span>=<span class="string">"userPassword"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uaddr"</span> <span class="attr">property</span>=<span class="string">"userAddress"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--1对多的关联映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getLevelByIdWithResultMap1"</span> <span class="attr">resultMap</span>=<span class="string">"levelMap1"</span>&gt;</span></span><br><span class="line">    select l.*,u.id as uid ,u.user_name as uname,u.user_email as uemail , u.user_address as uaddr , u.user_password as upwd from users u , level l where u.level_id = l.id and l.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="子查询-1"><a href="#子查询-1" class="headerlink" title="子查询"></a>子查询</h5><p><strong>LevelMapper.xml</strong></p><ul><li>和1对1的没什么太大区别 , 注意使用<code>collection</code>标签即可</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"levelMap2"</span> <span class="attr">type</span>=<span class="string">"com.java.domain.Level"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"level_name"</span> <span class="attr">property</span>=<span class="string">"levelName"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1对多的关联--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"users"</span> <span class="attr">select</span>=<span class="string">"com.java.dao.UserMapper.getUserByLevelId"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--1对多的子查询方式,按需加载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getLevelByIdWithResultMap2"</span> <span class="attr">resultMap</span>=<span class="string">"levelMap2"</span>&gt;</span></span><br><span class="line">    select * from level where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>UserMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--level_id应该通过level的查询发送过来--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByLevelId"</span> <span class="attr">resultType</span>=<span class="string">"com.java.domain.User"</span>&gt;</span></span><br><span class="line">    select * from users where level_id = #&#123;level_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><h5 id="关联映射-2"><a href="#关联映射-2" class="headerlink" title="关联映射"></a>关联映射</h5><ul><li>通过中间表<code>user_role</code>来进行多表连接查询</li><li>没有懒加载</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap4"</span> <span class="attr">type</span>=<span class="string">"com.java.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--主键配置 column : 列名  property: Java中的属性名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--非主键配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">property</span>=<span class="string">"userName"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_email"</span> <span class="attr">property</span>=<span class="string">"userEmail"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_password"</span> <span class="attr">property</span>=<span class="string">"userPassword"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_address"</span> <span class="attr">property</span>=<span class="string">"userAddress"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"roles"</span> <span class="attr">ofType</span>=<span class="string">"com.java.domain.Role"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"rid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"rname"</span> <span class="attr">property</span>=<span class="string">"roleName"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--在查询1用户的同时,查出当前这个用户所具备的角色</span></span><br><span class="line"><span class="comment">        使用多表查询没有懒加载.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByIdWithRole"</span> <span class="attr">resultMap</span>=<span class="string">"userMap4"</span>&gt;</span></span><br><span class="line">    select u.*,r.id as rid,r.role_name as rname</span><br><span class="line">    from users u</span><br><span class="line">    left join user_role ur on ur.uid = u.id</span><br><span class="line">    left join roles1 r on r.id = ur.rid</span><br><span class="line">    where u.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="子查询-2"><a href="#子查询-2" class="headerlink" title="子查询"></a>子查询</h5><ul><li>和1对多一致</li><li>再Java中的方法里User需要返回List</li></ul><p><strong>UserMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap5"</span> <span class="attr">type</span>=<span class="string">"com.java.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--主键配置 column : 列名  property: Java中的属性名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--非主键配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">property</span>=<span class="string">"userName"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_email"</span> <span class="attr">property</span>=<span class="string">"userEmail"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_password"</span> <span class="attr">property</span>=<span class="string">"userPassword"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_address"</span> <span class="attr">property</span>=<span class="string">"userAddress"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"roles"</span> <span class="attr">ofType</span>=<span class="string">"com.java.domain.Role"</span> <span class="attr">select</span>=<span class="string">"com.java.dao.RoleMapper.getRoleById"</span> <span class="attr">column</span>=<span class="string">"rid"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByIdWithLazy"</span> <span class="attr">resultMap</span>=<span class="string">"userMap5"</span>&gt;</span></span><br><span class="line">    select u.*,ur.rid as rid</span><br><span class="line">    from users u</span><br><span class="line">    left join user_role ur on ur.uid = u.id</span><br><span class="line">    where u.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>RoleMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getRoleById"</span> <span class="attr">resultType</span>=<span class="string">"com.java.domain.Role"</span>&gt;</span></span><br><span class="line">    select * from roles1 where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>UserMapper.xml</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByIdWithLazy</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="动态-SQL"><a href="#动态-SQL" class="headerlink" title="动态 SQL"></a>动态 SQL</h2><h3 id="if-where"><a href="#if-where" class="headerlink" title="if,where"></a>if,where</h3><ul><li>使用<code>if</code>来通过判断动态拼接查询条件</li><li>使用<code>where</code>动态的删除查询条件前的<code>and</code>符号</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByNameAndPassword"</span> <span class="attr">resultType</span>=<span class="string">"com.java.domain.User"</span>&gt;</span></span><br><span class="line">    select * from users</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name.length &gt; 0"</span>&gt;</span></span><br><span class="line">            user_name = #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"pwd != null and pwd.length &gt; 0"</span>&gt;</span></span><br><span class="line">            and user_password = #&#123;pwd&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><ul><li>collection  : 值为3种, <code>arg0</code>, <code>list</code>, <code>collection</code></li><li>close : 循环结束后添加的值</li><li>open : 循环开始前添加的值</li><li>separator : 循环期间添加的分隔符</li><li>item : 遍历出的内容</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByIds"</span> <span class="attr">resultType</span>=<span class="string">"com.java.domain.User"</span>&gt;</span></span><br><span class="line">    select * from users where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"i"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        #&#123;i&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><ul><li>使用<code>set</code>+ <code>if</code>动态拼接查询条件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span>&gt;</span></span><br><span class="line">    update users</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName != null and userName != ''"</span>&gt;</span></span><br><span class="line">            user_name = #&#123;userName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userPassword != null and userPassword != ''"</span>&gt;</span></span><br><span class="line">            , user_password = #&#123;userPassword&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userEmail != null and userEmail != ''"</span>&gt;</span></span><br><span class="line">            , user_email = #&#123;userEmail&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userAddress != null and userAddress != ''"</span>&gt;</span></span><br><span class="line">            , user_address = #&#123;userAddress&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="sql-amp-bind"><a href="#sql-amp-bind" class="headerlink" title="sql&amp;bind"></a>sql&amp;bind</h3><ul><li>使用<code>sql</code>将mapper.xml文件中相同的sql片段抽取</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"selectAll"</span>&gt;</span></span><br><span class="line">    select * from users</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>include</code>引用<code>sql</code>中的片段</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultType</span>=<span class="string">"com.java.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectAll"</span>/&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用<code>bind</code> 处理传入的数据</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- UserInfo getUserInfoByNickName(String nickName); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserInfoByNickName"</span> <span class="attr">resultMap</span>=<span class="string">"UserBaseMap"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bind : 用来对传入的字符进行提前的处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"_nickName"</span> <span class="attr">value</span>=<span class="string">"'%' + nickName + '%'"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"baseSelectSql"</span>/&gt;</span></span><br><span class="line">    where nick_name like #&#123;_nickName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Mybatis-缓存"><a href="#Mybatis-缓存" class="headerlink" title="Mybatis 缓存"></a>Mybatis 缓存</h2><blockquote><p>概念 : 使用 Mybatis 查询相同数据时,根据使用的缓存级别不同来缓存该数据对象.下一次查询相同数据时,直接从缓存中查询数据,不需要再次访问数据库.</p></blockquote><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><ul><li>session 级别缓存</li><li>不同 session 缓存失效</li><li>查询同一数据之间进行了增删改的操作,缓存失效</li><li>默认开启,不需要设置</li></ul><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><ul><li><p>namespace 级别缓存</p></li><li><p>不同 session 缓存依旧生效</p></li><li><p>需要在对应的XXMapper.xml文件中添加<code>cache</code>标签</p><ul><li>eviction : 使用的缓存策略</li><li>readOnly : 是否直接缓存对象引用</li><li>size : 缓存大小</li><li>type : 指定第三方缓存的类文件</li></ul><p>…</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">"LRU"</span> <span class="attr">readOnly</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201109162346.png&quot; alt=&quot;20201109162346&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="mybatis" scheme="http://fightlee.fun/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>es6-01</title>
    <link href="http://fightlee.fun/es6-01.html"/>
    <id>http://fightlee.fun/es6-01.html</id>
    <published>2020-11-05T20:43:34.000Z</published>
    <updated>2020-11-15T04:06:45.393Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201028004154.png" alt="20201028004154"></p><a id="more"></a><h1 id="ECMAScript-6-一"><a href="#ECMAScript-6-一" class="headerlink" title="ECMAScript 6(一)"></a>ECMAScript 6(一)</h1><h2 id="迭代器-amp-生成器-amp-Promise视频"><a href="#迭代器-amp-生成器-amp-Promise视频" class="headerlink" title="迭代器&amp;生成器&amp;Promise视频"></a>迭代器&amp;生成器&amp;Promise视频</h2><div style="position: relative; width: 100%; height: 0;padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=585209791&bvid=BV1Nz4y1y7Np&cid=254514086&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="1个以上参数-只有1个return-或者一条语句"><a href="#1个以上参数-只有1个return-或者一条语句" class="headerlink" title="1个以上参数,只有1个return,或者一条语句"></a>1个以上参数,只有1个return,或者一条语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test1 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(test1(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><h4 id="1个参数"><a href="#1个参数" class="headerlink" title="1个参数"></a>1个参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> test1 = <span class="function"><span class="params">a</span> =&gt;</span> <span class="built_in">console</span>.log(a);</span><br><span class="line">test(<span class="number">1</span>)</span><br><span class="line">test1(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="没有参数"><a href="#没有参数" class="headerlink" title="没有参数"></a>没有参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> test1 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'World'</span>);</span><br><span class="line">test()</span><br><span class="line">test1()</span><br></pre></td></tr></table></figure><h4 id="多条语句"><a href="#多条语句" class="headerlink" title="多条语句"></a>多条语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'World'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'GoodBye'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> test1 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'World'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'GoodBye'</span>)</span><br><span class="line">&#125;;</span><br><span class="line">test()</span><br><span class="line">test1()</span><br></pre></td></tr></table></figure><h4 id="直接返回对象"><a href="#直接返回对象" class="headerlink" title="直接返回对象"></a>直接返回对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name: <span class="string">'zhangsan'</span>,</span><br><span class="line">        age: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//需要在大括号外加上小括号,因为大括号会被解析为代码块</span></span><br><span class="line"><span class="keyword">var</span> test1 = <span class="function"><span class="params">()</span>=&gt;</span>(&#123;<span class="attr">name</span>:<span class="string">'lisi'</span>,<span class="attr">age</span>:<span class="number">12</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test());</span><br><span class="line"><span class="built_in">console</span>.log(test1());</span><br></pre></td></tr></table></figure><h4 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的this</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//window</span></span><br><span class="line">        <span class="keyword">this</span>.age++;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);<span class="comment">//NAN</span></span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//Person</span></span><br><span class="line">        <span class="keyword">this</span>.age++</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);<span class="comment">//13</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="number">12</span>);</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数参数—–默认值"><a href="#函数参数—–默认值" class="headerlink" title="函数参数—–默认值"></a>函数参数—–默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a = <span class="number">1</span>,b = <span class="number">2</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line">test()<span class="comment">//3</span></span><br><span class="line">test(<span class="number">3</span>,<span class="number">4</span>);<span class="comment">//7</span></span><br></pre></td></tr></table></figure><h3 id="函数参数—–剩余参数-rest"><a href="#函数参数—–剩余参数-rest" class="headerlink" title="函数参数—–剩余参数 ...rest"></a>函数参数—–剩余参数 <code>...rest</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test1 = <span class="function"><span class="keyword">function</span>(<span class="params">a,b,...args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args);<span class="comment">//3,4,5,6</span></span><br><span class="line">&#125;</span><br><span class="line">test1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.pop.call(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//箭头函数不能访问arguments数组,所以使用剩余参数来获取</span></span><br><span class="line"><span class="keyword">var</span> test1 = <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="built_in">Array</span>.prototype.pop.call(args);</span><br></pre></td></tr></table></figure><h4 id="剩余参数和arguments"><a href="#剩余参数和arguments" class="headerlink" title="剩余参数和arguments"></a>剩余参数和arguments</h4><ul><li>arguments是包含了所有参数,剩余参数只包含没有对应映射的参数</li><li>arguments不是数组对象,剩余参数为数组对象,可以使用数组中的方法</li><li>使用了剩余参数后,剩余参数必须是最后一个参数</li></ul><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符 ..."></a>扩展运算符 <code>...</code></h3><ul><li><code>...</code> 用来展开数组,转为<code>,</code>拼接的参数形式</li><li><code>...rest</code> 用来将 <code>,</code>拼接的参数转为数组</li><li>将字符串或者nodeList转为真正的数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> show = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;<span class="comment">//将传入的参数转为数组</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a,b);<span class="comment">//1,2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移出数组最后一个元素</span></span><br><span class="line">    args.pop();</span><br><span class="line">    <span class="comment">//将数组转为对应个数的参数</span></span><br><span class="line">    inner(...args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</span><br><span class="line"><span class="keyword">var</span> arry = [...lis];<span class="comment">//或者使用Array.from(lis);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'HelloWorld!'</span>;</span><br><span class="line"><span class="keyword">var</span> strArray = [...str];</span><br></pre></td></tr></table></figure><h2 id="let-amp-const-amp-var"><a href="#let-amp-const-amp-var" class="headerlink" title="let&amp;const&amp;var"></a><code>let</code>&amp;<code>const</code>&amp;<code>var</code></h2><ul><li>let声明的变量只在它所在的代码块有效</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><ul><li>let声明的变量没有变量声明提升.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//报错</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//undefined</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>let声明变量后会在当前块级作用域内形成”暂时性死区”,当前域内的值不受外部影响.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#123;</span><br><span class="line">    a = <span class="number">1</span>;<span class="comment">//报错</span></span><br><span class="line">    <span class="keyword">let</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同一作用域下let声明的变量名称不能重复.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><ul><li>const声明常量,和Java一样常量赋值后,其数值不能改变,要注意的是,也和Java一样,const声明的对象,地址不能变,但其中的数据可以发生改变</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="number">2</span>;<span class="comment">//报错</span></span><br><span class="line"><span class="keyword">const</span> b = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line">b.a = <span class="number">2</span>;<span class="comment">//正常运行</span></span><br><span class="line"><span class="keyword">let</span> c = &#123;&#125;;</span><br><span class="line">b = c;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><ul><li>还是和Java一样,一般在某个类中声明的常量希望在其他类中也能使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java用法</span></span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GlobalConstant</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ERROR_MSG = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sout(GlobalConstant.ERROR_MSG);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    es6中使用const声明的常量也可以在其他模块中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es用法</span></span><br><span class="line"><span class="comment">//globalconstants.js中声明</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ERROR_MSG = <span class="number">1</span>;<span class="comment">//导出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//其他模块</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">'./globalconstants.js'</span>;<span class="comment">//导入</span></span><br><span class="line">clog(constants.ERROR_MSG)</span><br></pre></td></tr></table></figure><ul><li>全局对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es5中,如果没有使用var声明的变量即为window的属性值</span></span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">window</span>.a = <span class="number">2</span>;</span><br><span class="line">clog(a)<span class="comment">//2</span></span><br><span class="line"><span class="comment">//使用let声明的全局变量不是window的属性</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">window</span>.b = <span class="number">2</span>;</span><br><span class="line">clog(b);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h3 id="解构赋值—-数组"><a href="#解构赋值—-数组" class="headerlink" title="解构赋值—-数组"></a>解构赋值—-数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统赋值</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//解构赋值----数组 (根据位置取值)</span></span><br><span class="line"><span class="keyword">let</span> [d,e,f] = [<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">'laoba'</span>&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c,d,e,f.id);<span class="comment">//1 2 3 "zhangsan" "lisi" 1</span></span><br><span class="line"><span class="comment">//数组嵌套赋值</span></span><br><span class="line"><span class="keyword">let</span> [x,[y,z]] = [<span class="literal">true</span>,[&#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">'laowang'</span>&#125;,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]];</span><br><span class="line"><span class="built_in">console</span>.log(x,y,z);<span class="comment">//true &#123;id: 2, name: "laowang"&#125; (3) [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h3 id="解构赋值—-对象"><a href="#解构赋值—-对象" class="headerlink" title="解构赋值—-对象"></a>解构赋值—-对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解构赋值----对象 (根据名称取值)</span></span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = &#123;<span class="attr">age</span>:<span class="number">12</span>,<span class="attr">name</span>:<span class="string">'laoba'</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name,age);<span class="comment">//laoba 12</span></span><br><span class="line"><span class="comment">//如果名称不一致,可以按如下这么写</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">userId</span>:id&#125; =&#123;<span class="attr">userId</span>:<span class="number">12</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(id);<span class="comment">//12</span></span><br><span class="line"><span class="comment">//对象嵌套赋值</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> children = &#123;&#125;;</span><br><span class="line"><span class="comment">//不能再使用let,标识符person已经使用let创建过,大括号前必须加(),不然JavaScript会认为其是代码块</span></span><br><span class="line">(&#123;</span><br><span class="line">    name: person.name,</span><br><span class="line">    age: children.age</span><br><span class="line">&#125; = &#123;</span><br><span class="line">    name: <span class="string">'zhangsan'</span>,</span><br><span class="line">    age: <span class="number">12</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(person.name,children.age);<span class="comment">//zhangsan</span></span><br></pre></td></tr></table></figure><h3 id="字符串解构"><a href="#字符串解构" class="headerlink" title="字符串解构"></a>字符串解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串解构</span></span><br><span class="line"><span class="comment">//解析字符串内容</span></span><br><span class="line"><span class="keyword">const</span> [a,b,c] = <span class="string">'Tom'</span>;</span><br><span class="line">clog(a,b,c);<span class="comment">//'T' 'o' 'm'</span></span><br><span class="line"><span class="comment">//解析属性</span></span><br><span class="line"><span class="keyword">const</span> &#123;属性名 : 变量名&#125; = 值;</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">length</span> : len&#125; = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(len);</span><br><span class="line"></span><br><span class="line">注意 : 如果等号右边的值不是对象,就会先将其转换成对象,<span class="literal">undefined</span>和<span class="literal">null</span>无法转成对象,就报错.</span><br><span class="line"><span class="keyword">let</span> [a] = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>:x&#125; = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h3 id="函数参数解构赋值"><a href="#函数参数解构赋值" class="headerlink" title="函数参数解构赋值"></a>函数参数解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统赋值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解构赋值 --- 这里不是传数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params">[a,b]</span>)</span>&#123;<span class="comment">// = [1,3]</span></span><br><span class="line">    <span class="built_in">console</span>.log(a,b);</span><br><span class="line">&#125;</span><br><span class="line">test1([<span class="number">1</span>,<span class="number">3</span>]);</span><br></pre></td></tr></table></figure><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><h4 id="交换值"><a href="#交换值" class="headerlink" title="交换值"></a>交换值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>, y = <span class="number">2</span>;</span><br><span class="line">[x,y] = [y,x];</span><br><span class="line"><span class="built_in">console</span>.log(x,y);</span><br></pre></td></tr></table></figure><h4 id="函数返回多个值"><a href="#函数返回多个值" class="headerlink" title="函数返回多个值"></a>函数返回多个值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回值是数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a,b,c] = test();</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值为对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name: <span class="string">'zhangsan'</span>,</span><br><span class="line">        age: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = test1();</span><br><span class="line"><span class="built_in">console</span>.log(name,age);</span><br></pre></td></tr></table></figure><h4 id="定义函数参数"><a href="#定义函数参数" class="headerlink" title="定义函数参数"></a>定义函数参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">[a,b,c]</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c.name);</span><br><span class="line">&#125;</span><br><span class="line">test([<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,&#123;<span class="attr">name</span>:<span class="string">'wangwu'</span>&#125;]);</span><br></pre></td></tr></table></figure><h4 id="接收JSON数据–对象解构"><a href="#接收JSON数据–对象解构" class="headerlink" title="接收JSON数据–对象解构"></a>接收JSON数据–对象解构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义Json数据</span></span><br><span class="line"><span class="keyword">const</span> jsonData = &#123;</span><br><span class="line">    resultCode: <span class="number">404</span>,</span><br><span class="line">    resultData: [&#123;</span><br><span class="line">        name: <span class="string">'zhangsan'</span>,</span><br><span class="line">        age: <span class="number">12</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        name:<span class="string">'lisi'</span>,</span><br><span class="line">        age :<span class="number">13</span></span><br><span class="line">    &#125; ],</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接收</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">resultCode</span>:code,<span class="attr">resultData</span>:data&#125; = jsonData;</span><br><span class="line"><span class="built_in">console</span>.log(code,data);</span><br></pre></td></tr></table></figure><h4 id="遍历Map"><a href="#遍历Map" class="headerlink" title="遍历Map"></a>遍历Map</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">'name'</span>,<span class="string">'zhangsan'</span>);</span><br><span class="line">map.set(<span class="string">'age'</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通遍历 , 结果为数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> map)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历map的key</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> map.keys())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历map的value</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> map.values())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用解构遍历,同时遍历键值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> map)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只获取key</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key] <span class="keyword">of</span> map)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只获取value</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [,value] <span class="keyword">of</span> map)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line">map.forEach(<span class="function">(<span class="params">x,y</span>)=&gt;</span><span class="built_in">console</span>.log(x,y))</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="startsWith-amp-endsWith-amp-includes-amp-repeat"><a href="#startsWith-amp-endsWith-amp-includes-amp-repeat" class="headerlink" title="startsWith()&amp;endsWith()&amp;includes()&amp;repeat()"></a><code>startsWith()</code>&amp;<code>endsWith()</code>&amp;<code>includes()</code>&amp;<code>repeat()</code></h3><ul><li>startsWith(str) : 字符串是否以str开头</li><li>endsWith(str) : 是否以str结尾</li><li>includes(str) : 是否包含该字符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'http://www.baidu.com'</span>.startsWith(<span class="string">'http'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'http://www.baidu.com'</span>.endsWith(<span class="string">'baidu'</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'http://www.baidu'</span>.endsWith(<span class="string">'baidu'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'http://www.baidu.com'</span>.includes(<span class="string">'o'</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>includes(str,startIndex) : 从startIndex开始搜索,是否包含str,包头</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'http://www.baidu.com'</span>.includes(<span class="string">'w'</span>,<span class="number">12</span>));</span><br></pre></td></tr></table></figure><ul><li>repeat(n) : 将该字符串重复n次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'不讲武德'</span>.repeat(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统输出方式</span></span><br><span class="line"><span class="keyword">const</span> test = <span class="function"><span class="keyword">function</span>(<span class="params">username,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> username + <span class="string">'今年'</span> + age + <span class="string">"岁啦!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用模板字符串</span></span><br><span class="line"><span class="keyword">const</span> test1 = <span class="function"><span class="keyword">function</span>(<span class="params">username,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;username&#125;</span>今年<span class="subst">$&#123;age&#125;</span>岁啦!`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> username = <span class="string">'zhangsan'</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test(username,age));</span><br><span class="line"><span class="built_in">console</span>.log(test1(username,age));</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="Array-from-amp-Array-of"><a href="#Array-from-amp-Array-of" class="headerlink" title="Array.from() &amp; Array.of()"></a><code>Array.from()</code> &amp; <code>Array.of()</code></h3><ul><li><code>Array.from(value)</code> : 将类似数组的对象转成真正的数组.</li><li><code>Array.of(value)</code> : 将值转换成数组</li></ul><p><strong>Array.from()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Array.from(value)</span></span><br><span class="line"><span class="comment">//arguments</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">    newArr.forEach(<span class="function"><span class="params">x</span>=&gt;</span><span class="built_in">console</span>.log(x));</span><br><span class="line">    newArr.push(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(newArr);</span><br><span class="line">    <span class="keyword">var</span> sortArr = newArr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>b-a);</span><br><span class="line">    <span class="built_in">console</span>.log(sortArr);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">11</span>,<span class="number">22</span>,<span class="number">13</span>,<span class="number">34</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//nodeList</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</span><br><span class="line">    <span class="keyword">var</span> lisArray = <span class="built_in">Array</span>.from(lis);</span><br><span class="line">    <span class="built_in">console</span>.log(lisArray[<span class="number">0</span>].innerHTML);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="comment">//Array.from(value,function()&#123;&#125;) ---&gt;此操作类似map()方法</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>,x =&gt; x + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(newArr);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">//2,3,4</span></span><br></pre></td></tr></table></figure><p><strong>Array.of()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主要用来替代new Array()的不足</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//[1,2,3]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>);<span class="comment">//[3]</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>)<span class="comment">//[,,,]</span></span><br></pre></td></tr></table></figure><h3 id="find-amp-findIndex"><a href="#find-amp-findIndex" class="headerlink" title="find()&amp;findIndex()"></a><code>find()</code>&amp;<code>findIndex()</code></h3><ul><li><code>find()</code> : 返回第一个满足条件的元素</li><li><code>findIndex()</code> : 返回第一个满足条件的元素下标</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>].find(<span class="function"><span class="params">x</span>=&gt;</span>x.length&lt;<span class="number">5</span>));<span class="comment">//lisi</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>].findIndex(<span class="function"><span class="params">x</span>=&gt;</span>x.length&lt;<span class="number">5</span>));<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a><code>includes()</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>].includes(<span class="string">'lisi'</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="传统map-amp-filter"><a href="#传统map-amp-filter" class="headerlink" title="传统map()&amp;filter()"></a>传统<code>map()&amp;filter()</code></h3><ul><li><code>map()</code> : 将每个元素遍历出来进行对应处理后返回新数组,会修改数组中的元素,但元素个数可能不会变</li><li><code>filter()</code> : 将每个元素遍历出来根据条件进行过滤,满足条件的留下,返回新数组,会修改元素个数,但元素内容不会发生改变</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>].map(<span class="function"><span class="params">x</span>=&gt;</span>x.toUpperCase()));<span class="comment">//["ZHANGSAN", "LISI", "WANGWU"]</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>].filter(<span class="function"><span class="params">x</span>=&gt;</span>x.length&gt;<span class="number">5</span>));<span class="comment">//["zhangsan", "wangwu"]</span></span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="属性-amp-方法简写"><a href="#属性-amp-方法简写" class="headerlink" title="属性&amp;方法简写"></a>属性&amp;方法简写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'zhangsan'</span>,age = <span class="number">12</span>;</span><br><span class="line"><span class="comment">//简写前需要定义name&amp;age , 相当于name:name,age:age</span></span><br><span class="line"><span class="keyword">const</span> Student = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    sayHi()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">',你好么?'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Student.sayHi()</span><br></pre></td></tr></table></figure><h3 id="属性-amp-方法表达式"><a href="#属性-amp-方法表达式" class="headerlink" title="属性&amp;方法表达式"></a>属性&amp;方法表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> funName = <span class="string">'test'</span>;</span><br><span class="line"><span class="keyword">const</span> fieldName = <span class="string">'test'</span>;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    [fieldName + <span class="string">'Name'</span>]:<span class="string">'zhangsan'</span>,</span><br><span class="line">    [funName + <span class="string">'Person'</span>]()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'测试成功'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.testPerson();</span><br><span class="line"><span class="built_in">console</span>.log(person.testName);</span><br></pre></td></tr></table></figure><h3 id="Symbol类型"><a href="#Symbol类型" class="headerlink" title="Symbol类型"></a>Symbol类型</h3><p>​    和Undefined,Null,Boolean,String,Number,Object都属于JavaScript中的原始数据类型.一般用来给对象中的属性命名,避免对象中的属性和方法名冲突.主要作用是生成一个唯一的值.</p><p>​    <strong>唯一要注意的是不能使用 <code>对象名.SymbolName</code> 使用.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义Symbol类型的属性</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="built_in">Symbol</span>(<span class="string">'name'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="comment">//定义对象,添加属性(一)</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    [name]:<span class="string">'zhangsan'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义对象,添加属性(二)</span></span><br><span class="line"><span class="keyword">const</span> student = &#123;&#125;;</span><br><span class="line">student[name] = <span class="string">'wangwu'</span>;</span><br><span class="line"><span class="comment">//定义对象,添加属性(三)</span></span><br><span class="line"><span class="keyword">const</span> teacher = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(teacher,name,&#123;</span><br><span class="line">    value:<span class="string">'laoliu'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//使用该Symbol类型的变量必须使用[]</span></span><br><span class="line"><span class="built_in">console</span>.log(person[name]);</span><br><span class="line"><span class="built_in">console</span>.log(student[name]);</span><br><span class="line"><span class="built_in">console</span>.log(teacher[name]);</span><br></pre></td></tr></table></figure><h2 id="Set-amp-Map"><a href="#Set-amp-Map" class="headerlink" title="Set&amp;Map"></a>Set&amp;Map</h2><p>​    2个东西都和Java里的Set&amp;Map意思上差不多,API不同</p><ul><li>Set : 当前数据结构中的存储的值都是唯一的值.</li><li>Map : 使用键值对的方式来存取数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Set集合</span></span><br><span class="line"><span class="keyword">let</span> set1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(set1.size);<span class="comment">//4</span></span><br><span class="line"><span class="comment">//使用拓展运算符直接将set转换为数组||或者使用Array.from()</span></span><br><span class="line"><span class="built_in">console</span>.log([...set1]);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Map集合</span></span><br><span class="line"><span class="keyword">let</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'id'</span>,<span class="number">1</span>],[<span class="string">'name'</span>,<span class="string">'zhangsan'</span>]]);</span><br><span class="line"><span class="built_in">console</span>.log(map1.size);<span class="comment">//2</span></span><br><span class="line"><span class="comment">//使用拓展运算符直接将map转换为键值对数组</span></span><br><span class="line"><span class="built_in">console</span>.log([...map1]);</span><br></pre></td></tr></table></figure><p><strong>获取长度</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>size</td><td>容器长度</td></tr></tbody></table><p><strong>增删改查</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Set add(value)</td><td>Set添加值</td></tr><tr><td>Map set(value)</td><td>Map添加值</td></tr><tr><td>Boolean delete(value)</td><td>删除值</td></tr><tr><td>Boolean has(value)</td><td>判断是否包含</td></tr><tr><td>clear()</td><td>清空</td></tr></tbody></table><p><strong>遍历</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>keys()</td><td>遍历所有key</td></tr><tr><td>values()</td><td>遍历所有value</td></tr><tr><td>entries()</td><td>遍历所有key,value</td></tr><tr><td>forEach()</td><td>不用多说</td></tr></tbody></table><p>​    这里注意Set调用keys(),values()都得到一个结果.</p><h3 id="WeakSet-amp-WeakMap"><a href="#WeakSet-amp-WeakMap" class="headerlink" title="WeakSet&amp;WeakMap"></a>WeakSet&amp;WeakMap</h3><p>​    当Set||Map中存储的元素无法被释放.所以使用WeakSet和WeakMap来存储对象.</p><ul><li>WeakSet中的成员只能是对象</li><li>可以被回收</li><li>不能使用size属性和foreach()方法进行遍历</li><li>一般用来保存DOM节点,在DOM节点对象被移除后,不易造成内存泄漏</li></ul><h2 id="迭代器-amp-生成器"><a href="#迭代器-amp-生成器" class="headerlink" title="迭代器&amp;生成器"></a>迭代器&amp;生成器</h2><h3 id="迭代器-Iterator"><a href="#迭代器-Iterator" class="headerlink" title="迭代器(Iterator)"></a>迭代器(Iterator)</h3><p>​    和Java中集合的迭代器也是很类似的,给所有数据结构提供了一种统一的迭代接口,可以使数据结构的成员按某种次序排列,主要供<code>for...of</code>循环遍历使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="comment">//获取迭代器</span></span><br><span class="line"><span class="keyword">let</span> it = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="comment">//遍历获取数组中的值</span></span><br><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = it.next();</span><br><span class="line">    <span class="keyword">if</span>(obj.done)<span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用for..of..</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成器-Generator"><a href="#生成器-Generator" class="headerlink" title="生成器(Generator)"></a>生成器(Generator)</h3><p>​    为ES6提出的解决异步编程的方案.和普通函数不同.有以下特征</p><ul><li>function关键字和函数名称之间有<code>*</code></li><li>函数体内部使用<code>yield</code>关键字来定义不同状态</li><li>Generator函数的调用和普通函数调用一致</li><li>需要使用<code>迭代器(Iterator)</code>对象的<code>next()</code>方法来调用函数内部状态执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//使用yield定义不同状态</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'zhangsan'</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'hello'</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'world'</span></span><br><span class="line">    <span class="comment">//定义return 语句来结束函数执行,可以不定义</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'end'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gf = generatorFun();</span><br></pre></td></tr></table></figure><h3 id="多个Generator函数相互调用"><a href="#多个Generator函数相互调用" class="headerlink" title="多个Generator函数相互调用"></a>多个Generator函数相互调用</h3><p>​    使用<code>yield* fun()</code>调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'x'</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'y'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'a'</span></span><br><span class="line">    <span class="keyword">yield</span>* test1()</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'b'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="next-arg-—参数arg"><a href="#next-arg-—参数arg" class="headerlink" title="next(arg)—参数arg"></a>next(arg)—参数arg</h3><p>​    yield表达式本身没有没有返回值.当在调用next()方法时可以向其中传入一个参数,该参数为上一个yield表达式的返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">test</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> returnValue = <span class="keyword">yield</span> num<span class="comment">//10</span></span><br><span class="line">    <span class="built_in">console</span>.log(returnValue)<span class="comment">//20</span></span><br><span class="line">    <span class="keyword">yield</span> returnValue<span class="comment">//20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> it = test(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log(it.next());</span><br><span class="line"><span class="built_in">console</span>.log(it.next(<span class="number">20</span>));</span><br></pre></td></tr></table></figure><h3 id="Iterator-amp-Generator应用"><a href="#Iterator-amp-Generator应用" class="headerlink" title="Iterator&amp;Generator应用"></a>Iterator&amp;Generator应用</h3><h4 id="多任务解决—-协程"><a href="#多任务解决—-协程" class="headerlink" title="多任务解决—-协程"></a>多任务解决—-协程</h4><h5 id="传统异步任务处理方案-—-使用回调函数-—-Ajax"><a href="#传统异步任务处理方案-—-使用回调函数-—-Ajax" class="headerlink" title="传统异步任务处理方案 — 使用回调函数 — Ajax"></a>传统异步任务处理方案 — 使用回调函数 — Ajax</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">'服务器地址'</span>,</span><br><span class="line">        type:<span class="string">'get'</span>,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//请求成功后.</span></span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                ...</span><br><span class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">                    <span class="comment">//请求成功后.</span></span><br><span class="line">                    $.ajax(&#123;...&#125;)</span><br><span class="line">                           &#125;</span><br><span class="line">                           &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>上面代码又称为<strong>回调地狱</strong></p><p>使用Generator</p><p><strong>案例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">beforeLoad</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'显示进度条ui'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过Ajax获取数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loading</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//使用setTimeout模拟Ajax</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'加载数据'</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadSuccess</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'加载数据成功,显示主页面'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">beforeLoad();</span><br><span class="line">loading();</span><br><span class="line">loadSuccess();</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">显示进度条ui</span><br><span class="line">加载数据成功,显示主页面</span><br><span class="line">加载数据</span><br></pre></td></tr></table></figure><p><strong>修改</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preLoad</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'准备加载数据,显示进度条'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loading</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> id = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'正在加载...'</span> + ++x);</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">20</span>)&#123;</span><br><span class="line">            clearInterval(id);</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//加载完成继续调用下一步,ResponseData status : 200 404 msg : '' </span></span><br><span class="line">            it.next(&#123;<span class="attr">status</span>:<span class="number">200</span>,<span class="attr">msg</span>:<span class="string">'请求成功'</span>,<span class="attr">data</span>:&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">'zhangsan'</span>&#125;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loaded</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`加载完成,结束进度条动画,<span class="subst">$&#123;data.name&#125;</span>进入主界面`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">failed</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">requestData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    preLoad();<span class="comment">//显示进度条</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">yield</span> loading();<span class="comment">//显示进度加载的状态</span></span><br><span class="line">    <span class="keyword">if</span>(result.status == <span class="number">200</span>)&#123;</span><br><span class="line">        loaded(result.data);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        failed(result.msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> it = requestData();</span><br><span class="line">it.next();</span><br></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>​    用来传递异步操作的消息,对不同的状态分别进行处理.那么有哪几种状态呢? axios</p><ol><li><strong>Pending</strong> : 代表进行中</li><li><strong>Resolved</strong> : 代表已完成,已解决,成功执行.Fullfilled</li><li><strong>Rejected</strong> : 代表失败,已拒绝.</li></ol><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//发送Ajax请求获取数据</span></span><br><span class="line">    <span class="keyword">let</span> resp = &#123;</span><br><span class="line">        status:<span class="number">200</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            id:<span class="number">1</span>,</span><br><span class="line">            name:<span class="string">'zhangsan'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        msg:<span class="string">'请求成功'</span></span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(resp.status == <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="comment">//如果请求成功则调用resolve函数传递参数给then的第一个参数</span></span><br><span class="line">            resolve(<span class="built_in">JSON</span>.stringify(resp.data));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果请求失败则调用reject函数传递参数给then的第二个参数</span></span><br><span class="line">            resolve(resp.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//then函数,请求成功或失败后要做什么事情.</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//成功后</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`成功获取数据<span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//失败后</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="then-amp-catch-amp-finally"><a href="#then-amp-catch-amp-finally" class="headerlink" title="then&amp;catch&amp;finally"></a>then&amp;catch&amp;finally</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        resolve(<span class="number">100</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">number</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(number);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是第二个then'</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'出错啦'</span>);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.log(err))</span><br><span class="line">    .then(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'我是第三个then啦'</span>))</span><br><span class="line">    .then(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'我是第四个then啦'</span>))</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line">我是第二个then</span><br><span class="line"><span class="built_in">Error</span>: 出错啦 at http:<span class="comment">//127.0.0.1:8848/dayuhan-web/09-es6(%E4%B8%8B)/test4.</span></span><br><span class="line">我是第三个then啦</span><br><span class="line">我是第四个then啦</span><br></pre></td></tr></table></figure><p><strong>修改</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        resolve(<span class="number">100</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'第一个then : '</span> + number);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'出错拉'</span>);</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'进入了catch : '</span> + err);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'出错拉'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'第二个then'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'第三个then'</span>);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'出错了'</span>);</span><br><span class="line">&#125;).finally(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'最终要做的事情...'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line">我是第二个then</span><br><span class="line">第一个<span class="keyword">catch</span> : <span class="built_in">Error</span>: 出错啦</span><br><span class="line">第二个<span class="keyword">catch</span> : <span class="built_in">Error</span>: 出错啦</span><br><span class="line">最终要做的事情...</span><br></pre></td></tr></table></figure><h3 id="Promise-resolve-arg-amp-Promise-reject-arg"><a href="#Promise-resolve-arg-amp-Promise-reject-arg" class="headerlink" title="Promise.resolve(arg)&amp;Promise.reject(arg)"></a>Promise.resolve(arg)&amp;Promise.reject(arg)</h3><ul><li>Promise.resolve(arg) 返回一个promise对象,代表成功执行,走then函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="built_in">Promise</span>.resolve(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">promise1.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="comment">// expected output: 123</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Promise.reject(arg) 返回一个promise对象,代表执行失败,走catch函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolved</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Resolved'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rejected</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'fail'</span>)).then(resolved, rejected);</span><br><span class="line"><span class="comment">// expected output: Error: fail</span></span><br></pre></td></tr></table></figure><h3 id="使用Promise异步加载图片"><a href="#使用Promise异步加载图片" class="headerlink" title="使用Promise异步加载图片"></a>使用Promise异步加载图片</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImgByUrl</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">        img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            resolve(img);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'加载图片成功'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`加载<span class="subst">$&#123;url&#125;</span>图片失败`</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        img.src = url;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise = loadImgByUrl(<span class="string">'https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201028004154.png'</span>);</span><br><span class="line">promise.then(<span class="function">(<span class="params">val</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#testImg'</span>).src = val.src;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用Promise封装Ajax"><a href="#使用Promise封装Ajax" class="headerlink" title="使用Promise封装Ajax"></a>使用Promise封装Ajax</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getJson</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        request.open(<span class="string">'GET'</span>,url);</span><br><span class="line">        request.onreadystatechange = handler;</span><br><span class="line">        request.responseType = <span class="string">'json'</span>;</span><br><span class="line">        request.setRequestHeader(<span class="string">'content-type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">        request.send();</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.readyState !== <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.status == <span class="number">200</span>)&#123;</span><br><span class="line">                resolve(<span class="keyword">this</span>.response);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">                reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.response.errmsg));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> promise = getJson(<span class="string">'http://www.tianqiapi.com/api?version=v9&amp;appid=58858572&amp;appsecret=ka07bqFH'</span>);</span><br><span class="line">promise.then(<span class="function">(<span class="params">resp</span>)=&gt;</span><span class="built_in">console</span>.log(resp),(err)=&gt;&#123;<span class="built_in">console</span>.log(err)&#125;)</span><br></pre></td></tr></table></figure><h3 id="当有多个请求同时需要发送"><a href="#当有多个请求同时需要发送" class="headerlink" title="当有多个请求同时需要发送"></a>当有多个请求同时需要发送</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url1 = <span class="string">'http://www.tianqiapi.com/api?version=v9&amp;appid=58858572&amp;appsecret=ka07bqFH&amp;city=北京'</span>;</span><br><span class="line"><span class="keyword">var</span> url2 = <span class="string">'http://www.tianqiapi.com/api?version=v9&amp;appid=58858572&amp;appsecret=ka07bqFH&amp;city=长沙'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderAll</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all([getJson(url1),getJson(url2)]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">renderAll().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相当于.then(,function reject()&#123;&#125;)的语法糖</span></span><br><span class="line">renderAll().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">eerrmsg</span>)</span>&#123;<span class="built_in">console</span>.log(errmsg)&#125;)</span><br></pre></td></tr></table></figure><h3 id="race和all"><a href="#race和all" class="headerlink" title="race和all"></a>race和all</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>resolve(<span class="string">'成功'</span>),<span class="number">500</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>reject(<span class="string">'失败'</span>),<span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">];</span><br><span class="line"><span class="comment">//2个Promise都成功执行才显示数据,有一个失败则报错</span></span><br><span class="line"><span class="comment">//Promise.all(promises).then(num=&gt;console.log(num)).catch(err=&gt;console.log('出错啦 : ' + err))</span></span><br><span class="line"><span class="comment">//哪个跑的快,输出哪个</span></span><br><span class="line"><span class="built_in">Promise</span>.race(promises).then(<span class="function"><span class="params">num</span>=&gt;</span><span class="built_in">console</span>.log(num)).catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'出错啦 : '</span> + err))</span><br></pre></td></tr></table></figure><h3 id="race超时处理"><a href="#race超时处理" class="headerlink" title="race超时处理"></a>race超时处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>resolve(<span class="string">'获得数据'</span>),<span class="number">6000</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>resolve(<span class="string">'获得数据'</span>),<span class="number">6000</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">//定义一个计时器,如果超过5秒则执行reject</span></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>reject(<span class="string">'请求超时'</span>),<span class="number">5000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">];</span><br><span class="line"><span class="built_in">Promise</span>.race(promises).then(<span class="function"><span class="params">num</span>=&gt;</span><span class="built_in">console</span>.log(num)).catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'出错啦 : '</span> + err))</span><br></pre></td></tr></table></figure><h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><p>​    async就是Generator的语法糖.async声明的函数,返回一个Promise对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPriceFromName</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正在查询价格'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateStock</span>(<span class="params">quantity</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正在更新库存'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBalance</span>(<span class="params">cost</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正在更新余额'</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'chucuole'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">purchase</span>(<span class="params">name,quantity</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> price = <span class="keyword">await</span> getPriceFromName(name);</span><br><span class="line">        result = <span class="keyword">await</span> updateStock(quantity);</span><br><span class="line">        result = <span class="keyword">await</span> updateBalance(price * quantity);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">        result = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">purchase().then(<span class="function"><span class="params">v</span>=&gt;</span><span class="built_in">console</span>.log(v)).catch(<span class="function"><span class="params">e</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'catch : '</span> + e))</span><br></pre></td></tr></table></figure><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>ES6在模块中自动引入严格模式,<code>&#39;use strict&#39;</code>.加入严格模式后有以下限制</p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201110065908.png" alt="20201110065908"></p><h2 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h2><p><strong>test2</strong> – 负责导出数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> id = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">12</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'zhangsan'</span></span><br><span class="line"><span class="keyword">const</span> gender = <span class="string">'男'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">id,</span><br><span class="line">age,</span><br><span class="line">name,</span><br><span class="line">gender,</span><br><span class="line">show()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我是show方法'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>test1</strong> – 负责导入数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> obj <span class="keyword">from</span> <span class="string">'./test1.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><p><strong>html中引用test1.js</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./module/test2.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201028004154.png&quot; alt=&quot;20201028004154&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://fightlee.fun/categories/web/"/>
    
    
      <category term="es6" scheme="http://fightlee.fun/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>javaee-springmvc01</title>
    <link href="http://fightlee.fun/javaee-springmvc01.html"/>
    <id>http://fightlee.fun/javaee-springmvc01.html</id>
    <published>2020-11-03T13:06:00.000Z</published>
    <updated>2020-11-08T09:19:01.831Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201103211319.png" alt="20201103211319"></p><a id="more"></a><h1 id="Javaee-SpringMVC01"><a href="#Javaee-SpringMVC01" class="headerlink" title="Javaee-SpringMVC01"></a>Javaee-SpringMVC01</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ul><li>什么是SpringMVC?</li><li>快速搭建SpringMVC工程</li><li>SpringMVC中的具体使用</li></ul><h2 id="什么是SpringMVC"><a href="#什么是SpringMVC" class="headerlink" title="什么是SpringMVC"></a>什么是SpringMVC</h2><p>​    与Spring无缝集成,支持Restful风格的请求方式,数据校验,国际化等优点.</p><p>​    其实说白了,就是随大流,什么东西用的人多,咱们就用什么就完事了.</p><h2 id="快速搭建SpringMVC"><a href="#快速搭建SpringMVC" class="headerlink" title="快速搭建SpringMVC"></a>快速搭建SpringMVC</h2><ol><li>Idea中配置Tomcat环境</li></ol><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201103231247.png" alt="20201103231247"></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201103231644.png" alt="20201103231644"></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201103232019.png" alt="20201103232019"></p><ol start="2"><li>创建Maven模板工程 选择 <strong>org.apache.maven.archetypes:maven-archetype-webapp</strong>,等待Maven Build Success</li></ol><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201103232121.png" alt="20201103232121"></p><ol start="3"><li><p>导入javax.servlet-api和spring-webmvc</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改web工程web.xml版本</p></li></ol><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201103232302.png" alt="20201103232302"></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201103232724.png" alt="20201103232724"></p><ol start="5"><li><p>在web.xml中配置DispatchServlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在main文件夹下创建java和resources文件夹并创建HelloController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testHello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"testMsg"</span>,<span class="string">"我是测试数据"</span>);</span><br><span class="line">        mv.setViewName(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.java.springmvc"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在WEB-INF下创建views文件夹,并创建hello.jsp文件,同时在index.jsp中添加超链接</p><p><strong>/WEB-INF/views/hello.jsp</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h3&gt;TestHello&lt;/h3&gt;</span><br><span class="line">  &lt;h3&gt;testMsg : $&#123;testMsg&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>index.jsp</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;a href="testHello"&gt;testHello&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>最后在Tomcat中添加要发布的模块.<br> <img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201103233924.png" alt="20201103233924"></p></li><li><p>成功执行.</p></li></ol><h2 id="SpringMVC中的具体使用"><a href="#SpringMVC中的具体使用" class="headerlink" title="SpringMVC中的具体使用"></a>SpringMVC中的具体使用</h2><h3 id="RequestMapping-重点"><a href="#RequestMapping-重点" class="headerlink" title="@RequestMapping(重点)"></a>@RequestMapping(重点)</h3><h4 id="修饰类-amp-修饰方法-重点"><a href="#修饰类-amp-修饰方法-重点" class="headerlink" title="修饰类&amp;修饰方法(重点)"></a>修饰类&amp;修饰方法(重点)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @RequestMapping注解 </span></span><br><span class="line"><span class="comment"> * 1.定义在方法上,提供映射路径,跟请求的路径相对应,相对于是类上的路径</span></span><br><span class="line"><span class="comment"> *  2.定义在类上,提供映射路径,相对于Web应用的根目录</span></span><br><span class="line"><span class="comment"> *  完整的请求路径 = 类上的RequestMapping + 方法上的RequestMapping</span></span><br><span class="line"><span class="comment"> *  如果类上没有@RequestMapping的配置,那方法上的@RequestMapping则相对于根目录</span></span><br><span class="line"><span class="comment"> *  使用场景 : 一般都需要在类上定义的@RequestMapping,比如说 当前的类是跟用户相关的类,user/add user/delete user/update...</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpringMvc</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testmvc"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMvc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"testMvc run...."</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="请求方法-amp-请求参数-amp-请求头"><a href="#请求方法-amp-请求参数-amp-请求头" class="headerlink" title="请求方法&amp;请求参数&amp;请求头"></a>请求方法&amp;请求参数&amp;请求头</h4><h5 id="请求参数-重点"><a href="#请求参数-重点" class="headerlink" title="请求参数(重点)"></a>请求参数(重点)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 请求参数</span></span><br><span class="line"><span class="comment">* value : 映射路径</span></span><br><span class="line"><span class="comment">* params : 请求过来的路径中必须要携带的参数列表,参数列表中还可以使用表达式.</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testParam"</span>,params= &#123;<span class="string">"username"</span>,<span class="string">"password"</span>,<span class="string">"age=10"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testParam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"test/testParam?username=zhangsan&amp;password=123456&amp;age=10"</span>&gt;</span>Test Param<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="请求方法-重点"><a href="#请求方法-重点" class="headerlink" title="请求方法(重点)"></a>请求方法(重点)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 请求方法</span></span><br><span class="line"><span class="comment">* method : 请求的路径的请求方式必须是Post请求</span></span><br><span class="line"><span class="comment">* 如果没有指定则是没有限制.</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/testMethod"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"test/testMethod"</span>&gt;</span>Test Method GET请求<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!-- 不行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"test/testMethod"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Test Method Post请求"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 请求头</span></span><br><span class="line"><span class="comment">   headers : 请求的路径中必须携带headers数组中定义的请求头信息</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testHeader"</span>,headers= &#123;<span class="string">"Host=localhost:8080"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"test/testHeader"</span>&gt;</span>Test Header<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Ant风格路径-重点"><a href="#Ant风格路径-重点" class="headerlink" title="Ant风格路径(重点)"></a>Ant风格路径(重点)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Ant风格的路径</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * ?匹配单个字符路径</span></span><br><span class="line"><span class="comment"> * * 匹配单层路径    </span></span><br><span class="line"><span class="comment"> * **匹配多层路径</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testAntPath1/*/abc"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testAntPath1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testAntPath2/**/abc"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testAntPath2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testAntPath3/?abc"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testAntPath3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"test/testAntPath1/asda/abc"</span>&gt;</span>Test AntPath1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"test/testAntPath2/asdas/asdas/abc"</span>&gt;</span>Test AntPath2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"test/testAntPath3/dabc"</span>&gt;</span>Test AntPath3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"test/testAntPath3/aabc"</span>&gt;</span>Test AntPath3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Restful风格的使用-重点"><a href="#Restful风格的使用-重点" class="headerlink" title="Restful风格的使用(重点)"></a>Restful风格的使用(重点)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Restful风格</span></span><br><span class="line"><span class="comment"> * 4种crud的请求分了不同的请求方法</span></span><br><span class="line"><span class="comment"> * addPOST</span></span><br><span class="line"><span class="comment"> * deleteDELETE</span></span><br><span class="line"><span class="comment"> * update   PUT</span></span><br><span class="line"><span class="comment"> * get      GET</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 对于传统的表单来说 只支持GET和POST请求,那么如果SpringMVC要使用其他类型的请求方式就需要做一些配置</span></span><br><span class="line"><span class="comment"> * 1.添加一个过滤器 HiddenHttpMethodFilter</span></span><br><span class="line"><span class="comment"> * 2.在表单中添加一个隐藏文本域,名称为_method,值为对应的请求方法名称</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 作用 : 在服务器Controller中可以根据发送的请求方式来处理不同的业务逻辑</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testDelete"</span>,method=RequestMethod.DELETE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"接收到Delete请求"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testUpdate"</span>,method=RequestMethod.PUT)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"接收到put请求"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testAdd"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testGET"</span>,method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testGET</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>测试Delete请求<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"test/testDelete"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Test Delete"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>测试Put请求<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"test/testUpdate"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"put"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Test Put"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意 : 如果jsp页面使用Restful风格的请求报错,可以在jsp页面的头部声明标签中添加<code>isErrorPage=&quot;true&quot;</code> , 可以直接在File and Code Templates中对模板样式进行修改 . </li><li><code>setttings</code> —&gt; <code>File and Code Templates</code> —&gt; <code>JSP Files</code></li></ul><h3 id="RequestParam-重点"><a href="#RequestParam-重点" class="headerlink" title="@RequestParam(重点)"></a>@RequestParam(重点)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @RequestParam注解可以获取对应的请求参数</span></span><br><span class="line"><span class="comment"> * name = "请求参数的名称"</span></span><br><span class="line"><span class="comment"> * required = "是否必传"</span></span><br><span class="line"><span class="comment"> * defaultValue = "默认值"</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testRequestParam"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestParam</span><span class="params">(@RequestParam(name=<span class="string">"username"</span>,required=<span class="keyword">true</span>,defaultValue=<span class="string">"lisi"</span>)</span> String username,@<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String pwd) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"username : "</span> + username);</span><br><span class="line">    System.out.println(<span class="string">"pwd : "</span> + pwd);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"test/testRequestParam?username=zhangsan&amp;password=123456"</span>&gt;</span>Test RequestParam<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="RequestBody-重点"><a href="#RequestBody-重点" class="headerlink" title="@RequestBody(重点)"></a>@RequestBody(重点)</h3><ol><li>当content-type = ‘application/x-www-form-urlencoded’时,也就是post提交的默认方式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义要传输的数据</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">userName</span>:<span class="string">'zhangsan'</span>,<span class="attr">userPassword</span>:<span class="string">'123'</span>&#125;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type:<span class="string">'post'</span>,</span><br><span class="line">    url:<span class="string">'/springmvc_day03/user/testRequestBody'</span>,</span><br><span class="line">    data:data,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;&#125;,</span><br><span class="line">    dataType:<span class="string">'json'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后台不使用@RequestBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testRequestBody"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestBody</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user.getUserName());<span class="comment">//zhangsan</span></span><br><span class="line">    System.out.println(user.getUserPassword());<span class="comment">//123</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后台使用@RequestBody 报错</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestBody</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user.getUserName());<span class="comment">//zhangsan</span></span><br><span class="line">    System.out.println(user.getUserPassword());<span class="comment">//123</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>当content-type = ‘application/json’时</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义要传输的数据</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">userName</span>:<span class="string">'zhangsan'</span>,<span class="attr">userPassword</span>:<span class="string">'123'</span>&#125;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type:<span class="string">'post'</span>,</span><br><span class="line">    contentType:<span class="string">'application/json'</span>,</span><br><span class="line">    url:<span class="string">'/springmvc_day03/user/testRequestBody'</span>,</span><br><span class="line">    data:<span class="built_in">JSON</span>.stringify(data),</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;&#125;,</span><br><span class="line">    dataType:<span class="string">'json'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后台使用@RequestBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestBody</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user.getUserName());<span class="comment">//zhangsan</span></span><br><span class="line">    System.out.println(user.getUserPassword());<span class="comment">//123</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结 :"></a>总结 :</h5><ul><li>根据公司前段发送的数据类型不同,如果content-type = ‘application/x-www-form-urlencoded’ , 可以使用@RequestParam接收参数</li><li>如果content-type = ‘application/json’,可以使用@RequestBody接收参数.需要注意发送的data需不需要通过JSON转换.</li></ul><h3 id="RequestHeader-了解"><a href="#RequestHeader-了解" class="headerlink" title="@RequestHeader(了解)"></a>@RequestHeader(了解)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @RequestHeader注解可以获取对应的请求头信息</span></span><br><span class="line"><span class="comment"> * 跟RequestParam一样</span></span><br><span class="line"><span class="comment"> * name = "请求头的名称"</span></span><br><span class="line"><span class="comment"> * required = "是否必传"</span></span><br><span class="line"><span class="comment"> * defaultValue = "默认值"</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testRequestHeader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestHeader</span><span class="params">(@RequestHeader(name=<span class="string">"Host"</span>,required=<span class="keyword">true</span>,defaultValue=<span class="string">"localhost:8080"</span>)</span>String host) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Host : "</span> + host);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"test/testRequestHeader"</span>&gt;</span>Test RequestHeader<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CookieValue-了解"><a href="#CookieValue-了解" class="headerlink" title="@CookieValue(了解)"></a>@CookieValue(了解)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *@CookieValue 获取请求中的Cookie信息</span></span><br><span class="line"><span class="comment"> *使用方式和上面一样</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testCookieValue"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testCookieValue</span><span class="params">(@CookieValue(<span class="string">"JSESSIONID"</span>)</span>String jid) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"JSESSIONID : "</span> + jid);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"test/testCookieValue"</span>&gt;</span>Test CookieValue<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="接收前端页面数据"><a href="#接收前端页面数据" class="headerlink" title="接收前端页面数据"></a>接收前端页面数据</h3><h4 id="接收单个-多个参数-重点"><a href="#接收单个-多个参数-重点" class="headerlink" title="接收单个/多个参数(重点)"></a>接收单个/多个参数(重点)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testParam"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testParam</span><span class="params">(String username,Integer age)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"username : "</span> + username);</span><br><span class="line">    System.out.println(<span class="string">"age : "</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收对象类型数据-重点"><a href="#接收对象类型数据-重点" class="headerlink" title="接收对象类型数据(重点)"></a>接收对象类型数据(重点)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 接收Pojo类型的参数</span></span><br><span class="line"><span class="comment">  表单中的name属性的值必须和对应的参数类型的属性的名称一致</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"user : "</span> + user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.<strong>接收普通表单属性&amp;级联属性</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"mvcday02/add"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"userName"</span>&gt;</span>用户名 : <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">id</span>=<span class="string">"userName"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>邮箱 : <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>密码 : <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"birth"</span>&gt;</span>生日 : <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"birth"</span> <span class="attr">id</span>=<span class="string">"birth"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置级联属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"accountId"</span>&gt;</span>账户Id : <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"account.id"</span> <span class="attr">id</span>=<span class="string">"accountId"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"accountName"</span>&gt;</span>账户Name : <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"account.accountName"</span> <span class="attr">id</span>=<span class="string">"accountName"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.<strong>接收集合属性</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 级联属性中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"accountId"</span>&gt;</span>账户Id : <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"account.id"</span> <span class="attr">id</span>=<span class="string">"accountId"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"accountName"</span>&gt;</span>账户Name : <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"account.accountName"</span> <span class="attr">id</span>=<span class="string">"accountName"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 保存到list中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"accountId1"</span>&gt;</span>账户Id : <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"list[0].id"</span> <span class="attr">id</span>=<span class="string">"accountId1"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"accountName1"</span>&gt;</span>账户Name : <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"list[0].accountName"</span> <span class="attr">id</span>=<span class="string">"accountName1"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 保存到map中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"accountId2"</span>&gt;</span>账户Id : <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"map['accountOne'].id"</span> <span class="attr">id</span>=<span class="string">"accountId2"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"accountName2"</span>&gt;</span>账户Name : <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"map['accountOne'].accountName"</span> <span class="attr">id</span>=<span class="string">"accountName2"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.<strong>自定义类型转换器</strong></p><p>​    a. 自定义转换器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.springmvc.day02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * S : source 源头类型</span></span><br><span class="line"><span class="comment"> * T : target 目标类型</span></span><br><span class="line"><span class="comment"> * 因为在springmvc中可能还会有其他的自带的类型转换器,将自定义的类型转换器添加到springmvc中</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCustomDateConversion</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 类型转换的方法</span></span><br><span class="line"><span class="comment"> * String source : 就是表单提交过来的数据</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">System.out.println(source);</span><br><span class="line"><span class="keyword">if</span>(source != <span class="keyword">null</span>) &#123;</span><br><span class="line">SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> simpleDateFormat.parse(source);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;<span class="comment">//返回出去的时候保证其转换称Date类型</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    b. xml文件中注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置自定义的类型转换器 transactionManager --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.java.springmvc.day02.MyCustomDateConversion"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.开启springMVC的相关注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SpringMVC和Ajax的使用-重点"><a href="#SpringMVC和Ajax的使用-重点" class="headerlink" title="SpringMVC和Ajax的使用(重点)"></a>SpringMVC和Ajax的使用(重点)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在方法上加上@ResponseBody来声明当前方法作为Ajax的controller使用.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"emps/&#123;empId&#125;"</span>,method=RequestMethod.DELETE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"empId"</span>)</span>Integer empId) </span>&#123;</span><br><span class="line">    Boolean result = employeeService.deleteEmpById(empId);</span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 接收Ajax请求后的返回值可以是Object也可以是List&lt;Object&gt;,还可以是String</span></span><br><span class="line"><span class="comment"> 这里要注意的是如果返回值是Object或者List&lt;Object&gt; 可以直接在前台解析</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testAjax"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">testString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"zhangsan"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"1234556"</span>);</span><br><span class="line">    user.setAge(<span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> user;<span class="comment">//跳转的页面地址 = prefix + returnValue + suffix /WEB-INF/views/success.jsp</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中文乱码-重点"><a href="#中文乱码-重点" class="headerlink" title="中文乱码(重点)"></a>中文乱码(重点)</h3><h4 id="表单post提交乱码-—-过滤器CharacterEncodingFilter"><a href="#表单post提交乱码-—-过滤器CharacterEncodingFilter" class="headerlink" title="表单post提交乱码 —- 过滤器CharacterEncodingFilter"></a>表单post提交乱码 —- 过滤器CharacterEncodingFilter</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在springmvc中已经定义好了一个过滤器来对全站的中文乱码问题进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Ajax返回String中文乱码"><a href="#Ajax返回String中文乱码" class="headerlink" title="Ajax返回String中文乱码"></a>Ajax返回String中文乱码</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"failOnEmptyBeans"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="全局处理异常-重点"><a href="#全局处理异常-重点" class="headerlink" title="全局处理异常(重点)"></a>全局处理异常(重点)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用@ControllerAdvice定义异常处理器类</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerExceptionhandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*定义方法处理异常</span></span><br><span class="line"><span class="comment">      返回值也可以是ModelAndView String ..</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(BalanceException<span class="class">.<span class="keyword">class</span>)//处理<span class="title">BalanceException</span>类型异常</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">handlerCustomerException</span>(<span class="title">Throwable</span> <span class="title">throwable</span>)</span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"exMsg"</span>,<span class="string">"余额异常"</span> + throwable.getMessage());</span><br><span class="line">        mv.setViewName(<span class="string">"balanceException"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span><span class="comment">//处理其他异常,一个类中只能有一个处理其他异常的方法.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleOtherException</span><span class="params">(Throwable throwable)</span></span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"exMsg"</span>,<span class="string">"其他异常"</span> + throwable.getMessage());</span><br><span class="line">        mv.setViewName(<span class="string">"otherException"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拦截器-重点"><a href="#拦截器-重点" class="headerlink" title="拦截器(重点)"></a>拦截器(重点)</h3><p><strong>MyInterceptor.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.springmvc.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*在前往配置的拦截的路径所匹配的Controller方法执行前调用</span></span><br><span class="line"><span class="comment">    如果返回值为false,则代表请求拦截,不继续向下执行</span></span><br><span class="line"><span class="comment">    如果返回值为true,则代表放行请求,原理可以参考之前学习过的Filter</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"preHandle...运行了.."</span>);</span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果session中没有用户就去登录</span></span><br><span class="line">            response.sendRedirect(<span class="string">"login.jsp"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果有放行,继续执行controller中的方法.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//preHandle,在对应的Controller执行完后调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"postHandler"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//视图渲染完后调用,可以执行一些资源释放的操作..</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterCompletion... 执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>springmvc.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--将拦截器注入到IOC容器中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"interceptor"</span> <span class="attr">class</span>=<span class="string">"com.java.springmvc.interceptor.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置自定义拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--拦截order/下的所有路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/order/*"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--排除掉order/user1路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/order/user1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注册拦截器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"interceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201103211319.png&quot; alt=&quot;20201103211319&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="springmvc" scheme="http://fightlee.fun/tags/springmvc/"/>
    
  </entry>
  
  <entry>
    <title>javascript高级05</title>
    <link href="http://fightlee.fun/javascript%E9%AB%98%E7%BA%A705.html"/>
    <id>http://fightlee.fun/javascript%E9%AB%98%E7%BA%A705.html</id>
    <published>2020-11-03T08:41:09.000Z</published>
    <updated>2020-11-05T07:11:50.612Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201028004154.png" alt="20201028004154"></p><a id="more"></a><h1 id="javascript高级-五"><a href="#javascript高级-五" class="headerlink" title="javascript高级(五)"></a>javascript高级(五)</h1><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>​    当函数可以记住并访问所在的词法作用域时,就产生了闭包,即使函数是在当前词法作用域之外执行.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fun;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = foo();</span><br><span class="line">fn();<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h3 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h3><p>​    大家在玩Js之前,肯定接触过一个案例,checkbox全选/反选</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> checkAll = <span class="built_in">document</span>.querySelector(<span class="string">'#checkAll'</span>);</span><br><span class="line"><span class="keyword">var</span> checkItems = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.checkItems'</span>);</span><br><span class="line"><span class="comment">//全选</span></span><br><span class="line">checkAll.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; checkItems.length;i++)&#123;</span><br><span class="line">        checkItems[i].checked = !checkItems[i].checked;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点击某一个checkItem时,取消全选</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; checkItems.length;i++)&#123;</span><br><span class="line">    checkItems[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);<span class="comment">//5</span></span><br><span class="line">        <span class="built_in">console</span>.log(checkItems[i]);<span class="comment">//undefiend</span></span><br><span class="line">        <span class="keyword">if</span>(!checkItems[i].checked)&#123;<span class="comment">//既然是checkItems[i]undefined checked属性肯定就报错了</span></span><br><span class="line">            checkAll.checked = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    测试代码发现,无论点击哪个checkbox,最后log的结果都是5.因为div节点的onclick事件是异步触发的,当事件触发时,for循环早已经结束了,此时变量i的值已经是 5,所以checkbox的onclick的事件函数顺着作用域链向外找变量i时,查到的值已经为5.</p><p>​    如何解决呢?我们可以通过闭包将每次循环的i值封闭起来,单独形成一个作用域,当事件函数顺着作用域向外找变量i时,会先找此时最近作用域中的i.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; checkItems.length;i++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">        checkItems[j].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(j);<span class="comment">//5</span></span><br><span class="line">            <span class="built_in">console</span>.log(checkItems[j]);<span class="comment">//undefiend</span></span><br><span class="line">            <span class="keyword">if</span>(!checkItems[j].checked)&#123;</span><br><span class="line">                checkAll.checked = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="延长变量生命周期"><a href="#延长变量生命周期" class="headerlink" title="延长变量生命周期"></a>延长变量生命周期</h4><p>​    实现一个简单的计数器案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统实现方式</span></span><br><span class="line"><span class="comment">//定义计数器函数</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;<span class="comment">//定义计数器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//每次调用函数count() i++一次</span></span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">return</span> i;<span class="comment">//返回i</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(count());<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(count());<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义全局作用域不安全</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;<span class="comment">//定义计数器</span></span><br><span class="line">    <span class="comment">//每次调用函数count() i++一次</span></span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">return</span> i;<span class="comment">//返回i</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(count());<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(count());<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//局部变量i的值没有保存,每次重新调用count()函数,i的值被重新赋值为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用闭包内保存变量i的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i++;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = count();</span><br><span class="line"><span class="built_in">console</span>.log(c());<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(c());<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(c());<span class="comment">//2</span></span><br><span class="line"><span class="comment">//注意内存的释放</span></span><br><span class="line">c = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h4 id="闭包和对象"><a href="#闭包和对象" class="headerlink" title="闭包和对象"></a>闭包和对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//寄生工厂模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">    <span class="comment">//定义私有属性</span></span><br><span class="line">    <span class="keyword">var</span> age;</span><br><span class="line">    <span class="comment">//定义私有方法</span></span><br><span class="line">    a.setAge = <span class="function"><span class="keyword">function</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    a.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.setAge(<span class="number">12</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.getAge());</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用闭包</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//定义私有属性</span></span><br><span class="line">    <span class="keyword">var</span> name;</span><br><span class="line">    <span class="comment">//定义私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setName:setName,</span><br><span class="line">        getName:getName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Student();</span><br><span class="line">s.setName(<span class="string">'zhangsan'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line"><span class="comment">//使用闭包</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setName:<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name</span><br><span class="line">        &#125;,</span><br><span class="line">        getName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定时函数和闭包"><a href="#定时函数和闭包" class="headerlink" title="定时函数和闭包"></a>定时函数和闭包</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和之前的onclick事件中的回调函数function一样,setTimeout中的function也是异步触发的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(msg)</span><br><span class="line">    &#125;,<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line">showMsg(<span class="string">'显示消息'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果写在了循环中遍历i的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params">count</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(count);<span class="comment">//隔1秒输出10个10</span></span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">showMsg(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//使用闭包后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params">count</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(j);<span class="comment">//隔1秒输出0-9</span></span><br><span class="line">            &#125;,<span class="number">1000</span>)</span><br><span class="line">        &#125;(i))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">showMsg(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h4 id="使用闭包实现命令模式"><a href="#使用闭包实现命令模式" class="headerlink" title="使用闭包实现命令模式"></a>使用闭包实现命令模式</h4><blockquote><p>什么是命令模式?</p><p>将一个请求封装成一个对象，从而使你可用不同的请求把客户端参数化，对请求排队或者记录请求日志，以及支持可撤销和恢复操作。 </p><p>它有什么用?</p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201105050117.png" alt="20201105050117"></p><p>比如现在我们是遥控器的制造厂商,那么在设计遥控器时,我们可能并不知道遥控器上的按钮是要实现某种具体的功能,换句话说,遥控器上的面板上那些按钮的功能并不是按钮来实现的,按钮只是用来触发一个点击的事件,实际的操作是由遥控器的接收者完成,按钮只负责接收用户的点击,然后发送对应的命令请求交给主板发送给接收执行对应的操作.那么这种模式就称之为命令模式,同样的场景还有客户需要点餐,服务员将订单传递给厨师来做.那么这个订单其实就可以当成一个命令对象,在客户和服务员,服务员和厨师之间传递.</p></blockquote><p><strong>使用场景</strong> : 模拟电视机开关</p><p><strong>传统做法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设计电视机对象</span></span><br><span class="line"><span class="keyword">var</span> tv = &#123;</span><br><span class="line">    open:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'电视机打开了...'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    close:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'电视机关闭了...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> openBtn = <span class="built_in">document</span>.querySelector(<span class="string">'#openBtn'</span>);</span><br><span class="line"><span class="keyword">var</span> closeBtn = <span class="built_in">document</span>.querySelector(<span class="string">'#closeBtn'</span>);</span><br><span class="line"></span><br><span class="line">openBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    tv.open();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">closeBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    tv.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缺陷</strong></p><ul><li>电视机和按钮的耦合度非常高,后期不易维护.</li></ul><p><strong>使用命令模式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设计电视机对象</span></span><br><span class="line"><span class="keyword">var</span> tv = &#123;</span><br><span class="line">    open:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'电视机打开了...'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    close:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'电视机关闭了...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> openBtn = <span class="built_in">document</span>.querySelector(<span class="string">'#openBtn'</span>);</span><br><span class="line"><span class="keyword">var</span> closeBtn = <span class="built_in">document</span>.querySelector(<span class="string">'#closeBtn'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设计命令对象</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 参数 receiver : 命令接收者--电视机</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Command</span>(<span class="params">receiver</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//给命令对象中添加打开命令</span></span><br><span class="line">Command.prototype.openTv = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver.open();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//给命令对象中添加关闭命令</span></span><br><span class="line">Command.prototype.closeTv = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置遥控器按钮发送要操作的命令</span></span><br><span class="line"><span class="keyword">var</span> sendCommand = <span class="function"><span class="keyword">function</span>(<span class="params">command</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//打开按钮 发送打开命令</span></span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#openBtn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        command.openTv();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭按钮 发送关闭命令</span></span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#closeBtn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        command.closeTv();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送命令</span></span><br><span class="line">sendCommand(<span class="keyword">new</span> Command(tv));</span><br></pre></td></tr></table></figure><p><strong>使用闭包来简化命令模式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设计电视机对象</span></span><br><span class="line"><span class="keyword">var</span> tv = &#123;</span><br><span class="line">    open: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'电视机打开了...'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    close: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'电视机关闭了...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> openBtn = <span class="built_in">document</span>.querySelector(<span class="string">'#openBtn'</span>);</span><br><span class="line"><span class="keyword">var</span> closeBtn = <span class="built_in">document</span>.querySelector(<span class="string">'#closeBtn'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设计命令对象</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数 receiver : 命令接收者--电视机</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Command</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        openTv:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> receiver.open();</span><br><span class="line">        &#125;,</span><br><span class="line">        closeTv:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> receiver.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置遥控器按钮发送要操作的命令</span></span><br><span class="line"><span class="keyword">var</span> sendCommand = <span class="function"><span class="keyword">function</span>(<span class="params">command</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//打开按钮 发送打开命令</span></span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#openBtn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        command.openTv();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭按钮 发送关闭命令</span></span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#closeBtn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        command.closeTv();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送命令</span></span><br><span class="line">sendCommand(<span class="keyword">new</span> Command(tv));</span><br></pre></td></tr></table></figure><h4 id="闭包实现缓存"><a href="#闭包实现缓存" class="headerlink" title="闭包实现缓存"></a>闭包实现缓存</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个求和的函数</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>,l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">        sum += <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果每一次传入的参数都是相同的参数,没有必要再进行一次运算,加入缓存对象</span></span><br><span class="line"><span class="keyword">var</span> cache = &#123;&#125;;<span class="comment">//定义缓存对象,全局作用域下,污染全局作用域</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//将arguments中的所有参数拼接成字符串当成缓存对象的属性</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>,<span class="string">','</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(args);</span><br><span class="line">    <span class="comment">//如果对应参数的属性有值就返回该值</span></span><br><span class="line">    <span class="keyword">if</span>(cache[args])&#123;</span><br><span class="line">        <span class="keyword">return</span> cache[args];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则就重新计算</span></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>,l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">        sum += <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用闭包,将cache对象封装在add函数内部</span></span><br><span class="line"><span class="keyword">var</span> add = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>,<span class="string">','</span>);</span><br><span class="line">        <span class="keyword">if</span>(args <span class="keyword">in</span> cache)&#123;</span><br><span class="line">            <span class="keyword">return</span> cache[args];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>,l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">            sum += <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cache[args] = sum;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>));</span><br></pre></td></tr></table></figure><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>一个高阶函数至少要满足以下条件之一</p><ul><li>函数可以作为参数被传递</li><li>函数可以作为返回值输出</li></ul><h4 id="函数作为参数传递"><a href="#函数作为参数传递" class="headerlink" title="函数作为参数传递"></a>函数作为参数传递</h4><p><strong>函数复用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现隐藏所有元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">option</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> liItems = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; liItems.length;i++)&#123;</span><br><span class="line">        liItems[i].style.display = <span class="string">'none'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">option();</span><br></pre></td></tr></table></figure><p><strong>修改后</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改后的代码看起来也是变复杂了,但是option函数的复用性变强了,如果需要修改元素其他样式只需要在option中传入回调函数即可.</span></span><br><span class="line"><span class="keyword">var</span> option = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> liItems = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; liItems.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> callback === <span class="string">'function'</span>)&#123;</span><br><span class="line">            callback(liItems[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">option(<span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    node.style.display = <span class="string">'none'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>排序</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">11</span>,<span class="number">22</span>].sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b-a;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h4 id="函数作为返回值"><a href="#函数作为返回值" class="headerlink" title="函数作为返回值"></a>函数作为返回值</h4><h5 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h5><blockquote><p>什么是单例模式?</p><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点.</p><p>为什么要使用它?</p><p>在实际开发中,有很多对象不需要创建多次,比如页面中有一个登录浮窗,无论点击多少次登录按钮,始终只会创建一次该浮窗.这种类似的例子在页面中有很多,都可以使用单例模式来创建.</p><p>如何实现?</p><p>用一个变量来标识当前是否已经为某个类创建过对象,如果已经创建过,则直接返回之前创建的对象.</p></blockquote><p><strong>普通方式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建类</span></span><br><span class="line"><span class="keyword">var</span> Bank = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//给类添加getter方法</span></span><br><span class="line">Bank.prototype.transfer = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a+ <span class="string">'给'</span> + b + <span class="string">'转账成功'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给构造函数添加类方法,来获取实例</span></span><br><span class="line">Bank.getSingleInstance = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.instance)&#123;</span><br><span class="line">        <span class="comment">//如果实例不存在,则创建对象</span></span><br><span class="line">        <span class="keyword">this</span>.instance = <span class="keyword">new</span> Bank();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = Bank.getSingleInstance();</span><br><span class="line"><span class="keyword">var</span> b = Bank.getSingleInstance();</span><br><span class="line"><span class="built_in">console</span>.log(a === b);</span><br></pre></td></tr></table></figure><p><strong>或者使用闭包</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据传入的函数来创建元素</span></span><br><span class="line"><span class="keyword">var</span> getSingle = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance || (instance = fn.call(<span class="keyword">this</span>,<span class="built_in">arguments</span>)); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getDiv = getSingle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = getDiv();</span><br><span class="line"><span class="keyword">var</span> b = getDiv();</span><br><span class="line"><span class="built_in">console</span>.log(a === b);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201028004154.png&quot; alt=&quot;20201028004154&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://fightlee.fun/categories/web/"/>
    
    
      <category term="js高级" scheme="http://fightlee.fun/tags/js%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>javaee-spring05</title>
    <link href="http://fightlee.fun/javaee-spring05.html"/>
    <id>http://fightlee.fun/javaee-spring05.html</id>
    <published>2020-10-31T01:45:20.000Z</published>
    <updated>2020-11-03T02:51:19.426Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030111805.png" alt="20201030111805"></p><a id="more"></a><h1 id="Javaee-Spring05"><a href="#Javaee-Spring05" class="headerlink" title="Javaee-Spring05"></a>Javaee-Spring05</h1><h2 id="本文概览"><a href="#本文概览" class="headerlink" title="本文概览"></a>本文概览</h2><ul><li>事务回顾</li><li>Spring事务<ul><li>Spring编程式事务</li><li>Spring声明式事务</li></ul></li></ul><h2 id="事务回顾"><a href="#事务回顾" class="headerlink" title="事务回顾"></a>事务回顾</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>一组SQL语句,要么全部执行,要么都不执行.</p></blockquote><h3 id="事务的特性-ACID"><a href="#事务的特性-ACID" class="headerlink" title="事务的特性(ACID)"></a>事务的特性(ACID)</h3><ul><li><strong>原子性( Atomicity )：</strong>事务应该当作一个单独单元的操作，这意味着整个序列操作要么是成功，要么是失败的。</li><li><strong>一致性( Consistency )：</strong>这表示数据库的引用完整性的一致性，表中唯一的主键等。</li><li><strong>隔离性( Isolation )：</strong>可能同时处理很多有相同的数据集的事务，每个事务应该与其他事务隔离，以防止数据损坏。</li><li><strong>持久性( Durability )：</strong>事务一旦完成全部操作后，这个事务的结果必须是永久性的，不能因系统故障而从数据库中删除。</li></ul><blockquote><p>注意 : MySql事务都基于InnoDB引擎,MyISAM引擎不支持事务.</p></blockquote><h3 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h3><blockquote><p>Spring事务的管理主要由 <strong>PlatformTransactionManager对象</strong>  来管理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PlatformTransactionManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取事务管理状态</span></span><br><span class="line">    <span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line">    <span class="comment">//事务提交</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line">    <span class="comment">//事务回滚</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line">&#125;dual</span><br></pre></td></tr></table></figure><blockquote><p> 根据底层所使用的不同的持久化 API 或框架，PlatformTransactionManager 的主要实现类大致如下： </p></blockquote><table><thead><tr><th>事务管理器</th><th>作用</th></tr></thead><tbody><tr><td>DataSourceTransactionManager</td><td>适用于使用JDBC和iBatis进行数据持久化操作的情况。</td></tr><tr><td>HibernateTransactionManager</td><td>适用于使用Hibernate进行数据持久化操作的情况。</td></tr><tr><td>JpaTransactionManager</td><td>适用于使用JPA进行数据持久化操作的情况</td></tr></tbody></table><blockquote><p>Spring事务中的五大属性 , 在Spring中由 <strong>TransactionDefinition对象</strong>  来定义</p></blockquote><ul><li><strong>隔离级别</strong> : isolation.</li><li><strong>传播行为</strong> : propagation.</li><li><strong>是否只读</strong> : readOnly.</li><li><strong>事务超时</strong> : timeout.</li><li><strong>回滚规则</strong> : rollbackFor|rollbackForClassName &amp; noRollbackFor | noRollbackForClassName</li></ul><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><blockquote><p>简单来说就是一个事物受到其他事务的影响的程度.也称之为事务的并发问题.</p></blockquote><ul><li><strong>脏读</strong> : 事务A读取到事务B未经提交的数据,一旦事务B进行回滚操作,就意味着事务A读取到的数据是不存在的数据,就是”脏数据”,称之为脏读.</li><li><strong>不可重复读</strong> : 事务A在做读取操作时,事务B正在对当前数据进行修改操作,当事务B结束后,事务A重新读取的数据和之前读取的数据不一致称之为不可重复度.</li><li><strong>幻读/虚读</strong> : 事务A在做读取操作时得到N条数据结果,同时事务B对该表添加/删除了M条数据,事务A再次读取的时候发现数据为之前 N - M 或者 N + M 条数据,如幻觉一般,称之为幻读.</li></ul><p>在Spring事务属性中的隔离级别内提供了5种不同的事务隔离级别 : </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>TransactionDefinition.ISOLATION_<strong>DEFAULT</strong></td><td>默认隔离级别,<br/>Mysql默认READ_REPEATABLE,<br>Oracle默认READ_COMMITTED</td></tr><tr><td>TransactionDefinition.ISOLATION<strong>_READ_COMMITTED</strong></td><td>读已提交数据,可以防止脏读</td></tr><tr><td>TransactionDefinition.ISOLATION_<strong>READ_UNCOMMITTED</strong></td><td>读未提交数据,以上三种问题都可能发生</td></tr><tr><td>TransactionDefinition.ISOLATION_<strong>REPEATABLE_READ</strong></td><td>防止脏读,不可重复读问题</td></tr><tr><td>TransactionDefinition.ISOLATION_<strong>SERIALIZABLE</strong></td><td>串行化,级别最高,效率最低.阻止以上三种问题</td></tr></tbody></table><h4 id="丢失更新"><a href="#丢失更新" class="headerlink" title="丢失更新"></a>丢失更新</h4><blockquote><p>以上事务隔离级别都是事务A读取事务B操作产生的问题.那么,如果事务A和事务B同时对某一数据产生修改会造成丢失更新的问题,如 在事务A修改user表中{id:1,name:’zhangsan’,age:20}的数据的同时,事务B同时对其数据进行修改,那么事务A更新的数据就会被事务B更新的结果给冲掉,这种现象就称之为丢失更新.</p><p>丢失更新的问题一般通过数据库的锁机制解决</p><ul><li><p>排它锁,也称之为悲观琐</p><p>假设事务的操作肯定会产生此问题,所以称之为悲观琐.那么事务A在对其进行修改操作时,需要阻止其他事务对当前数据的操作,可以在事务A操作时给表或者当前行加上锁.</p><ul><li><p>表锁 :  保证只有一个线程能对该表进行表结构更改。 (不常用,性能太低)</p><ul><li><strong><code>lock tables xxx read/write;</code></strong> </li></ul></li><li><p>行级锁 </p><ul><li><p>共享锁(S锁)</p><p>共享用于不更改或不更新数据的操作(只读操作),如 SELECT 语句.</p><p>如果事务T对数据A加上共享锁后,则其他事务只能对A再加共享锁,不能加排他锁.获准共享锁的事务只能读数据,不能修改数据.</p><p>1) <strong>排它锁(X锁)</strong></p><p>用于数据修改操作,例如 INSERT,UPDATE 或 DELETE.确保不会同时同一资源进行多重更新.</p><p>如果事务T对数据A加上排他锁后,则其他事务不能再对A加任任何类型的封锁.获准排他锁的事务既能读数据,又能修改数据。 </p><p>2) <strong>行锁带来的问题,死锁.</strong></p><p>比如 : 事务A给第1条数据加上行锁,事务B给第2条数据加上行锁,然后事务A对第2条数据进行修改操作,事务B同时对第1条数据进行修改操作,相互间等待成为死锁.</p></li></ul></li><li><p>间隙锁</p><p>事务A对id &gt; 2 and id &lt; 5的数据进行修改并加上行锁 , 那么数据库就会对当前范围上锁,事务B在事务A未提交事务前对 id = 3的数据进行修改,就会阻塞等待,直到事务A提交结束后,事务B的修改操作才会执行</p></li></ul></li><li><p>乐观锁</p><p>假设事务的操作不一定会产生此问题,不对事务进行锁定,随其修改.通过在表中增加一个标识字段(如 : 时间戳 timestamp或者更新版本 version)来检测当前数据的更新.在进行数据修改时判断此标识字段是否与原来一致,不一致则抛出异常.</p></li></ul></blockquote><h4 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a>传播行为</h4><table><thead><tr><th>事务传播行为</th><th>描述</th></tr></thead><tbody><tr><td>TransactionDefinition.PROPAGATION_<strong>REQUIRES_NEW</strong></td><td>启动新事物,如果存在一个事务，则把当前事务挂起。</td></tr><tr><td>TransactionDefinition.PROPAGATION_<strong>REQUIRED</strong></td><td>支持当前事务；如果不存在事务，则创建一个新的事务。</td></tr><tr><td>TransactionDefinition.PROPAGATION_MANDATORY</td><td>支持当前事务；如果不存在当前事务，则抛出一个异常。</td></tr><tr><td>TransactionDefinition.PROPAGATION_NESTED</td><td>如果存在当前事务，则在一个嵌套的事务中执行。</td></tr><tr><td>TransactionDefinition.PROPAGATION_NEVER</td><td>不支持当前事务；如果存在当前事务，则抛出一个异常。</td></tr><tr><td>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</td><td>不支持当前事务；而总是执行非事务性。</td></tr><tr><td>TransactionDefinition.PROPAGATION_SUPPORTS</td><td>支持当前事务；如果不存在，则执行非事务性。</td></tr><tr><td>TransactionDefinition.TIMEOUT_DEFAULT</td><td>使用默认超时的底层事务系统，或者如果不支持超时则没有。</td></tr></tbody></table><h3 id="事务超时"><a href="#事务超时" class="headerlink" title="事务超时"></a>事务超时</h3><blockquote><p>事务所允许执行的最长时间,超出则自动回滚,单位为秒</p></blockquote><h3 id="是否只读"><a href="#是否只读" class="headerlink" title="是否只读"></a>是否只读</h3><blockquote><p>代表当前事务是否只执行读取操作,声明为只读来提升读取效率.</p></blockquote><h2 id="Spring事务案例"><a href="#Spring事务案例" class="headerlink" title="Spring事务案例"></a>Spring事务案例</h2><blockquote><p>环境 : Idea + Mysql</p><p>表 :  product(商品) + stock(库存表) + user(用户表)</p><p>表结构</p><p><strong>product</strong> : </p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>商品Id</td></tr><tr><td>price</td><td>商品价格</td></tr><tr><td>name</td><td>商品名称</td></tr></tbody></table><p><strong>stock</strong> : </p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>pro_id</td><td>商品Id</td></tr><tr><td>quantity</td><td>商品数量</td></tr></tbody></table><p><strong>user</strong> : </p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>用户Id</td></tr><tr><td>name</td><td>用户名称</td></tr><tr><td>balance</td><td>用户余额</td></tr></tbody></table></blockquote><p><strong>实体类</strong>(略)</p><p><strong>Dao层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyh.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据商品的ID和购买的数量修改库存</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateStockByProId</span><span class="params">(Integer proId,Integer quantity)</span></span>;</span><br><span class="line">    <span class="comment">//根据商品编号查找商品价格</span></span><br><span class="line">    <span class="function">Integer <span class="title">findPriceByProId</span><span class="params">(Integer proId)</span></span>;</span><br><span class="line">    <span class="comment">//修改用户账户余额</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUserInfo</span><span class="params">(Integer userId,Integer cost)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyh.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDaoImp</span> <span class="keyword">implements</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStockByProId</span><span class="params">(Integer proId, Integer quantity)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"update stock set quantity = quantity - ? where pro_id = ?"</span>;</span><br><span class="line">        jdbcTemplate.update(sql,quantity,proId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">findPriceByProId</span><span class="params">(Integer proId)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select price from product where id = ?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql,Integer<span class="class">.<span class="keyword">class</span>,<span class="title">proId</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUserInfo</span><span class="params">(Integer userId, Integer cost)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"update user set balance = balance - ? where id = ?"</span>;</span><br><span class="line">        jdbcTemplate.update(sql,cost,userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Service层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyh.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line"><span class="comment">//商品结算业务</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">purchase</span><span class="params">(Integer proId,Integer userId,Integer quantity)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyh.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dyh.dao.ProductDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"productService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceImp</span> <span class="keyword">implements</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductDao productDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">purchase</span><span class="params">(Integer proId, Integer userId,Integer quantity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据购买的商品ID查找商品</span></span><br><span class="line">        Integer price = productDao.findPriceByProId(proId);</span><br><span class="line">        <span class="comment">//2.更新商品库存信息</span></span><br><span class="line">        productDao.updateStockByProId(proId,quantity);</span><br><span class="line">        <span class="comment">//3.更新用户余额信息</span></span><br><span class="line">        productDao.updateUserInfo(userId,price * quantity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"context-transaction.xml"</span>);</span><br><span class="line">    ProductService ps = context.getBean(<span class="string">"productService"</span>, ProductService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    ps.purchase(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/cache"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启组件注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.dyh"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启注入注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扫描外部文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.driverClassName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置JDBCtemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从测试结果看,当用户购买<code>quantity</code>个商品后,可以正确的进行结算.接下来考虑几个问题.</p><ul><li>如果用户购买的商品的个数大于库存</li><li>如果用户购买的商品的总价大于余额</li></ul><p>解决办法 : </p><ul><li>在修改数量之前对商品的数量进行查询,判断数量是否满足,如果不满足则抛出异常,取消修改.</li><li>在修改余额之前查询用户余额,如果用户余额不足,则抛出异常取消修改</li></ul><p><strong>修改后的Dao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyh.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDaoImp</span> <span class="keyword">implements</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStockByProId</span><span class="params">(Integer proId, Integer quantity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询商品数量判断库存是否足够</span></span><br><span class="line">        String sql1 = <span class="string">"select quantity from stock where pro_id = ? "</span>;</span><br><span class="line">        Integer stock = jdbcTemplate.queryForObject(sql1, Integer<span class="class">.<span class="keyword">class</span>, <span class="title">proId</span>)</span>;</span><br><span class="line">        <span class="comment">//判断商品库存是否足够</span></span><br><span class="line">        <span class="keyword">if</span>(quantity &gt; stock)&#123;</span><br><span class="line">            <span class="comment">//如果超出库存则抛出异常,不能执行下面的修改操作</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"库存不足.."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String sql = <span class="string">"update stock set quantity = quantity - ? where pro_id = ?"</span>;</span><br><span class="line">        jdbcTemplate.update(sql,quantity,proId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">findPriceByProId</span><span class="params">(Integer proId)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select price from product where id = ?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql,Integer<span class="class">.<span class="keyword">class</span>,<span class="title">proId</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUserInfo</span><span class="params">(Integer userId, Integer cost)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先查询余额</span></span><br><span class="line">        String sql1 = <span class="string">"select balance from user where id = ?"</span>;</span><br><span class="line">        Integer balance = jdbcTemplate.queryForObject(sql1, Integer<span class="class">.<span class="keyword">class</span>, <span class="title">userId</span>)</span>;</span><br><span class="line">        <span class="comment">//如果购买的花费大于余额则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(cost &gt; balance)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"用户余额不足"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String sql = <span class="string">"update user set balance = balance - ? where id = ?"</span>;</span><br><span class="line">        jdbcTemplate.update(sql,cost,userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改过后的代码看似没有问题,但分析以下场景.</p><ul><li>在结算业务中我们是先更新商品库存,然后修改用户余额,那如果出现商品的库存足够,而用户余额不够的情况,就会执行库存的修改,而余额的修改则会抛出异常不会修改.就等于商品库存少了,但是用户钱没少.那么为了避免这种情况的发生,我们就需要事务来介入了.</li></ul><h3 id="编程式事务-了解"><a href="#编程式事务-了解" class="headerlink" title="编程式事务(了解)"></a>编程式事务(了解)</h3><blockquote><p>在代码编程过程中添加事务管理</p></blockquote><p><strong>普通编程式事务</strong></p><p><strong>修改Service类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyh.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dyh.dao.ProductDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionStatus;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"productService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceImp</span> <span class="keyword">implements</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductDao productDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PlatformTransactionManager ptm;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TransactionDefinition td;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">purchase</span><span class="params">(Integer proId, Integer userId,Integer quantity)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//获取事务状态,并开启事务</span></span><br><span class="line">            TransactionStatus status = ptm.getTransaction(td);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.根据购买的商品ID查找商品</span></span><br><span class="line">            Integer price = productDao.findPriceByProId(proId);</span><br><span class="line">            <span class="comment">//2.更新商品库存信息</span></span><br><span class="line">            productDao.updateStockByProId(proId,quantity);</span><br><span class="line">            <span class="comment">//3.更新用户余额信息</span></span><br><span class="line">            productDao.updateUserInfo(userId,price * quantity);</span><br><span class="line">            <span class="comment">//成功执行事务提交</span></span><br><span class="line">            ptm.commit(status);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//事务回滚</span></span><br><span class="line">            ptm.rollback(status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">&lt;!--配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pmt"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置默认事务定义--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"td"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.DefaultTransactionDefinition"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用property配置传播行为,隔离级别等属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>基于TransactionTemplate的编程式事务</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyh.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dyh.dao.ProductDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.TransactionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"productService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceImp</span> <span class="keyword">implements</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductDao productDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TransactionTemplate tt;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">purchase</span><span class="params">(Integer proId, Integer userId,Integer quantity)</span> </span>&#123;</span><br><span class="line">        tt.execute(<span class="keyword">new</span> TransactionCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">doInTransaction</span><span class="params">(TransactionStatus transactionStatus)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//1.根据购买的商品ID查找商品</span></span><br><span class="line">                    Integer price = productDao.findPriceByProId(proId);</span><br><span class="line">                    <span class="comment">//2.更新商品库存信息</span></span><br><span class="line">                    productDao.updateStockByProId(proId,quantity);</span><br><span class="line">                    <span class="comment">//3.更新用户余额信息</span></span><br><span class="line">                    productDao.updateUserInfo(userId,price * quantity);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//回滚</span></span><br><span class="line">                    transactionStatus.setRollbackOnly();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"tm"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"tt"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"tm"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缺点</strong> : </p><ul><li>事务代码直接嵌入在业务代码中,不易维护.</li></ul><h3 id="声明式事务-重点"><a href="#声明式事务-重点" class="headerlink" title="声明式事务(重点)"></a>声明式事务(重点)</h3><p>优点</p><ul><li>通过AOP将事务嵌入到代码中,更为灵活,方便后期维护.</li></ul><h4 id="xml配置方式"><a href="#xml配置方式" class="headerlink" title="xml配置方式"></a>xml配置方式</h4><blockquote><p>不需要修改任何代码</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"tm"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"tm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"purchase"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置AOP的Pointcut --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.dyh.service.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h4><blockquote><p>使用<code>@Transactional</code>注解 , 更简单了… , 只需要在xml文件中配置事务注解驱动</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"tm"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"tm"</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">purchase</span><span class="params">(Integer proId, Integer userId,Integer quantity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.根据购买的商品ID查找商品</span></span><br><span class="line">    Integer price = productDao.findPriceByProId(proId);</span><br><span class="line">    <span class="comment">//2.更新商品库存信息</span></span><br><span class="line">    productDao.updateStockByProId(proId, quantity);</span><br><span class="line">    <span class="comment">//3.更新用户余额信息</span></span><br><span class="line">    productDao.updateUserInfo(userId, price * quantity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring传播行为"><a href="#Spring传播行为" class="headerlink" title="Spring传播行为"></a>Spring传播行为</h3><blockquote><p>修改案例,添加结算多种商品</p></blockquote><p>思考 : </p><ul><li>当结算多个商品时,如果有第一个商品结算成功,第二个商品结算失败是单个回滚还是全部回滚?</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyh.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ShopService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">payment</span><span class="params">(Map&lt;Integer , Integer&gt; maps, Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyh.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"shopService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShopServiceImp</span> <span class="keyword">implements</span> <span class="title">ShopService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">payment</span><span class="params">(Map&lt;Integer, Integer&gt; maps, Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//遍历map集合结算多种商品</span></span><br><span class="line">        maps.forEach((key,value)-&gt;&#123;</span><br><span class="line">            productService.purchase(key,userId,value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果没有修改事务传播行为,那么意味着为默认TransactionDefinition.PROPAGATION_<strong>REQUIRED</strong>级别.思考结果为 : 如果第一个商品结算成功,第二个商品结算失败,整个回滚</li></ul><p><strong>修改purchase()方法的@Transactional注解的传播行为为 : PROPAGATION_REQUIRES_NEW</strong>级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dyh.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"shopService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShopServiceImp</span> <span class="keyword">implements</span> <span class="title">ShopService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">payment</span><span class="params">(Map&lt;Integer, Integer&gt; maps, Integer userId)</span> </span>&#123;</span><br><span class="line">        maps.forEach((key,value)-&gt;&#123;</span><br><span class="line">            productService.purchase(key,userId,value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果为 第一个事务成功执行,第二个事务回滚.</li></ul><h4 id="传播行为总结"><a href="#传播行为总结" class="headerlink" title="传播行为总结"></a>传播行为总结</h4><p><strong>REQUIRED</strong></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201031235548.png" alt="20201031235548"></p><p><strong>REQUIRES_NEW</strong></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201031235712.png" alt="20201031235712"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030111805.png&quot; alt=&quot;20201030111805&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="spring" scheme="http://fightlee.fun/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>javascript高级04</title>
    <link href="http://fightlee.fun/javascript%E9%AB%98%E7%BA%A704.html"/>
    <id>http://fightlee.fun/javascript%E9%AB%98%E7%BA%A704.html</id>
    <published>2020-10-30T03:04:55.000Z</published>
    <updated>2020-11-04T18:12:08.207Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201028004154.png" alt="20201028004154"></p><a id="more"></a><h1 id="javascript高级-四"><a href="#javascript高级-四" class="headerlink" title="javascript高级(四)"></a>javascript高级(四)</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>​    闭包的形成与<strong>变量的作用域</strong>以及<strong>变量的生命周期</strong>密切相关.</p><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>​    变量的作用域,指<strong>变量的有效作用范围</strong>.</p><ul><li>在JavaScript中,如果变量前没有加上<code>var</code>关键字,那么此时的变量为<strong>全局变量</strong>,这种命名方式很不安全,尽量避免使用.</li><li>我们可以在函数内部对变量使用<code>var</code>进行声明,此时的变量为<strong>局部变量</strong>,即当前的变量的作用域只能在函数内部使用,函数外部使用无效.这里和Java其实是一样的.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//1</span></span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//报错 , a is not defined</span></span><br></pre></td></tr></table></figure><h3 id="变量的生命周期"><a href="#变量的生命周期" class="headerlink" title="变量的生命周期"></a>变量的生命周期</h3><p>​    生命周期 : 一个对象从创建到销毁的过程.</p><ul><li>全局变量 : 除非主动销毁这个变量,不然就是其生命周期就是永久的</li><li>局部变量 : 当函数执行完退出后,变量就会被释放. </li></ul><p>举个栗子 : </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//1</span></span><br><span class="line">&#125;</span><br><span class="line">fun1();<span class="comment">//函数执行完后,a被销毁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//思考 : 为什么这个函数fun2执行完后a没有被销毁.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fun2();</span><br><span class="line">f();</span><br></pre></td></tr></table></figure><h3 id="从根本上理解什么是作用域"><a href="#从根本上理解什么是作用域" class="headerlink" title="从根本上理解什么是作用域"></a>从根本上理解什么是作用域</h3><h4 id="编译原理-了解"><a href="#编译原理-了解" class="headerlink" title="编译原理(了解)"></a>编译原理(了解)</h4><ul><li><p>分词/词法分析</p><p>如果在一个javascript源码中书写了<code>var a = 2;</code> , 那么javascript会将其分解成以下这些词法单元(<strong>Token</strong>) : <code>var</code>, <code>a</code> , <code>=</code> , <code>2</code> ,<code>;</code> . 空格是否为合法的词法单元,取决于空格在这门语言中是否有意义,这个分解的过程就称之为<strong>分词过程</strong>.</p><p><strong>例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//词法分析 ----&gt; 将所有的单元抽取出来通过分词器转换成token数组,用来确定这些单词的词性.其中一单发现无效单词,就会报错.</span></span><br><span class="line"><span class="comment">//[&#123;value:'var',type:'keyword'&#125;,&#123;value:'a',type:'identifier'&#125;,&#123;value:'=',type:'Punctuator'&#125;,&#123;value:'2',type:'Numeric'&#125;,&#123;value:':',type:'Punctuator'&#125;]</span></span><br></pre></td></tr></table></figure></li><li><p>解析/语法分析</p><p>紧接上一个过程,将词法单元流(数组)转换成一个由元素逐级嵌套所组成的代表程序语法结构的树.这个数就称之为”<strong>抽象语法树</strong>“(Abstract Syntax Tree , AST) . AST以树状的形式表现语言的语法结构,树上的每个节点都表示源代码中的一种结构.<a href="https://resources.jointjs.com/demos/javascript-ast" target="_blank" rel="noopener">AST树</a></p><p>比如 : <code>5 + (10 * 2)</code>  生成的AST树</p></li></ul><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201103032429.png" alt="20201103032429" style="zoom: 67%;" />  <ul><li><p>代码生成</p><p>将AST树转换成可执行的代码的过程就被称为<strong>代码生成</strong>了.这个过程与语言,目标平台等息息相关.简单来说就是通过某种方法将源码通过语法分析后的AST树转换成一组机器指令,接着创建变量a,分配内存等操作,最后给变量a赋值.</p></li></ul><h4 id="执行过程-了解"><a href="#执行过程-了解" class="headerlink" title="执行过程(了解)"></a>执行过程(了解)</h4><p>​    <code>var a = 2;</code>的执行过程主要分为2个阶段 : 这2个阶段涉及到三个对象</p><ul><li>JavaScript引擎 :  如果把JavaScript程序当成一个公司,那么JavaScript引擎就是整个公司的<strong>Boss</strong>,负责整个JavaScript程序的编译及执行过程.</li><li>编译器 :  编译器就是公司里Boss的<strong>最佳员工</strong>,所有公司的脏活累活全都交给他来干,比如(词法分析啊,生成AST树啊,代码生成什么的.)</li><li>作用域 : 可以将作用域想象成另外一个员工,它负责收集并维护由所有声明的标识符(变量)组成的一系列查询,并实施一套非常严格的规则,确保当前执行的代码对这些标识符的访问权限,我们可以认为它是公司的<strong>安全员</strong>.这里还要注意,公司中可能有不同部门,部门中还有其他部门,那么每个部门都有其<strong>部门所在的安全员</strong>.</li></ul><ol><li>当编译器,我们的<strong>最佳员工</strong>碰到<code>var a</code>, <strong>最佳员工</strong>就会去找作用域<strong>安全员</strong>,问他 : “喂,伙计,你这里有没有名称叫<code>a</code>的变量啊?”如果有,那么<strong>最佳员工</strong>就会忽略该声明,继续编译的干活,如果没有,就会叫<strong>安全员</strong>在当前他所在的部门中声明一个新的变量,名字叫做<code>a</code>. </li><li>在<strong>Boss</strong>开始干活时,也会问<strong>安全员</strong>: “喂,你这部门有没有<code>a</code>这个变量啊?”如果有,<strong>Boss</strong>就会开始使用这个变量<code>a</code>,如果没有Boss,就会继续问其他<strong>安全员</strong>,直到有一个<strong>安全员</strong>记录,并收集了<code>a</code>变量,就将<code>2</code>赋值给变量<code>a</code>,如果没找到,<strong>Boss</strong>反手就是一巴掌,并给我们抛出一个异常,=-=!!</li></ol><h4 id="查询过程-了解"><a href="#查询过程-了解" class="headerlink" title="查询过程(了解)"></a>查询过程(了解)</h4><p>​    JavaScript中的<strong>Boss(引擎)</strong>执行代码时,会通过查找变量<code>a</code>来判断是否声明过,查找过程需要不断的询问<strong>作用域</strong>,也就是我们的安全员.在查找的过程中,Boss会通过2种方式来进行查询.</p><ul><li><p>LHS(LEFT-HAND-SIDE) : 赋值操作的左侧 , 查找变量本身,就是为了给变量赋值.</p></li><li><p>RHS(RIGHT-HAND-SIDE) : 赋值操作的右侧 , 可以看成是(retrieve his source value) 获取它的源值,就是查找该变量的值,为了使用其中的值.</p><p> 当变量出现在赋值操作的左边时,进行LHS查询,出现在右侧进行RHS查询.</p></li></ul><p>分析以下代码的查询过程 : </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>)</span>&#123;<span class="comment">//a = 2</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><ol><li>要执行foo()函数,所以对foo()函数进行RHS查询</li><li>foo()函数中参数a的赋值,先查询a在作用域中是否存在,这里进行LHS查询,然后将2赋值给a.</li><li>要执行console.log()方法,首先对console对象进行赋值操作,进行RHS查询,然后检查log()函数在对象中是否存在</li><li>对log()方法中的参数a进行赋值操作,所以对a进行RHS查询,然后将2赋值给a.</li></ol><h4 id="作用域嵌套"><a href="#作用域嵌套" class="headerlink" title="作用域嵌套"></a>作用域嵌套</h4><p>​    前文说过,在一个公司中,可能包含很多部门,在部门下还有其他部门.那么在程序中也如此,在程序的运行过程中,通常要顾及到几个作用域.</p><p>​    当函数嵌套在另一个函数中时,就叫<strong>作用域的嵌套</strong>.如果引擎在当前作用域下没找到该变量,那么就会继续向外层嵌套的作用域去查找,直到最外层的作用域(全局作用域)为止,如果还没找到则抛出异常.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> d = <span class="number">4</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">inner3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(a);</span><br><span class="line">            <span class="built_in">console</span>.log(b);</span><br><span class="line">            <span class="built_in">console</span>.log(c);</span><br><span class="line">            <span class="built_in">console</span>.log(d);</span><br><span class="line">        &#125;</span><br><span class="line">        inner3();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inner1();</span><br><span class="line">    inner2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">outter();</span><br></pre></td></tr></table></figure><p>​    我们可以将此过程想象成以下场景 : 在这个查询过程中,LHS和RHS都会向当前层级进行搜寻,如果没有找到就往外层寻找,直到最外层全局作用域.</p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201103112333.png" alt="20201103112333"></p><p>​    那么既然LHS和RHS都会向外层查找,那么为什么还要区分LHS和RHS?</p><p>​    因为2者在没有找到变量时,所做的操作是不一样的.</p><ul><li>在执行RHS查询时在整个作用域都没有找到要赋值的变量.那么就会抛出异常.</li><li>在执行LHS查询时,如果在最顶层作用域(全局作用域)都没找到该变量,我们的全局作用域就会帮助我们创建一个具有该名称的变量,并交给引擎运行,如果在<code>严格模式</code>下此操作无效.</li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>LHS查询,目的要找到该变量进行赋值操作.</li><li>RHS查询,目的为获取该变量的值.</li></ul><h4 id="词法作用域-amp-动态作用域"><a href="#词法作用域-amp-动态作用域" class="headerlink" title="词法作用域&amp;动态作用域"></a>词法作用域&amp;动态作用域</h4><p>​    词法作用域是由我们在写代码时将变量和块作用域写在哪里来决定的,词法分析器处理代码时会保持作用域不变.</p><p>​    动态作用域不关系函数和作用域是如何声明以及在何处声明,只关心他们从何处调用.</p><p>​    JavaScript并不具备动态作用域,这里只是为了拿出来和词法作用域做相对理解.    </p><p>看下面例子: 分析词法作用域和动态作用域的结果.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure><ul><li>由于词法作用域只跟声明的函数和块的位置有关,跟调用的位置无关,所以当在foo函数中使用console.log()中使用变量a时,就会在当前作用域下寻找有没有a变量,如果没有,继续往上层找,此时在全局作用域找到var a = 2;所以输出<code>2</code></li><li>动态作用域跟调用的位置有关,那么我们从函数调用的位置开始寻找,首先还是从函数foo内部寻找,没找到从调用foo函数的bar函数内部找,此时找到var a = 3,那么就输出<code>3</code></li></ul><h4 id="词法欺骗"><a href="#词法欺骗" class="headerlink" title="词法欺骗"></a>词法欺骗</h4><p>​    在程序运行过程中”修改”(欺骗)词法作用域的行为.</p><h5 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h5><p>​    该函数用来执行参数中的带JavaScript代码的字符串内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">str,a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">eval</span>(str);<span class="comment">//欺骗</span></span><br><span class="line">    <span class="built_in">console</span>.log(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">foo(<span class="string">'var b = 3;'</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>​    注意 : 在<code>严格模式</code>下,eval()在运行时也有其自己的词法作用域,所以其声明不能修改所在的作用域.</p><h5 id="with"><a href="#with" class="headerlink" title="with"></a>with</h5><pre><code>with 语句用于设置代码在特定对象中的作用域。 </code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">a: <span class="number">1</span>,</span><br><span class="line">b: <span class="number">2</span>,</span><br><span class="line">c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 赋值的操作</span></span><br><span class="line">obj.a = <span class="number">2</span>;</span><br><span class="line">obj.b = <span class="number">3</span>;</span><br><span class="line">obj.c = <span class="number">4</span>;</span><br><span class="line"><span class="comment">//使用with</span></span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">a = <span class="number">3</span>;</span><br><span class="line">b = <span class="number">4</span>;</span><br><span class="line">c = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">obj</span>)</span>&#123;<span class="comment">// = o2</span></span><br><span class="line">    <span class="keyword">with</span>(obj)&#123;<span class="comment">// = o2</span></span><br><span class="line">        a = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">    a:<span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123;</span><br><span class="line">    b:<span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line">foo(o1);</span><br><span class="line"><span class="built_in">console</span>.log(o1.a);</span><br><span class="line"></span><br><span class="line">foo(o2);</span><br><span class="line"><span class="built_in">console</span>.log(o2.a);</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>​    with将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域,因此这个对象的属性也会被处理为定义在这个作用域中的词法标识符.</p><p>​    简单来说 , eval()函数中的参数中有一个或者多个声明的代码,那么就会修改其所处的词法作用域,而with就会根据传入的对象凭空创建一个全新的词法作用域.</p><p>​    也就是说在此处,o1对象进入到foo函数内部传递到with语句中,with所声明的作用域就是o1,那么在o1作用域中有一个a属性的标识符,就做一个LHS引用给a属性赋值.同样的,o2对象传进去后,此时with语句的词法作用域为o2对象,那么o2作用域中没有找到a属性的定义,所有a的值为undefined,但是根据LHS引用的规则,如果在当前作用域下没有找到,就会向上继续寻找,如果到全局作用域下还没找到时,就会帮助我们创建一个全局变量a =2.所以紧接着在下方输出<code>console.log(a);//2</code></p><h5 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h5><p>​    虽然eval()和with都能使Javascript完成更为复杂的操作,但是由于性能和严格模式的原因,现在基本已经完全被禁用.</p><h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><p>​    这个函数中的全部变量都可以在整个函数的范围内使用及复用.</p><p>​    函数作用域的作用 : </p><ul><li>用来封装要实现的功能逻辑</li><li>用来隐藏某些变量或者函数(相当于Java私有化,封装的特性)</li></ul><h4 id="函数表达式和函数声明"><a href="#函数表达式和函数声明" class="headerlink" title="函数表达式和函数声明"></a>函数表达式和函数声明</h4><h5 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h5><p>​    声明函数可以用来隐藏某些代码和函数的实现,但是会污染当前所在作用域,并且需显示调用才能运行.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    解决”污染”作用域的方法,使用<strong>IIFE</strong>.</p><h5 id="匿名函数表达式"><a href="#匿名函数表达式" class="headerlink" title="匿名函数表达式"></a>匿名函数表达式</h5><p>​    缺点</p><ul><li>不易调试</li><li>函数需要引用自身需要使用过时的arguments.callee.</li><li>可读性差</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">&#125;,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h5 id="具名函数表达式"><a href="#具名函数表达式" class="headerlink" title="具名函数表达式"></a>具名函数表达式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timeHandler</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">&#125;,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>​    区别函数声明和函数表达式,就看当前函数所在位置的第一个词是function就是声明,反之为函数表达式.</p><h4 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h4><p>​    IIFE : (Immediately Invoked Function Expression) 立即执行函数.</p><p>​    函数表达式语法 : 将函数包裹在()内部当成表达式,再使用()调用该函数表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本语法 : </span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;..&#125;)();</span><br><span class="line"><span class="comment">//用法 : 立即执行test函数</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;)(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//第二种形式</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;..&#125;())</span><br></pre></td></tr></table></figure><p>​    作用 : 可以当成函数调用,并传递内部运行时需要的参数.</p><h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><p>​    JavaScript中只要用var声明了变量,那么就意味着没有块级作用域.看例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);<span class="comment">//0-9</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);<span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h5 id="let-amp-const"><a href="#let-amp-const" class="headerlink" title="let&amp;const"></a>let&amp;const</h5><p>​    使用let来声明局部作用域</p><p>​    在使用const声明局部作用域的同时,将变量定义成常量.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);<span class="comment">//0-9</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><h4 id="变量声明-amp-函数声明提升"><a href="#变量声明-amp-函数声明提升" class="headerlink" title="变量声明&amp;函数声明提升"></a>变量声明&amp;函数声明提升</h4><p>JavaScript语法解析过程分2步 : 1. 预编译. 2.执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//输出?</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//输出?</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//输出?</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//输出?</span></span><br></pre></td></tr></table></figure><p>结论 : 变量和函数的所有声明优先于代码的处理.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test();<span class="comment">//输出?</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论 : 函数表达式不会提升.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test();</span><br><span class="line"><span class="keyword">var</span> test;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出?</span></span><br></pre></td></tr></table></figure><p>结论 : 函数优先于变量的提升</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">test();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//IE11以下 输出2 IE11及新版本浏览器报错</span></span><br><span class="line">test();</span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(a)&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//IE11及支持es6语法的浏览器都有块级作用域</span></span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><p>结论 : 同一作用域下进行重复声明会覆盖.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person;</span><br><span class="line"><span class="built_in">console</span>.log(person);<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(fun);<span class="comment">//fun()&#123;...&#125;</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="string">'jack'</span></span><br><span class="line"><span class="built_in">console</span>.log(person);<span class="comment">//'jack'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> person;</span><br><span class="line">    <span class="built_in">console</span>.log(person);<span class="comment">//undefined</span></span><br><span class="line">    <span class="keyword">var</span> person = <span class="string">'tom'</span></span><br><span class="line">    <span class="built_in">console</span>.log(person);<span class="comment">//tom</span></span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br><span class="line"><span class="built_in">console</span>.log(person);<span class="comment">//jack</span></span><br></pre></td></tr></table></figure><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><h4 id="自由变量"><a href="#自由变量" class="headerlink" title="自由变量"></a>自由变量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">200</span></span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">// 这里的a在这里就是一个自由变量</span></span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><h4 id="作用域链-1"><a href="#作用域链-1" class="headerlink" title="作用域链"></a>作用域链</h4><p>在上述栗子中,自由变量a向上查找的过程就成为作用域链.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">z</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">z</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">100</span>;</span><br><span class="line">        y = x + z;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">    bar(<span class="number">20</span>);</span><br><span class="line">    bar(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(x,y)</span><br></pre></td></tr></table></figure><p><strong>使用Google Debugger,最后得出最终结果</strong></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201105015422.png" alt="20201105015422"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201028004154.png&quot; alt=&quot;20201028004154&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://fightlee.fun/categories/web/"/>
    
    
      <category term="js高级" scheme="http://fightlee.fun/tags/js%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>javascript高级03</title>
    <link href="http://fightlee.fun/javascript%E9%AB%98%E7%BA%A703.html"/>
    <id>http://fightlee.fun/javascript%E9%AB%98%E7%BA%A703.html</id>
    <published>2020-10-30T03:04:45.000Z</published>
    <updated>2020-11-03T06:42:14.766Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201028004154.png" alt="20201028004154"></p><a id="more"></a><h1 id="javascript高级-三"><a href="#javascript高级-三" class="headerlink" title="javascript高级(三)"></a>javascript高级(三)</h1><h2 id="对象-二"><a href="#对象-二" class="headerlink" title="对象(二)"></a>对象(二)</h2><h3 id="类和类的成员"><a href="#类和类的成员" class="headerlink" title="类和类的成员"></a>类和类的成员</h3><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201101103146.png" alt="20201101103146"></p><p>​    在Java中,类定义了对象的结构.类确定了一个对象包含有哪些域以及每个域包含什么样的数据类,类也定义了对对象进行操作的方法.虽然JavaScript并没有正式类的概念,<strong>但是它用构造函数和原型对象模拟了类</strong>.</p><p>​    在Java中,一个类的成员包含 : 实例属性,实例方法,类属性和类方法.那在JavaScript中是如何体现的呢?</p><blockquote><p><strong>实例属性 : 在对象中用构造函数创建或初始化的属性,相当于Java中的普通成员属性.</strong></p></blockquote><blockquote><p><strong>实例方法 : 每个实例方法都是由类的所有实例共享,所以应该通过构造函数的原型对象中的一个属性设置为函数值来实现.相当于Java中的普通方法</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;<span class="comment">//实例属性</span></span><br><span class="line">    <span class="keyword">this</span>.age = age;<span class="comment">//实例属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例方法</span></span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">',hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类属性</span></span><br><span class="line">Person.country = <span class="string">'中国'</span>;<span class="comment">//直接通过Person.country来调用</span></span><br><span class="line"><span class="comment">//类方法,和类属性类似</span></span><br><span class="line">Person.equals = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.age == b.age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>类属性 : 和Java中的static关键字修饰的属性一致,每个类的实例都共享着这一属性.类属性是通过类存取的,JavaScript中,也可已使用类名/构造函数名.属性来直接定义一个类属性,为类/构造函数中自身的一个属性</strong> </p></blockquote><blockquote><p><strong>类方法 : 和Java中的static关键字修饰的方法一致,我们可以通过类名/构造函数名.方法名()直接调用,如javascript中的JSON.stringify(),JSON.parse()方法等,跟类的成员没有直接关系.</strong> </p></blockquote><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>​    如Java一般,JavaScript也有着继承这一特性.接下来我们详细介绍在JavaScript如何来体现继承</p><h4 id="call-amp-apply"><a href="#call-amp-apply" class="headerlink" title="call&amp;apply"></a>call&amp;apply</h4><blockquote><p>众所周知,在JavaScript中,function函数也是一个对象,那么是对象,就有其构造函数Function,有构造函数就有属性prototype指向其原型,在ECMAScript3中给Function原型中定义了2个方法,就是Function.prototype.<strong>call</strong>和Function.prototype.<strong>apply</strong></p></blockquote><h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><p>​    call和apply的作用一模一样,区别就在于传入的参数形式不同</p><h5 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h5><p><code>function.apply(thisObj[, argArray])</code></p><p>​    apply接收<strong>2个参数</strong>,<strong>第一个参数指定了函数体内this对象的指向</strong>,第二个参数为一个带下标的集合,这个集合可以是数组,也可以是类数组,apply方法把这个集合中的元素作为参数传递给被调用的函数.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义apply要调用的函数对象,接收a,b,c三个参数</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(a,b,c);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> == <span class="built_in">window</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> <span class="keyword">instanceof</span> Person);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数的apply方法时,向fn对象传参,apply只能接收2个参数.</span></span><br><span class="line">fn.apply(<span class="literal">null</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]); <span class="comment">// this == window 返回 true,this instanceof Person返回false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//apply方法还能改变fn对象中this的指向.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">fn.apply(<span class="keyword">new</span> Person(),[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);<span class="comment">// this == window 返回 false,this instanceof Person返回true</span></span><br></pre></td></tr></table></figure><h5 id="call"><a href="#call" class="headerlink" title="call"></a>call</h5><p><code>function.call(thisObj[, arg1[, arg2[, [,...argN]]]]);</code></p><p>​    call传入的<strong>参数数量不固定</strong>,和apply相同的是,<strong>第一个参数也是代表函数体内的this指向</strong>,从第二个参数开始往后,每个参数被依次传入函数内部.我们可以认为call是apply的语法糖(简写)写法</p><p>​    和上栗一样,只是将apply修改为call,<strong>调用call传参数时,第一个仍然为传入函数体中的对象,也就是this指向,第二个参数可以认为是Java中的可变数组似的传参即可,所以结果也是相同的</strong>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> == <span class="built_in">window</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> <span class="keyword">instanceof</span> Person);</span><br><span class="line">&#125;</span><br><span class="line">fn.call(<span class="literal">null</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">// this == window 返回 true,this instanceof Person返回false</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">fn.call(<span class="keyword">new</span> Person(),<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);<span class="comment">// this == window 返回 false,this instanceof Person返回true</span></span><br></pre></td></tr></table></figure><h5 id="apply和call的应用"><a href="#apply和call的应用" class="headerlink" title="apply和call的应用"></a>apply和call的应用</h5><ul><li><p>毫无疑问,第一个应用肯定就是来<strong>改变function中this指向</strong>.</p><p>比如我们监听button一个点击事件,而事件回调中包含着其他函数.</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btnClick"</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'#btnClick'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//这里的this就肯定是当前button本身</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.innerHTML);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//如果在回调内部定义addText()方法,修改当前按钮中的文本</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">updateText</span><span class="params">(text)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//这里是window对象,如果使用this.innerHTML赋值肯定不行.</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        updateText(<span class="string">'我不是按钮'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <strong>修改后的代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#btnClick'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//这里的this就肯定是当前button本身</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.innerHTML);</span><br><span class="line">    <span class="comment">//如果在回调内部定义addText()方法,修改当前按钮中的文本</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">updateText</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//这里为button对象</span></span><br><span class="line">        <span class="keyword">this</span>.innerHTML = text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用call将当前本身button对象传入到updateText()函数中</span></span><br><span class="line">    updateText.call(<span class="keyword">this</span>,<span class="string">'我不是按钮'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>第二个应用, 借用其他对象的方法 , 有2种实现场景.</p><p> 第一种场景 : <strong>借用构造函数,实现继承</strong></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Person的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//借用Person的构造函数为Student对象中的属性赋值</span></span><br><span class="line">    <span class="comment">//一个仿super()的用法.并且会修改Person构造中this的指向,并将Student()中的参数全部赋值给Person()</span></span><br><span class="line">    Person.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">'Jack Ma'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(stu1.getName());<span class="comment">//Jack Ma</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu2 = <span class="keyword">new</span> Student(<span class="string">'Jack Chen'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(stu2.getName());<span class="comment">//Jack Chen</span></span><br></pre></td></tr></table></figure><p>​    第二种场景 : <strong>借其他对象中的方法来使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数中的参数列表arguments是一个类数组对象,虽然也有"下标"的概念,但他并非真正的数组,所以也不能像数组一样,进行数组的排序或者添加新元素.如</span></span><br><span class="line"><span class="comment">//这里将 function sort()&#123;&#125;返回一个函数对象直接调用.</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">Array</span>.prototype.sort.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);<span class="comment">//11,15,22,33</span></span><br><span class="line">&#125;)(<span class="number">33</span>,<span class="number">22</span>,<span class="number">11</span>,<span class="number">15</span>)</span><br></pre></td></tr></table></figure><h5 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h5><p>​    bind方法的作用和传参和call一模一样,只不过和call不同的是,调用bind后返回的是一个函数对象,需要再次调用才能改变函数内部this指针的指向.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'瞎子'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shows</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'盲僧'</span></span><br><span class="line">&#125;</span><br><span class="line">shows();<span class="comment">//瞎子</span></span><br><span class="line"><span class="comment">//使用bind后,需要再次调用.</span></span><br><span class="line">shows.bind(obj)();<span class="comment">//盲僧</span></span><br><span class="line">shows.call(obj);<span class="comment">//盲僧</span></span><br></pre></td></tr></table></figure><h5 id="bind的应用"><a href="#bind的应用" class="headerlink" title="bind的应用"></a>bind的应用</h5><p>​    bind的应用比较apply和call更为常用.由于bind()函数调用后会返回一个新的函数,那么就意味着我可以在其他任意地方来调用绑定过其他对象的函数来使用,但是call和apply就得立马使用.</p><p><strong>修改上面按钮的例子</strong></p><p>​    在修改文本时,需要等待2秒钟后才能修改.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btnClick"</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'#btnClick'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">updateText</span><span class="params">(text)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        updateText(<span class="string">'我不是按钮'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>修改后</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#btnClick'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//设置定时函数,2秒后修改按钮的文本</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        update();</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">//修改文本的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">updateText</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.innerHTML = text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果使用call或者apply 会立即调用.</span></span><br><span class="line">    <span class="comment">// updateText.call(this,'我不是按钮');</span></span><br><span class="line">    <span class="comment">//需要在setTimeout中延时调用则需要使用bind</span></span><br><span class="line">    <span class="keyword">var</span> update = updateText.bind(<span class="keyword">this</span>,<span class="string">'我不是按钮'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>再次修改后</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#btnClick'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//设置定时函数,2秒后修改按钮的文本</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.innerHTML = <span class="string">'Hello'</span>;</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>),<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><p>​    前文的介绍中我们已经介绍过原型和原型链,那么接下来我们使用原型链的继承方式来让一个对象继承自另一个对象.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.letters = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayHi= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建字类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//子类的原型指向父类原型,可以使用父类原型中定义的方法</span></span><br><span class="line">Student.prototype = Person.prototype;</span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student();</span><br><span class="line">student.sayHi();<span class="comment">//Hello</span></span><br></pre></td></tr></table></figure><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201101171014.png" alt="20201101171014"></p><ul><li>缺点 : 在修改子类原型时,等同于直接修改父类原型.</li></ul><p><strong>修改后</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.letters = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建字类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">//替代 : 子类的原型指向父类对象</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//修改对象后记得重新给构造赋值</span></span><br><span class="line">Student.prototype.constructor = Student;</span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">stu1.sayHi();<span class="comment">//可以调用</span></span><br><span class="line"><span class="keyword">var</span> stu2 = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//优点 : 可以通过 instanceof 检查</span></span><br><span class="line"><span class="built_in">console</span>.log(stu1 <span class="keyword">instanceof</span> Student); <span class="comment">//true</span></span><br><span class="line"><span class="comment">/*缺点 : 1.父类中的实例属性继承下来再Student原型中变成了每个Student实例的公共属性.</span></span><br><span class="line"><span class="comment">2.不能使用父类中的构造传参赋值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">stu1.letters.push(<span class="string">'d'</span>); <span class="comment">//stu1.letters = a,b,c,d</span></span><br><span class="line"><span class="built_in">console</span>.log(stu2.letters); <span class="comment">//stu2.letters = a,b,c,d</span></span><br></pre></td></tr></table></figure><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201101171847.png" alt="20201101171847"></p><h4 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h4><p>​    讲apply和call的作用时,即提过借用构造函数继承.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Person的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.letters = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在Person原型上定义实例方法给每个对象成员调用获取其属性值</span></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//借用Person的构造函数为Student对象中的属性赋值</span></span><br><span class="line">    <span class="comment">//一个仿super()的用法.并且会修改Person构造中this的指向,并将Student()中的参数全部赋值给Person()</span></span><br><span class="line">    Person.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">'Jack Ma'</span>);</span><br><span class="line"><span class="keyword">var</span> stu2 = <span class="keyword">new</span> Student(<span class="string">'Jack Chen'</span>);</span><br><span class="line">stu1.letters.push(<span class="string">'d'</span>);<span class="comment">//stu1.letters = a,b,c,d</span></span><br><span class="line"><span class="built_in">console</span>.log(stu2.letters);<span class="comment">//stu2.letters = a,b,c</span></span><br><span class="line">stu1.getName();<span class="comment">//报错</span></span><br><span class="line"><span class="comment">/*优点 : 1.父类中的实例属性仍然是实例属性</span></span><br><span class="line"><span class="comment">2.可以向父类的构造传参初始化属性值</span></span><br><span class="line"><span class="comment">  缺点 : 子类对象无法使用父类原型中定义的实例方法.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="组合继承-重点"><a href="#组合继承-重点" class="headerlink" title="组合继承(重点)"></a>组合继承(重点)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Person的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.letters = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在Person原型上定义实例方法给每个对象成员调用获取其属性值</span></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Person.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);<span class="comment">//第二次</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重写原型对象</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person();<span class="comment">//第一次</span></span><br><span class="line"><span class="comment">//添加构造</span></span><br><span class="line">Student.prototype.constructor = Student;</span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">'Jack Ma'</span>);</span><br><span class="line"><span class="keyword">var</span> stu2 = <span class="keyword">new</span> Student(<span class="string">'Jack Chen'</span>);</span><br><span class="line">stu1.letters.push(<span class="string">'d'</span>);<span class="comment">//stu1.letters = a,b,c,d</span></span><br><span class="line"><span class="built_in">console</span>.log(stu2.letters);<span class="comment">//stu2.letters = a,b,c</span></span><br><span class="line">stu1.getName();<span class="comment">//无报错</span></span><br><span class="line">stu2.getName();<span class="comment">//无报错</span></span><br><span class="line"><span class="comment">//缺点 : 会调用父类构造2次</span></span><br></pre></td></tr></table></figure><h4 id="寄生组合继承-最好-—-Object-create"><a href="#寄生组合继承-最好-—-Object-create" class="headerlink" title="寄生组合继承(最好) —- Object.create()"></a>寄生组合继承(最好) —- Object.create()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Person的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.letters = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在Person原型上定义实例方法给每个对象成员调用获取其属性值</span></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Person.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重写原型对象</span></span><br><span class="line">Student.prototype = <span class="built_in">Object</span>.create(Person.prototype);</span><br><span class="line"><span class="comment">//添加构造</span></span><br><span class="line">Student.prototype.constructor = Student;</span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">'Jack Ma'</span>);</span><br><span class="line"><span class="keyword">var</span> stu2 = <span class="keyword">new</span> Student(<span class="string">'Jack Chen'</span>);</span><br><span class="line">stu1.letters.push(<span class="string">'d'</span>);<span class="comment">//stu1.letters = a,b,c,d</span></span><br><span class="line"><span class="built_in">console</span>.log(stu2.letters);<span class="comment">//stu2.letters = a,b,c</span></span><br><span class="line">stu1.getName();<span class="comment">//无报错</span></span><br><span class="line">stu2.getName();<span class="comment">//无报错</span></span><br></pre></td></tr></table></figure><h4 id="继承多个对象-了解-—-Object-assign"><a href="#继承多个对象-了解-—-Object-assign" class="headerlink" title="继承多个对象(了解)—-Object.assign()"></a>继承多个对象(了解)—-Object.assign()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Father的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Father'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义Father的getName方法</span></span><br><span class="line">Father.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Mother的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mother</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义Mother的getAge方法</span></span><br><span class="line">Mother.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Child的构造函数 , 引用Father和Mother中的属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Father.apply(<span class="keyword">this</span>);</span><br><span class="line">    Mother.apply(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二次赋值的原型对象会覆盖第一次的原型.</span></span><br><span class="line">Child.prototype = <span class="built_in">Object</span>.create(Father.prototype);<span class="comment">//原型指向</span></span><br><span class="line"><span class="comment">//Child.prototype = Object.create(Mother.prototype);</span></span><br><span class="line"><span class="comment">//Object.assign(target, source) , 将source中的属性分配到target中</span></span><br><span class="line"><span class="built_in">Object</span>.assign(Child.prototype,Mother.prototype);<span class="comment">//原型属性复制</span></span><br><span class="line"><span class="comment">//添加构造</span></span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child();</span><br></pre></td></tr></table></figure><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><h4 id="Object构造函数上的方法"><a href="#Object构造函数上的方法" class="headerlink" title="Object构造函数上的方法"></a>Object构造函数上的方法</h4><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>Object.assign()</td><td>通过复制一个或多个对象来创建一个新的对象。</td></tr><tr><td>Object.create()</td><td>使用指定的原型对象和属性创建一个新对象。</td></tr><tr><td>Object.defineProperty()</td><td>给对象添加一个属性并指定该属性的配置。</td></tr><tr><td>Object.defineProperties()</td><td>给对象添加多个属性并分别指定它们的配置。</td></tr><tr><td>Object.entries()</td><td>返回给定对象自身可枚举属性的 <code>[key, value]</code> 数组。</td></tr><tr><td>Object.freeze()</td><td>冻结对象：其他代码不能删除或更改任何属性。</td></tr><tr><td>Object.getOwnPropertyDescriptor()</td><td>返回对象指定的属性配置。</td></tr><tr><td>Object.getOwnPropertyNames()</td><td>返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。</td></tr><tr><td>Object.getOwnPropertySymbols()</td><td>返回一个数组，它包含了指定对象自身所有的符号属性。</td></tr><tr><td>Object.getPrototypeOf()</td><td>返回指定对象的原型对象。</td></tr><tr><td>Object.is()</td><td>比较两个值是否相同。所有 NaN 值都相等（这与==和===不同）。</td></tr><tr><td>Object.isExtensible()</td><td>判断对象是否可扩展。</td></tr><tr><td>Object.isFrozen()</td><td>判断对象是否已经冻结。</td></tr><tr><td>Object.isSealed()</td><td>判断对象是否已经密封。</td></tr><tr><td>Object.keys()</td><td>返回一个包含所有给定对象自身可枚举属性名称的数组。</td></tr><tr><td>Object.preventExtensions()</td><td>防止对象的任何扩展。</td></tr><tr><td>Object.seal()</td><td>防止其他代码删除对象的属性。</td></tr><tr><td>Object.setPrototypeOf()</td><td>设置对象的原型（即内部 <code>[[Prototype]]</code> 属性）。</td></tr><tr><td>Object.values()</td><td>返回给定对象自身可枚举值的数组。</td></tr></tbody></table><h4 id="Object实例-原型方法"><a href="#Object实例-原型方法" class="headerlink" title="Object实例/原型方法"></a>Object实例/原型方法</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Object.prototype.hasOwnProperty()</td><td>返回一个布尔值 ，表示某个对象是否含有指定的属性，而且此属性非原型链继承的。</td></tr><tr><td>Object.prototype.isPrototypeOf()</td><td>返回一个布尔值，表示指定的对象是否在本对象的原型链中。</td></tr><tr><td>Object.prototype.propertyIsEnumerable()</td><td>判断指定属性是否可枚举</td></tr></tbody></table><p>没有提到的方法可以自行参考MDN文档进行学习.<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noopener">Object语法</a></p><h5 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Object</span><span class="selector-class">.assign</span>(<span class="selector-tag">target</span>, ..<span class="selector-class">.sources</span>)</span><br><span class="line">复制属性,拷贝源对象自身的并且可枚举的属性到目标对象。</span><br></pre></td></tr></table></figure><p><strong>参数</strong> : </p><p><code>target</code> : 目标对象</p><p><code>source</code> : 源对象</p><p><strong>返回值</strong> : </p><p>目标对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况1 : 赋值的对象中的属性为基本数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> source = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> newTarget = <span class="built_in">Object</span>.assign(target,source);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'给newTarget赋值前 : '</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(newTarget);<span class="comment">//&#123;a: 1, b: 2&#125;</span></span><br><span class="line">    newTarget.a = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'给newTarget赋值后 : '</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(newTarget,source);<span class="comment">//&#123;a: 2, b: 2&#125;  , &#123;a: 1, b: 2&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况2 : 赋值的对象中的属性为引用数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> source = &#123;<span class="attr">a</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> newTarget = <span class="built_in">Object</span>.assign(target,source);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'给newTarget赋值前 : '</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(newTarget);<span class="comment">//&#123;[2,2,3],2&#125;</span></span><br><span class="line">    newTarget.a[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'给newTarget赋值后 : '</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(newTarget,source);<span class="comment">//&#123;[2,2,3],2&#125; , &#123;[2,2,3],2&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun1();</span><br><span class="line">fun2();</span><br></pre></td></tr></table></figure><p>从这2种情况我们引入2个新的话题 : </p><ul><li><p>浅拷贝</p></li><li><p>深拷贝</p><p>他们都是拷贝,主要区别在于,在操作拷贝后的元素的某个属性会不会影响原始属性的值,如果会,称之为浅拷贝,反之,为深拷贝.</p></li></ul><p><strong>实现浅拷贝</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowCopy</span>(<span class="params">target,source</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> source)&#123;</span><br><span class="line">        <span class="comment">//遍历source每个属性直接赋值给target.相当于将source中每个值赋值给了target</span></span><br><span class="line">        target[key] = source[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> source = &#123;<span class="attr">a</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="attr">b</span>:&#123;<span class="attr">name</span>:<span class="string">'zhangsan'</span>,<span class="attr">age</span>:<span class="number">12</span>&#125;,<span class="attr">c</span>:<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> newTarget = shallowCopy(target,source);</span><br><span class="line"><span class="built_in">console</span>.log(newTarget);</span><br><span class="line">source.a[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">source.b.name = <span class="string">'lisi'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(newTarget,source);</span><br></pre></td></tr></table></figure><p><strong>实现深拷贝</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">target,source</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> source)&#123;</span><br><span class="line">        <span class="comment">//判断当前的属性是否为自身属性,避免将source原型上的属性遍历过来</span></span><br><span class="line">        <span class="keyword">if</span>(source.hasOwnProperty(key))&#123;</span><br><span class="line">            <span class="comment">//判断source中的属性是否为空,并且是否是对象</span></span><br><span class="line">            <span class="keyword">if</span>(source[key] &amp;&amp; (<span class="keyword">typeof</span> source[key] === <span class="string">'object'</span>))&#123;</span><br><span class="line">                <span class="comment">//判断对象中是否有数组,如果有数组就创建新数组,不是数组就创建新对象</span></span><br><span class="line">                target[key] = source[key] <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">                <span class="comment">//递归调用</span></span><br><span class="line">                deepCopy(target[key],source[key]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//如果都是普通属性直接复制</span></span><br><span class="line">                target[key] = source[key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> source = &#123;<span class="attr">a</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="attr">b</span>:&#123;<span class="attr">name</span>:<span class="string">'zhangsan'</span>,<span class="attr">age</span>:<span class="number">12</span>&#125;,<span class="attr">c</span>:<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> newTarget = deepCopy(target,source);</span><br><span class="line"><span class="built_in">console</span>.log(newTarget);</span><br><span class="line">newTarget.a[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">newTarget.b.name = <span class="string">'lisi'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(newTarget,source);</span><br></pre></td></tr></table></figure><h5 id="Object-keys-amp-Object-getOwnPropertyNames"><a href="#Object-keys-amp-Object-getOwnPropertyNames" class="headerlink" title="Object.keys() &amp; Object.getOwnPropertyNames()"></a>Object.keys() &amp; Object.getOwnPropertyNames()</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>keys(obj) ; </span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>keys 返回一个所有元素为字符串的数组，其元素来自于从给定的object上面可直接枚举的属性。</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>get<span class="constructor">OwnPropertyNames(<span class="params">obj</span>)</span> : </span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>get<span class="constructor">OwnPropertyNames()</span> 返回一个数组，该数组对元素是 obj自身拥有的枚举或不可枚举属性名称字符串。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name:<span class="string">'zhangsan'</span>,</span><br><span class="line">    age:<span class="number">12</span>,</span><br><span class="line">    gender:<span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(person));<span class="comment">//["name", "age", "gender"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(person));<span class="comment">//["name", "age", "gender"]</span></span><br></pre></td></tr></table></figure><p>这里提到了<strong>枚举的属性</strong>这个字眼,那么什么叫可枚举的属性了?</p><h5 id="Object-prototype-propertyIsEnumerable"><a href="#Object-prototype-propertyIsEnumerable" class="headerlink" title="Object.prototype.propertyIsEnumerable()"></a>Object.prototype.propertyIsEnumerable()</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.property<span class="constructor">IsEnumerable(<span class="params">prop</span>)</span></span><br><span class="line">每个对象都有一个 propertyIsEnumerable 方法。此方法可以确定对象中指定的属性是否可以被 for...<span class="keyword">in</span> 循环枚举，但是通过原型链继承的属性除外。如果对象没有指定的属性，则此方法返回 <span class="literal">false</span>。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name:<span class="string">'zhangsan'</span>,</span><br><span class="line">    age:<span class="number">12</span>,</span><br><span class="line">    gender:<span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.propertyIsEnumerable(<span class="string">'__proto__'</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(person.propertyIsEnumerable(<span class="string">'name'</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>从上例可以看出自定义对象的person中的所有属性都是可以枚举的,那么我们能不能将一个属性修改为不可枚举呢?</p><h5 id="Object-defineProperty-amp-Object-defineProperties"><a href="#Object-defineProperty-amp-Object-defineProperties" class="headerlink" title="Object.defineProperty() &amp; Object.defineProperties()"></a>Object.defineProperty() &amp; Object.defineProperties()</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>define<span class="constructor">Property(<span class="params">obj</span>, <span class="params">prop</span>, <span class="params">descriptor</span>)</span></span><br><span class="line">该方法允许精确地添加或修改对象的属性。通过赋值操作添加的普通属性是可枚举的，在枚举对象属性时会被枚举到（for...<span class="keyword">in</span> 或 <span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>keys 方法），可以改变这些属性的值，也可以删除这些属性。这个方法允许修改默认的额外选项（或配置）。默认情况下，使用 <span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>define<span class="constructor">Property()</span> 添加的属性值是不可修改（immutable）的。</span><br></pre></td></tr></table></figure><p><strong>参数</strong> : </p><p><code>obj</code> : 要定义属性的对象</p><p><code>prop</code> : 要定义或修改的属性的名称</p><p><code>descriptor</code> : 要定义或修改的属性描述符</p><p><strong>返回值</strong> : </p><p>被传递给函数的对象</p><p><strong>descriptors中可操作的属性</strong> : </p><p><code>configurable</code> : 能不能通过delete关键字删除该属性,能否重新定义属性</p><p><code>enumerable</code> : 是否可枚举</p><p><code>value</code> : 属性对应的值,赋值</p><p><code>writable</code> : 是否可写</p><p><code>get</code> : 属性的getter函数</p><p><code>set</code> : 属性的setter函数</p><p>*<em>特别注意 *</em> : 要么有 writable,value. 要么有get,set.两者不能共存.</p><p><strong>修改单个属性Object.defineProperty()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    age: <span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="string">'zhangsan'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//当enumerable:false时</span></span><br><span class="line"><span class="comment">//person.name无法通过for(in),Object.keys(),JSON.stringify().</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key);<span class="comment">//age</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(person));<span class="comment">//age</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(person));<span class="comment">//age</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当writable : false时,修改person.name的属性无效</span></span><br><span class="line">person.name = <span class="string">'lisi'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当configurable : true时,可以删除person.name属性</span></span><br><span class="line"><span class="comment">//当configurable : false时, 再次修改当前对象中的其他descriptor值无效.</span></span><br><span class="line"><span class="comment">//小妙用,当对象中的writable : false时,如果其configurable : true,我们可以通过重新定义属性的value来重新赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">delete</span> person.name);</span><br></pre></td></tr></table></figure><p><strong>设置get/set</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    age: <span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="built_in">Object</span>.defineProperty(person,<span class="string">'name'</span>,&#123;</span><br><span class="line">    <span class="keyword">get</span>:function()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'zhangsan'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>:function(newValue)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'newValue : '</span> + newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line">person.name = <span class="string">'lisi'</span>;</span><br></pre></td></tr></table></figure><p><strong>修改多个属性Object.defineProperties()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj, &#123;</span><br><span class="line">  <span class="string">'property1'</span>: &#123;</span><br><span class="line">    value: <span class="literal">true</span>,</span><br><span class="line">    writable: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'property2'</span>: &#123;</span><br><span class="line">    value: <span class="string">'Hello'</span>,</span><br><span class="line">    writable: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// etc. etc.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>知道怎么修改一个属性后,那么我们怎么查看原有对象中的属性中的描述呢?</p><h5 id="Object-getOwnPropertyDescriptor"><a href="#Object-getOwnPropertyDescriptor" class="headerlink" title="Object.getOwnPropertyDescriptor()"></a>Object.getOwnPropertyDescriptor()</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>get<span class="constructor">OwnPropertyDescriptor(<span class="params">obj</span>, <span class="params">prop</span>)</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    age: <span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">'name'</span>,&#123;</span><br><span class="line">    configurable:<span class="literal">true</span>,</span><br><span class="line">    enumerable:<span class="literal">false</span>,</span><br><span class="line">    writable:<span class="literal">true</span>,</span><br><span class="line">    value:<span class="string">'zhangsan'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//&#123;value: "zhangsan", writable: true, enumerable: false, configurable: true&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(person,<span class="string">'name'</span>));</span><br></pre></td></tr></table></figure><h5 id="Object-getPrototypeOf-amp-Object-setPrototypeOf"><a href="#Object-getPrototypeOf-amp-Object-setPrototypeOf" class="headerlink" title="Object.getPrototypeOf() &amp; Object.setPrototypeOf()"></a>Object.getPrototypeOf() &amp; Object.setPrototypeOf()</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>set<span class="constructor">PrototypeOf(<span class="params">obj</span>, <span class="params">prototype</span>)</span></span><br><span class="line">方法设置一个指定的对象的原型</span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>get<span class="constructor">PrototypeOf(<span class="params">object</span>)</span></span><br><span class="line">方法返回指定对象的原型</span><br></pre></td></tr></table></figure><p><strong>注意</strong> : 如果你关心性能，你应该避免设置一个对象的 [[Prototype]]。相反，你应该使用 Object.create()来创建带有你想要的[[Prototype]]的新对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(b,a);</span><br><span class="line">a.x = <span class="number">10</span>;</span><br><span class="line">a.y = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b.x);</span><br></pre></td></tr></table></figure><h5 id="Object-prototype-isPrototypeOf"><a href="#Object-prototype-isPrototypeOf" class="headerlink" title="Object.prototype.isPrototypeOf()"></a>Object.prototype.isPrototypeOf()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.isPropertyOf(b)<span class="comment">//a是不是b的原型</span></span><br></pre></td></tr></table></figure><p><strong>接上栗</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a.isPropertyOf(b));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201028004154.png&quot; alt=&quot;20201028004154&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://fightlee.fun/categories/web/"/>
    
    
      <category term="js高级" scheme="http://fightlee.fun/tags/js%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>javaee-spring04</title>
    <link href="http://fightlee.fun/javaee-spring04.html"/>
    <id>http://fightlee.fun/javaee-spring04.html</id>
    <published>2020-10-30T03:03:54.000Z</published>
    <updated>2020-11-02T00:44:57.471Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030111805.png" alt="20201030111805"></p><a id="more"></a><h1 id="Javaee-Spring04"><a href="#Javaee-Spring04" class="headerlink" title="Javaee-Spring04"></a>Javaee-Spring04</h1><h2 id="本文概览"><a href="#本文概览" class="headerlink" title="本文概览"></a>本文概览</h2><ul><li>SpringAOP<ul><li>aop概念和术语解释</li><li>aop的xml配置</li><li>aop的注解配置</li></ul></li><li>SpringJDBC</li></ul><h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>Spring 框架的一个关键组件是<strong>面向切面的编程</strong>(AOP)框架。面向切面的编程需要把程序逻辑分解成不同的部分称为所谓的关注点。跨一个应用程序的多个点的功能被称为<strong>横切关注点</strong>，这些横切关注点在概念上独立于应用程序的业务逻辑。有各种各样的常见的很好的方面的例子，如日志记录、审计、声明式事务、安全性和缓存等。</p><p>在 OOP 中，关键单元模块度是类，而在 AOP 中单元模块度是切面。依赖注入帮助你对应用程序对象相互解耦和 AOP 可以帮助你从它们所影响的对象中对横切关注点解耦。AOP 是像编程语言的触发物，如 Perl，.NET，Java 或者其他。</p><p>Spring AOP 模块提供拦截器来拦截一个应用程序，例如，当执行一个方法时，你可以在方法执行之前或之后添加额外的功能。</p></blockquote><blockquote><p>经过前文的<strong>代理模式</strong>的学习,大家应该对如何向一个业务类中动态添加代理来给业务类中的一些功能添加额外的业务需求,那么本文就是在此基础上在Spring框架中对此模式的实现.</p></blockquote><h3 id="AOP示意图"><a href="#AOP示意图" class="headerlink" title="AOP示意图"></a>AOP示意图</h3><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030130319.png" alt="20201030130319"></p><h3 id="Spring-AOP-术语"><a href="#Spring-AOP-术语" class="headerlink" title="Spring AOP 术语"></a>Spring AOP 术语</h3><table><thead><tr><th>术语</th><th><strong>概念描述</strong></th></tr></thead><tbody><tr><td><strong>Aspect</strong></td><td>切面.一个Class,是对系统中的横切关注点逻辑进行模块化封装的AOP概念实体,简单来说就是其中定义了所有要织入的逻辑.</td></tr><tr><td><strong>Joinpoint</strong></td><td>织入的过程中,我们需要知道在系统的哪些执行点上进行织入操作,这些系统执行点就称之为Joinpoint.</td></tr><tr><td><strong>Advice</strong></td><td>单一横切关注点逻辑的载体,XXAdvice为即将织入到Joinpoint的横切逻辑.根据Joinpoint执行时机的差异或功能不同,分成不同形式或者不同方向.</td></tr><tr><td><strong>Pointcut</strong></td><td>为Joinpoint的表达式.织入过程中,需要参战Pointcut规定的Joinpoint信息来完成正确的织入.</td></tr><tr><td><strong>Target Object</strong></td><td>符合Pointcut所指定的条件,将在织入过程中被织入横切逻辑的对象,即为目标对象</td></tr><tr><td><strong>Weave</strong></td><td>将 AOP 的功能模块嵌入的过程称之为<strong>织入(Weave)</strong></td></tr></tbody></table><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030134401.png" alt="20201030134401"></p><table><thead><tr><th>通知(Advice)</th><th>描述</th></tr></thead><tbody><tr><td>前置通知(Before)</td><td>方法执行前,执行通知</td></tr><tr><td>后置通知(After)</td><td>方法执行后,无论成功还是抛出异常,都会执行通知</td></tr><tr><td>返回通知(AfterReturning)</td><td>方法执行,成功返回值后,执行通知</td></tr><tr><td>异常通知(AfterThrowing)</td><td>方法执行过程中出现异常,执行通知</td></tr><tr><td>环绕通知(Around)</td><td>在方法前后,执行通知,相当于围绕方法.</td></tr></tbody></table><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><blockquote><p>场景描述 : 还是之前的动态代理中的计算器案例.</p></blockquote><p><strong>因为要用到AOP相关实现AOL语言的AspectJ中的对象,所以需要导入AspectJ的依赖</strong> :</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-AOP-xml架构"><a href="#Spring-AOP-xml架构" class="headerlink" title="Spring AOP xml架构"></a>Spring AOP xml架构</h3><blockquote><p>在xml中配置需要导入aop命名空间.</p></blockquote><p><strong>业务接口Calucator.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calucator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>业务接口实现类CalucatorImp.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalucatorImp</span> <span class="keyword">implements</span> <span class="title">Calucator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = a + b;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = a - b;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = a * b;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = a / b;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>功能切面LoggingAspect.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoggingAspect</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是"</span>+joinPoint.getSignature().getName()+<span class="string">"方法的前置通知 , 传入的参数为 : "</span> + Arrays.asList(joinPoint.getArgs()) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是"</span> + joinPoint.getSignature().getName() + <span class="string">"方法的后置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是返回通知 : "</span> + returnValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Exception ex)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是异常通知 : "</span> + ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>功能切面SecurityAspect.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityAspect</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"round方法执行前"</span>);</span><br><span class="line">            Object proceed = jp.proceed();</span><br><span class="line">            System.out.println(<span class="string">"round方法成功执行后"</span>);</span><br><span class="line">            <span class="keyword">return</span> proceed;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            System.out.println(<span class="string">"出现异常.."</span> + throwable.getMessage());</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"round方法最终执行"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>xml文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入业务Calucator和切面logginAspect--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"calucator"</span> <span class="attr">class</span>=<span class="string">"com.java.aop.CalucatorImp"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"loggingAspect"</span> <span class="attr">class</span>=<span class="string">"com.java.aop.LoggingAspect"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityAspect"</span> <span class="attr">class</span>=<span class="string">"com.java.aop.SecurityAspect"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置AOP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置Pointcut切入点</span></span><br><span class="line"><span class="comment">        expression表达式 : execution(* com.java.aop.CalucatorImp.*(..))</span></span><br><span class="line"><span class="comment">        完整表达式 : public int com.java.aop.CalucatorImp.plus(int,int))</span></span><br><span class="line"><span class="comment">        [修饰符] [返回值] [包] [类] [方法] [参数1,参数2..]</span></span><br><span class="line"><span class="comment">        哪个想通配就用 *</span></span><br><span class="line"><span class="comment">        参数用 ..</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(public int com.java.aop.CalucatorImp.plus(int,int))"</span>/&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--数值越小,优先级越高--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置第一个Aspect切面 order优先级--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"loggingAspect"</span> <span class="attr">id</span>=<span class="string">"logAspect"</span> <span class="attr">order</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置Advice通知--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--前置通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--后置通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--注意返回通知需要接收返回值需要配置 returning , 在方法参数中传入 Object returnValue--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span> <span class="attr">returning</span>=<span class="string">"returnValue"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--异常通知需要接收异常信息需要配置 throwing , 在方法参数中传入 Exception ex--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowing"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span> <span class="attr">throwing</span>=<span class="string">"ex"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--配置第二个切面 order优先级--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"securityAspect"</span> <span class="attr">id</span>=<span class="string">"sa"</span> <span class="attr">order</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置环绕通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-AOP-注解架构"><a href="#Spring-AOP-注解架构" class="headerlink" title="Spring AOP 注解架构"></a>Spring AOP 注解架构</h3><blockquote><p>需要使用@Aspect等注解</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启AOP 注解配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用注解的切面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.anno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityAspect</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.java.anno.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">selectAll</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"selectAll()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"round方法执行前"</span>);</span><br><span class="line">            Object proceed = jp.proceed();</span><br><span class="line">            System.out.println(<span class="string">"round方法成功执行后"</span>);</span><br><span class="line">            <span class="keyword">return</span> proceed;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            System.out.println(<span class="string">"出现异常.."</span> + throwable.getMessage());</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"round方法最终执行"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.anno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoggingAspect</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.java.anno.CalucatorImp.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">selectAll</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"selectAll()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是"</span>+joinPoint.getSignature().getName()+<span class="string">"方法的前置通知 , 传入的参数为 : "</span> + Arrays.asList(joinPoint.getArgs()) );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"selectAll()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是"</span> + joinPoint.getSignature().getName() + <span class="string">"方法的后置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(pointcut = <span class="string">"selectAll()"</span>,returning=<span class="string">"returnValue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是返回通知 : "</span> + returnValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(pointcut = <span class="string">"selectAll()"</span>,throwing = <span class="string">"ex"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Exception ex)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是异常通知 : "</span> + ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.java.anno"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启AOP注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th>注解/对象</th><th>描述</th></tr></thead><tbody><tr><td>JoinPoint</td><td>连接点.<br><code>getSignature().getName()</code> : 获取连接点方法名<br><code>getArgs()</code> : 获取连接点处参数</td></tr><tr><td>ProceedingJoinPoint</td><td>连接点,一般用在环绕通知中.<br><code>proceed()</code> : 执行方法</td></tr><tr><td>@Aspect</td><td>切面</td></tr><tr><td>@AfterReturning</td><td>返回通知</td></tr><tr><td>@AfterThrowing</td><td>异常通知</td></tr><tr><td>@Before</td><td>前置通知</td></tr><tr><td>@After</td><td>后置通知</td></tr><tr><td>@Around</td><td>环绕通知</td></tr><tr><td>@Order</td><td>设置优先级</td></tr><tr><td>@Pointcut</td><td>设置切入点,一般设置在切面中的某个私有方法上</td></tr></tbody></table><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><blockquote><p>在使用普通的 JDBC 数据库时，就会很麻烦的写不必要的代码来处理异常，打开和关闭数据库连接等。但 Spring JDBC 框架负责所有的低层细节，从开始打开连接，准备和执行 SQL 语句，处理异常，处理事务，到最后关闭连接。</p><p>所以当从数据库中获取数据时，你所做的是定义连接参数，指定要执行的 SQL 语句，每次迭代完成所需的工作。</p></blockquote><h3 id="配置Idea-database"><a href="#配置Idea-database" class="headerlink" title="配置Idea database"></a>配置Idea database</h3><h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030160501.png" alt="20201030160501"><br><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030160942.png" alt="20201030160942"></p><h4 id="自动生成表对应的实体类"><a href="#自动生成表对应的实体类" class="headerlink" title="自动生成表对应的实体类"></a>自动生成表对应的实体类</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030160951.png" alt="20201030160951"></p><h3 id="一个JDBC的小案例"><a href="#一个JDBC的小案例" class="headerlink" title="一个JDBC的小案例"></a>一个JDBC的小案例</h3><p><strong>实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> userId;</span><br><span class="line">  <span class="keyword">private</span> String userName;</span><br><span class="line">  <span class="keyword">private</span> String userAddress;</span><br><span class="line">  <span class="keyword">private</span> String userEmail;</span><br><span class="line">  <span class="keyword">private</span> String userPassword;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String userName, String userAddress, String userEmail, String userPassword)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    <span class="keyword">this</span>.userAddress = userAddress;</span><br><span class="line">    <span class="keyword">this</span>.userEmail = userEmail;</span><br><span class="line">    <span class="keyword">this</span>.userPassword = userPassword;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(<span class="keyword">long</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userId = userId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userName = userName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUserAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userAddress;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserAddress</span><span class="params">(String userAddress)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userAddress = userAddress;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUserEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userEmail;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserEmail</span><span class="params">(String userEmail)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userEmail = userEmail;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUserPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userPassword;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserPassword</span><span class="params">(String userPassword)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userPassword = userPassword;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实体Mapper类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.java.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserId(resultSet.getLong(<span class="string">"user_id"</span>));</span><br><span class="line">        user.setUserName(resultSet.getString(<span class="string">"user_name"</span>));</span><br><span class="line">        user.setUserEmail(resultSet.getString(<span class="string">"user_email"</span>));</span><br><span class="line">        user.setUserAddress(resultSet.getString(<span class="string">"user_address"</span>));</span><br><span class="line">        user.setUserPassword(resultSet.getString(<span class="string">"user_password"</span>));</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Dao类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.java.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImp</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"><span class="comment">//添加用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into user(user_name,user_address,user_email,user_password) values(?,?,?,?)"</span>;</span><br><span class="line">        <span class="keyword">int</span> rows = jdbcTemplate.update(sql, user.getUserName(), user.getUserAddress(), user.getUserEmail(), user.getUserPassword());</span><br><span class="line">        <span class="keyword">return</span> rows &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//删除用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"delete from user where user_id = ?"</span>;</span><br><span class="line">        <span class="keyword">int</span> rows = jdbcTemplate.update(sql, id);</span><br><span class="line">        <span class="keyword">return</span> rows &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//更新用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateUserById</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"update user set user_name = ?,user_address = ?,user_email = ?,user_password = ? where user_id = ?"</span>;</span><br><span class="line">        <span class="keyword">int</span> rows = jdbcTemplate.update(sql, user.getUserName(), user.getUserAddress(), user.getUserEmail(), user.getUserPassword(), user.getUserId());</span><br><span class="line">        <span class="keyword">return</span> rows &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//查询单个用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from user where user_id = ?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql,<span class="keyword">new</span> UserMapper(),id);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//查询多个用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from user"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql,<span class="keyword">new</span> UserMapper());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Dao接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.java.bean.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">deleteUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">updateUserById</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>spring.xml配置文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.java.jdbc"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.driverClassName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>pom文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.39<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext-jdbc.xml"</span>);</span><br><span class="line">    UserDaoImp userDaoImp = ac.getBean(<span class="string">"userDaoImp"</span>, UserDaoImp<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    userDaoImp.addUser(<span class="keyword">new</span> User(<span class="string">"张三1"</span>,<span class="string">"长沙"</span>,<span class="string">"zhangsan1@qq.com"</span>,<span class="string">"123"</span>));</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    userDaoImp.deleteUserById(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUserId(<span class="number">1</span>);</span><br><span class="line">    user.setUserName(<span class="string">"老八"</span>);</span><br><span class="line">    user.setUserPassword(<span class="string">"666"</span>);</span><br><span class="line">    user.setUserEmail(<span class="string">"laba@qq.com"</span>);</span><br><span class="line">    user.setUserAddress(<span class="string">"厕所"</span>);</span><br><span class="line">    userDaoImp.updateUserById(user);</span><br><span class="line">    <span class="comment">//根据id查询</span></span><br><span class="line">    System.out.println(userDaoImp.getUserById(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    System.out.println(userDaoImp.getAllUsers());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030111805.png&quot; alt=&quot;20201030111805&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="spring" scheme="http://fightlee.fun/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>javascript高级(二)</title>
    <link href="http://fightlee.fun/javascript%E9%AB%98%E7%BA%A702.html"/>
    <id>http://fightlee.fun/javascript%E9%AB%98%E7%BA%A702.html</id>
    <published>2020-10-28T11:14:27.000Z</published>
    <updated>2020-11-02T09:05:49.784Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201028004154.png" alt="20201028004154"></p><a id="more"></a><h1 id="javascript高级-二"><a href="#javascript高级-二" class="headerlink" title="javascript高级(二)"></a>javascript高级(二)</h1><h2 id="对象-一"><a href="#对象-一" class="headerlink" title="对象(一)"></a>对象(一)</h2><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><h5 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量{}"></a>对象字面量{}</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="comment">//定义对象中的属性</span></span><br><span class="line">    id : <span class="number">1</span>,</span><br><span class="line">    name : <span class="string">'zhangsan'</span>,</span><br><span class="line">    age : <span class="number">12</span>,</span><br><span class="line">    <span class="comment">//定义对象中的函数</span></span><br><span class="line">    study : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'好好学习,天天向上'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用属性</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'id : '</span> + person.id);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name : '</span> + person[<span class="string">'name'</span>]);</span><br><span class="line"><span class="comment">//调用对象中定义的函数</span></span><br><span class="line">person.study();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="new-Object"><a href="#new-Object" class="headerlink" title="new Object()"></a>new Object()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象定义</span></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">dog.name = <span class="string">'旺财'</span>;</span><br><span class="line">dog.age = <span class="number">1</span>;</span><br><span class="line">dog.breed = <span class="string">'拉布拉多'</span>;</span><br><span class="line">dog.lookHome = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'看家'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用属性</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.name);</span><br><span class="line">dog.lookHome();</span><br></pre></td></tr></table></figure><h5 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数的前身--工厂模式</span></span><br><span class="line"><span class="comment">//所有对象都属于Object,创建的对象没有具体的身份,存在对象识别的问题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    o.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'打招呼.'</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后面使用instanceof关键字判断都属于Object</span></span><br></pre></td></tr></table></figure><h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><blockquote><p> ES5中没有Class的概念,所以使用函数的形式来组织要创建对象的模版</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通构造函数</span></span><br><span class="line"><span class="comment">//定义构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hero</span>(<span class="params">name,country</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.country = country;</span><br><span class="line">    <span class="comment">//定义普通方法</span></span><br><span class="line">    <span class="keyword">this</span>.skill = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'放大招啦.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"><span class="keyword">var</span> gailun = <span class="keyword">new</span> Hero(<span class="string">'盖伦'</span>,<span class="string">'德玛西亚'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(gailun.name);</span><br><span class="line"><span class="built_in">console</span>.log(gailun.country);</span><br><span class="line">gailun.skill();</span><br><span class="line"><span class="comment">//定义静态属性&amp;方法,通过构造函数名.静态属性 &amp; 构造函数名.静态函数名()</span></span><br><span class="line">Hero.sex = <span class="string">'男'</span>;</span><br><span class="line">Hero.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再次创建对象</span></span><br><span class="line"><span class="keyword">var</span> huangzi = <span class="keyword">new</span> Hero(<span class="string">'皇子'</span>,<span class="string">'德玛西亚'</span>);</span><br><span class="line">huangzi.skill();</span><br><span class="line"><span class="comment">//查看2个不同对象中的同一skill方法是否相等 , 也就是说同一skill方法在2个对象中都占用了不同的内存空间</span></span><br><span class="line"><span class="built_in">console</span>.log(gailun.skill === huangzi.skill);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h5 id="构造函数扩展模式"><a href="#构造函数扩展模式" class="headerlink" title="构造函数扩展模式"></a>构造函数扩展模式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数扩展模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sayHi = sayHi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将对象中的公共方法放在全局作用域,但是会污染全局作用域,函数也不安全</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'zhangsan'</span>,<span class="number">12</span>);</span><br></pre></td></tr></table></figure><h5 id="构造函数寄生模式"><a href="#构造函数寄生模式" class="headerlink" title="构造函数寄生模式"></a>构造函数寄生模式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数寄生模式</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 和工厂模式的区别 : </span></span><br><span class="line"><span class="comment"> 1. 将名称改为具体对象</span></span><br><span class="line"><span class="comment"> 2. 使用 new 关键字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    o.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'打招呼.'</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'zhangsan'</span>,<span class="number">12</span>);</span><br></pre></td></tr></table></figure><blockquote><p>除了使用new操作符并把使用的包装函数叫做构造函数之外，这个模式跟工厂模式其实是一模一样的。构造函数在不返回值的情况下，默认会返回新对象实例。而通过在构造函数的末尾添加一个return语句，可以重写调用构造函数时返回的值。</p></blockquote><h5 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//稳妥构造函数模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">p_name,p_age</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//创建要返回的对象</span></span><br><span class="line">    <span class="keyword">var</span> p = &#123;&#125;;</span><br><span class="line">    <span class="comment">//定义私有属性和方法</span></span><br><span class="line">    <span class="keyword">var</span> name = p_name;</span><br><span class="line">    <span class="keyword">var</span> age = p_age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'计算器功能...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义公共方法</span></span><br><span class="line">    p.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'zhangsan'</span>,<span class="number">12</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.getName());<span class="comment">//zhangsan</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name);<span class="comment">//undefined</span></span><br><span class="line">person.sun();<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><blockquote><p>类似于闭包的处理方式,可以理解为Java中定义类的方式.</p></blockquote><p><strong>instanceof的使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = Person(<span class="string">'zhangsan'</span>,<span class="number">12</span>)</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Person(<span class="string">'zhangsan'</span>,<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><h5 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h5><p><strong>定义class</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(name,age,country) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.country = country;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义</span></span><br><span class="line">    attack()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'攻击.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hero = <span class="keyword">new</span> Hero(<span class="string">'亚索'</span>,<span class="number">12</span>,<span class="string">'艾欧尼亚'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hero.name);</span><br><span class="line">hero.attack();</span><br></pre></td></tr></table></figure><p><strong>class的继承</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age,breed) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.breed = breed;</span><br><span class="line">    &#125;</span><br><span class="line">    eat(food)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'吃'</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age,breed,sex) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age,breed);</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    lookHome()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'狗看家'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age,breed,weight) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age,breed);</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    catchMouse(name)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'抓到了'</span> + name);</span><br><span class="line">        <span class="keyword">super</span>.eat(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">'旺财'</span>,<span class="number">12</span>,<span class="string">'哈士奇'</span>,<span class="string">'公'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dog.name);</span><br><span class="line"><span class="built_in">console</span>.log(dog.breed);</span><br><span class="line">dog.lookHome();</span><br><span class="line">dog.eat(<span class="string">'骨头'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">'Tom'</span>,<span class="number">22</span>,<span class="string">'蓝猫'</span>,<span class="string">'公'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.breed);</span><br><span class="line">cat.catchMouse(<span class="string">'Jack'</span>);</span><br></pre></td></tr></table></figure><h5 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h5><blockquote><p> 同样看完原型后再来理解. 调用<code>Object.create()</code>来创建一个新对象。新对象的原型就是调用 <code>create</code> 方法时传入的第一个参数： </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">// a ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">Object</span>.create(a);</span><br><span class="line"><span class="comment">// b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"><span class="built_in">console</span>.log(b.a); <span class="comment">// 1 (继承而来)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">Object</span>.create(b);</span><br><span class="line"><span class="comment">// c ---&gt; b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// d ---&gt; null</span></span><br><span class="line"><span class="built_in">console</span>.log(d.hasOwnProperty); <span class="comment">// undefined, 因为d没有继承Object.prototype</span></span><br></pre></td></tr></table></figure><h5 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原型模式  等同于Object.create()的创建方式</span></span><br><span class="line"><span class="keyword">var</span> personPrototype = &#123;</span><br><span class="line">    init:<span class="function"><span class="keyword">function</span>(<span class="params">p_name</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = p_name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'name : '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">P</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    P.prototype = personPrototype;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> P();</span><br><span class="line">    p.init(name);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = createPerson(<span class="string">'zhangsan'</span>);</span><br></pre></td></tr></table></figure><h5 id="组合模式-重要"><a href="#组合模式-重要" class="headerlink" title="组合模式(重要)"></a>组合模式(重要)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组合模式 ----&gt; 在讲到使用原型添加多个方法处会讲到</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给Person.prototype定义多个方法,每个方法由逗号隔开.</span></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="comment">//修改原型后需要重新给原型中的构造赋值.</span></span><br><span class="line">    <span class="keyword">constructor</span>:Person,</span><br><span class="line">    sayHello:function()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">',向你打招呼'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    eat:<span class="function"><span class="keyword">function</span>(<span class="params">food</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'吃'</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="动态组合模式-了解"><a href="#动态组合模式-了解" class="headerlink" title="动态组合模式(了解)"></a>动态组合模式(了解)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.sayHi != <span class="string">'function'</span>) &#123;</span><br><span class="line">        Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" : "</span> + <span class="keyword">this</span>.age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype);</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'zhangsan'</span>,<span class="number">12</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype);</span><br></pre></td></tr></table></figure><h2 id="原型—Prototypes"><a href="#原型—Prototypes" class="headerlink" title="原型—Prototypes"></a>原型—Prototypes</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201029045206.png" alt="20201029045206"></p><blockquote><p>也就是说一个对象可以有2种成员类型 </p><ul><li>实例成员 : 直接存在于对象实例中</li><li>原型成员 : 从对象原型继承而来</li></ul></blockquote><table><thead><tr><th>属性</th><th>作用</th><th>用法</th></tr></thead><tbody><tr><td><strong>Constructor.prototype</strong></td><td>访问构造函数的原型</td><td>Person.prototype</td></tr><tr><td>object.<code>__proto__</code></td><td>访问对象的原型</td><td>obj.<code>__proto__</code></td></tr><tr><td>Prototype.constructor</td><td>访问原型所对应的构造函数</td><td>person.<code>__proto__</code>.constructor</td></tr></tbody></table><h4 id="案例解析"><a href="#案例解析" class="headerlink" title="案例解析"></a>案例解析</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name : <span class="string">'zhangsan'</span>,</span><br><span class="line">    age : <span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.toString());<span class="comment">//[object Object]</span></span><br></pre></td></tr></table></figure><blockquote><p>从上栗可以看出,在对象person中有2个实例成员name和age,并没有toString()方法的定义,但也成功执行了.方法toString()是由对象person继承来的原型成员. (是不是和Java中的Object很类似?)</p></blockquote><h4 id="对象和原型关系"><a href="#对象和原型关系" class="headerlink" title="对象和原型关系"></a>对象和原型关系</h4><blockquote><p>注意 : 这里的person对象的创建相当于, var person = new Object().所以person原型就是Object原型</p></blockquote><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201029052159.png" alt="20201029052159"></p><h4 id="解析过程"><a href="#解析过程" class="headerlink" title="解析过程"></a>解析过程</h4><blockquote><p>当person.toString()被调用时,会从对象实例开始搜索名为toString()的成员,如果没有,则继续搜索其原型对象,直到toString()方法被找到并执行.由此可见,对象person可以访问它原型中的每一个属性和方法.</p></blockquote><h4 id="hasOwnProperty-amp-in"><a href="#hasOwnProperty-amp-in" class="headerlink" title="hasOwnProperty &amp; in"></a>hasOwnProperty &amp; in</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201029052715.png" alt="20201029052715"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name : <span class="string">'zhangsan'</span>,</span><br><span class="line">    age : <span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.hasOwnProperty(<span class="string">'name'</span>));<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person.hasOwnProperty(<span class="string">'toString'</span>));<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'toString'</span> <span class="keyword">in</span> person);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>hasOwnProperty :  只搜索实例</li><li>in 操作符 : 既搜索也搜索原型</li></ul><h2 id="原型链—Prototype-Chains"><a href="#原型链—Prototype-Chains" class="headerlink" title="原型链—Prototype Chains"></a>原型链—Prototype Chains</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201029053037.png" alt="20201029053037"></p><h4 id="使用构造函数的prototype定义单个方法"><a href="#使用构造函数的prototype定义单个方法" class="headerlink" title="使用构造函数的prototype定义单个方法"></a>使用构造函数的prototype定义单个方法</h4><blockquote><p>在原型上添加方法可以将其理解为Java中的<code>static</code>关键字,将每个Person对象实例中公共的部分定义在原型中.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过Person的静态属性prototype来给Person对象定义方法</span></span><br><span class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' , 向你打招呼!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'老王'</span>,<span class="number">32</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'老八'</span>,<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.toString());;<span class="comment">//[object Object]</span></span><br><span class="line">person2.sayHello();<span class="comment">//老八 , 向你打招呼!</span></span><br></pre></td></tr></table></figure><h5 id="对象原型链关系"><a href="#对象原型链关系" class="headerlink" title="对象原型链关系"></a>对象原型链关系</h5><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201029062614.png" alt="20201029062614"></p><h4 id="对象-amp-原型-amp-构造函数之间的关系"><a href="#对象-amp-原型-amp-构造函数之间的关系" class="headerlink" title="对象&amp;原型&amp;构造函数之间的关系"></a>对象&amp;原型&amp;构造函数之间的关系</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030100533.png" alt="20201030100533"></p><h4 id="原型链图"><a href="#原型链图" class="headerlink" title="原型链图"></a>原型链图</h4><blockquote><p>在person原型中依然存在<code>__proto__</code>属性,意味着可以继续访问其原型.</p></blockquote><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030101628.png" alt="20201030101628"></p><h4 id="使用构造函数的prototype定义多个方法"><a href="#使用构造函数的prototype定义多个方法" class="headerlink" title="使用构造函数的prototype定义多个方法"></a>使用构造函数的prototype定义多个方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给Person.prototype定义多个方法,每个方法由逗号隔开.</span></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="comment">//修改原型后需要重新给原型中的构造赋值.</span></span><br><span class="line">    <span class="keyword">constructor</span>:Person,</span><br><span class="line">    sayHello:function()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">',向你打招呼'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    eat:<span class="function"><span class="keyword">function</span>(<span class="params">food</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'吃'</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'老八'</span>,<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">person.sayHello();</span><br><span class="line">person.eat(<span class="string">'奥里给'</span>);</span><br></pre></td></tr></table></figure><h4 id="基于原型给已有内置对象添加其原型方法应用"><a href="#基于原型给已有内置对象添加其原型方法应用" class="headerlink" title="基于原型给已有内置对象添加其原型方法应用"></a>基于原型给已有内置对象添加其原型方法应用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给已有的数组原型添加求和方法</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.getSum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line">        sum += <span class="keyword">this</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//求和</span></span><br><span class="line"><span class="keyword">var</span> result = arr.getSum()</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><blockquote><p>在原型链上查找属性比较耗时，对性能有副作用，这在性能要求苛刻的情况下很重要。另外，试图访问不存在的属性时会遍历整个原型链。 </p><p>所以在做某些操作的时候,最好先将对象中取得的属性值赋值给局部变量,这样会减少原型链遍历的次数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunction</span>(<span class="params">element1,className1,className2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element1.className == className1 || element1.className == className2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改后</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunction</span>(<span class="params">element1,className1,className2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> currentClassName = element1.className;</span><br><span class="line">    <span class="keyword">return</span> currentClassName == className1 || currentClassName == className2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201029111050.png" alt="20201029111050"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201028004154.png&quot; alt=&quot;20201028004154&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://fightlee.fun/categories/web/"/>
    
    
      <category term="js高级" scheme="http://fightlee.fun/tags/js%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>javascript高级(一)</title>
    <link href="http://fightlee.fun/javascript%E9%AB%98%E7%BA%A701.html"/>
    <id>http://fightlee.fun/javascript%E9%AB%98%E7%BA%A701.html</id>
    <published>2020-10-27T16:40:26.000Z</published>
    <updated>2020-10-28T08:25:54.722Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201028004154.png" alt="20201028004154"></p><a id="more"></a><h1 id="javascript高级-一"><a href="#javascript高级-一" class="headerlink" title="javascript高级(一)"></a>javascript高级(一)</h1><h2 id="事件Event"><a href="#事件Event" class="headerlink" title="事件Event"></a>事件Event</h2><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><blockquote><p>IE提出了名为<strong>事件冒泡</strong>的事件流。事件按照从最特定的事件目标到最不特定的事件目标(document对象)的顺序触发。可以想象把一颗石头投入水中，泡泡会一直从水底冒出水面。也就是说，事件会从最内层的元素开始发生，一直向上传播，直到document对象。 </p></blockquote><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><blockquote><p>网景提出另一种事件流名为<strong>事件捕获</strong>。事件从最不精确的对象(document 对象)开始触发，然后到最精确(也可以在窗口级别捕获事件，不过必须由开发人员特别指定)，与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。同样形象的比喻一下可以想象成警察逮捕屋子内的小偷，就要从外面一层层的进入到房子内。 </p></blockquote><h4 id="冒泡和捕获演示"><a href="#冒泡和捕获演示" class="headerlink" title="冒泡和捕获演示"></a>冒泡和捕获演示</h4><ul><li>冒泡</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#div1</span>&#123;</span></span><br><span class="line">height: 200px;</span><br><span class="line">width: 200px;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#f00</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-id">#div2</span>&#123;</span></span><br><span class="line">height: 150px;</span><br><span class="line">width: 150px;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#0f0</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-id">#div3</span>&#123;</span></span><br><span class="line">height: 75px;</span><br><span class="line">width: 75px;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#00f</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">class</span>=<span class="string">"btns"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span> <span class="attr">class</span>=<span class="string">"btns"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span> <span class="attr">class</span>=<span class="string">"btns"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelectorAll(<span class="string">'.btns'</span>).forEach(<span class="function"><span class="params">x</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">x.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'body'</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.documentElement.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'html'</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'window'</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击蓝色div3后查看结果</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div3</span><br><span class="line">div2</span><br><span class="line">div1</span><br><span class="line">body</span><br><span class="line">html</span><br><span class="line">window</span><br></pre></td></tr></table></figure><ul><li>捕获</li></ul><blockquote><p>通过 <code>addEventListener(arg1,arg2,arg3)</code>方法来监听事件捕获</p><p>arg1 : 监听的事件 , 如 click , dbclick等..</p><p>arg2 : 事件的回调函数</p><p>arg3 : 通过boolean类型的值来决定事件捕获还是冒泡,false为冒泡,true为捕获.默认false</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelectorAll(<span class="string">'.btns'</span>).forEach(<span class="function"><span class="params">x</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">        x.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</span></span><br><span class="line"><span class="actionscript">        &#125;,<span class="literal">true</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'body'</span>);</span></span><br><span class="line"><span class="actionscript">    &#125;,<span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.documentElement.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'html'</span>);</span></span><br><span class="line"><span class="actionscript">    &#125;,<span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'window'</span>);</span></span><br><span class="line"><span class="actionscript">    &#125;,<span class="literal">true</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样点击div3后查看结果</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">window</span><br><span class="line">html</span><br><span class="line">body</span><br><span class="line">div1</span><br><span class="line">div2</span><br><span class="line">div3</span><br></pre></td></tr></table></figure><h3 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h3><blockquote><p>通俗来说就是那些onclick,onsubmit这些监听器,就称之为事件处理程序.</p><p>在JavaScript中给事件处理程序分为4种</p><ul><li>HTML事件处理程序</li><li>DOM0级处理程序</li><li>DOM2级处理程序</li><li>IE事件处理程序</li></ul></blockquote><h4 id="HTML事件处理程序"><a href="#HTML事件处理程序" class="headerlink" title="HTML事件处理程序"></a>HTML事件处理程序</h4><blockquote><p>我们可以在HTML标签中监听用户所调用的事件,然后直接在标签内部进行处理.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"testDiv"</span> <span class="attr">onclick</span>=<span class="string">"this.innerHTML += 'HelloWorld'"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当onclick中要处理多个语句时,我们可以将这些语句定义到一个函数中,然后用HTML事件处理程序来调用该函数.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"testDiv"</span> <span class="attr">onclick</span>=<span class="string">"test();"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> testDiv = <span class="built_in">document</span>.querySelector(<span class="string">'#testDiv'</span>);</span></span><br><span class="line"><span class="actionscript">        testDiv.innerHTML += <span class="string">'Hello'</span>;<span class="comment">//这里千万不能使用this.innerHTML , this指向的不是div,而是window对象</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="DOM0级处理程序"><a href="#DOM0级处理程序" class="headerlink" title="DOM0级处理程序"></a>DOM0级处理程序</h4><blockquote><p>也可是作为JavaScript属性的处理程序,我们可以在JavaScript中获取元素,然后通过元素的属性来做事件处理.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"testDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> testDiv = <span class="built_in">document</span>.querySelector(<span class="string">'#testDiv'</span>);</span></span><br><span class="line"><span class="actionscript">    testDiv.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.innerHTML += <span class="string">'Hello'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>较HTML事件处理程序而言,处理事件更加简单,减少了HTML和JavaScript的混合,增加了代码的模块性,更容易维护.(有个小缺陷,如果用户在文档装载完之前与元素进行交互,那么该元素的事件处理程序可能还没有定义)</p></blockquote><h4 id="DOM0级处理程序的移除操作和重复绑定操作"><a href="#DOM0级处理程序的移除操作和重复绑定操作" class="headerlink" title="DOM0级处理程序的移除操作和重复绑定操作"></a>DOM0级处理程序的移除操作和重复绑定操作</h4><blockquote><p>可以将null赋值给DOM0级处理程序来实现移除操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">testDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML += <span class="string">'Hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line">testDiv.onclick = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><blockquote><p>DOM0级处理程序的绑定多个处理程序的操作是无效的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">testDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML += <span class="string">'Hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line">testDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML += <span class="string">'bye'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里只会生效下面的onclick函数.</p></blockquote><h4 id="事件处理的返回值"><a href="#事件处理的返回值" class="headerlink" title="事件处理的返回值"></a>事件处理的返回值</h4><blockquote><p>无论是HTML事件处理程序还是DOM0级处理程序,都使用其返回值来说明事件的处理方法.比如Form表单的onsubmit的事件处理程序返回值为false,那么可以阻止表单的提交.</p></blockquote><h4 id="DOM2级处理程序"><a href="#DOM2级处理程序" class="headerlink" title="DOM2级处理程序"></a>DOM2级处理程序</h4><blockquote><p>使用<code>addEventListener()</code>来给元素添加事件处理程序,<code>removeEventListener()</code>来删除元素上的事件处理函数.</p><p>在2级DOM中,事件的处理将会存在着事件传播,,传播分为三个阶段</p><ol><li>捕捉阶段,往下传递的阶段</li><li>目标上的事件处理程序执行</li><li>冒泡阶段,向上传递的阶段</li></ol><p>在事件的传播过程中,任何事件处理程序都可以调用当前事件中的<code>Event</code>对象的<code>stopPropagation()</code>方法来停止传播.</p><p>还有一些元素会有一些默认动作,比如<code>&lt;a&gt;</code>标签,在浏览器中的默认是进行超链接跳转,但是这个默认动作必须在事件传播的三个阶段完成后才会执行,当我们在事件传播过程中调用任意一个处理程序的<code>Event</code>对象的<code>preventDefault()</code>方法就可以阻止默认动作的发生.</p></blockquote><blockquote><p>对比0级处理程序,在同一元素上可以绑定多个2级处理程序</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testDiv = <span class="built_in">document</span>.querySelector(<span class="string">'#testDiv'</span>);</span><br><span class="line">testDiv.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML += <span class="string">'hello'</span>;</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">testDiv.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML += <span class="string">'world'</span>;</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><blockquote><p>移除事件的操作需要通过<code>removeEventListener()</code>来进行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testDiv = <span class="built_in">document</span>.querySelector(<span class="string">'#testDiv'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello_handler</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML += <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line">testDiv.addEventListener(<span class="string">'click'</span>,hello_handler,<span class="literal">false</span>);</span><br><span class="line">testDiv.removeEventListener(<span class="string">'click'</span>,hello_handler,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h4 id="IE事件处理程序"><a href="#IE事件处理程序" class="headerlink" title="IE事件处理程序"></a>IE事件处理程序</h4><blockquote><p>IE事件处理程序使用<code>attachEvent()</code>方法和<code>detachEvent()</code>方法来为指定对象事件类型注册其处理函数,他们与<code>addEventListener</code>,<code>removeEventListener</code>类似,注意的是,他们不能处理事件捕捉,所以只有2个参数,并且处理的事件类型名称前需要加上<code>on</code>, 比如<code>onclick</code>,<code>onmouseover</code>.</p></blockquote><blockquote><p>IE9以下不支持<code>addEventListener()</code>等方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testDiv = <span class="built_in">document</span>.getElementById(<span class="string">'testDiv'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello_handler</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    testDiv.innerHTML += <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line">testDiv.attachEvent(<span class="string">'onclick'</span>,hello_handler);</span><br><span class="line">testDiv.detachEvent(<span class="string">'onclick'</span>,hello_handler);</span><br></pre></td></tr></table></figure><h4 id="处理不同事件处理程序的兼容问题"><a href="#处理不同事件处理程序的兼容问题" class="headerlink" title="处理不同事件处理程序的兼容问题"></a>处理不同事件处理程序的兼容问题</h4><blockquote><p>为了解决IE8不兼容的问题(事实上IE8现在也很少有公司去兼容),我们需要对<code>attachEvent</code>和<code>addEventListener</code>分别做处理</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"testDiv"</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> testDiv = <span class="built_in">document</span>.getElementById(<span class="string">'testDiv'</span>);</span></span><br><span class="line"><span class="actionscript">    addEvent(testDiv,<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.innerHTML += <span class="string">'hello'</span>;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    /*</span><br><span class="line">* target : 目标对象</span><br><span class="line">* eventType : 事件类型</span><br><span class="line">* handler : 回调函数</span><br><span class="line">* */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">addEvent</span><span class="params">(target,eventType,handler)</span></span>&#123;</span></span><br><span class="line">        if(target.addEventListener)&#123;</span><br><span class="line"><span class="actionscript">            target.addEventListener(eventType,handler,<span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">            target.attachEvent(<span class="string">'on'</span> + eventType,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">                handler.call(target);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件对象Event"><a href="#事件对象Event" class="headerlink" title="事件对象Event"></a>事件对象Event</h3><blockquote><p>在上文中多次提到事件处理程序中的<code>Event</code>对象.现在我们来具体的介绍Event</p></blockquote><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>type</td><td>发生的事件类型,<code>click</code>,<code>mouseover</code></td></tr><tr><td>target</td><td>事件目标对象</td></tr><tr><td>currentTarget</td><td>正在处理的事件的节点,也可以认为是事件目标对象</td></tr><tr><td>bubbles</td><td>布尔值,是否支持冒泡</td></tr><tr><td>cancelable</td><td>布尔值,是否具有取消默认动作的功能</td></tr><tr><td>returnValue</td><td>是否取消默认动作,false为取消</td></tr><tr><td>cancelBubble</td><td>是否取消冒泡,true为取消</td></tr><tr><td>eventPhase</td><td>事件传播的阶段</td></tr></tbody></table><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>stopPropagation()</td><td>停止事件冒泡</td></tr><tr><td>preventDefault()</td><td>阻止默认行为</td></tr><tr><td>stopImmediatePropagation()</td><td>停止事件冒泡的同时,阻止其他监听调用</td></tr></tbody></table><h4 id="Event对象的获取"><a href="#Event对象的获取" class="headerlink" title="Event对象的获取"></a>Event对象的获取</h4><blockquote><p>在事件处理程序的回调函数中加入参数e即可获取Event对象.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testDiv = <span class="built_in">document</span>.getElementById(<span class="string">'testDiv'</span>);</span><br><span class="line">testDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意 : IE8要获取event对象直接从window.event获取,不需要通过函数参数.考虑到兼容性的写法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testDiv = <span class="built_in">document</span>.getElementById(<span class="string">'testDiv'</span>);</span><br><span class="line">testDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e = e || event;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="事件目标对象"><a href="#事件目标对象" class="headerlink" title="事件目标对象"></a>事件目标对象</h4><ul><li>target : 触发事件的真实元素 </li><li>currentTarget :  绑定事件的元素,函数中的this指针即为currentTarget</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">ul&#123;</span><br><span class="line">width: 800px;</span><br><span class="line">height: 30px;</span><br><span class="line">background-color: green;</span><br><span class="line">&#125;</span><br><span class="line">ul li&#123;</span><br><span class="line">float: left;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 30px;</span><br><span class="line">list-style: none;</span><br><span class="line">background-color: red;</span><br><span class="line">margin-left: 20px;</span><br><span class="line">text-align: center;</span><br><span class="line">line-height: 30px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>搜狗<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> child = <span class="built_in">document</span>.getElementById(<span class="string">'child'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> parent = <span class="built_in">document</span>.getElementById(<span class="string">'parent'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">parent.onclick = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(e.target);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(e.currentTarget);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(e.target === <span class="keyword">this</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(e.currentTarget === <span class="keyword">this</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">child.onclick = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(e.target);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(e.currentTarget);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(e.target === <span class="keyword">this</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(e.currentTarget === <span class="keyword">this</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="事件代理-事件委托"><a href="#事件代理-事件委托" class="headerlink" title="事件代理|事件委托"></a>事件代理|事件委托</h4><blockquote><p>和Java中的代理模式很类似,元素本身能做到的事情交给代理来做.</p><p>修改上例代码,当鼠标移入li标签时修改li标签的颜色,移除则回复之前的颜色</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">   <span class="comment">//传统方式</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> childs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">    childs.forEach( <span class="function"><span class="params">x</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">        x.onmouseover = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            x.style.backgroundColor = <span class="string">'orange'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        x.onmouseout = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            x.style.backgroundColor = <span class="string">'red'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="comment">//采用事件委托</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> parent = <span class="built_in">document</span>.querySelector(<span class="string">'#parent'</span>);</span></span><br><span class="line"><span class="actionscript">    parent.onmouseover = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line">        e = e || event;</span><br><span class="line"><span class="actionscript">        e.target.style.backgroundColor = <span class="string">'orange'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    parent.onmouseout = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line">        e = e || event;</span><br><span class="line"><span class="actionscript">        e.target.style.backgroundColor = <span class="string">'red'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="事件冒泡-1"><a href="#事件冒泡-1" class="headerlink" title="事件冒泡"></a>事件冒泡</h4><blockquote><p>在这里主要来讲述如何来阻止事件的冒泡,和冒泡带来的影响</p></blockquote><ul><li>event.stopPropagation() </li><li>event.cancelBubble</li><li>event.stopImmediatePropagation()</li></ul><h4 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h4><ul><li>event.preventDefault()</li><li>event.returnValue属性,返回false阻止</li><li>return false;</li></ul><h4 id="事件中的坐标"><a href="#事件中的坐标" class="headerlink" title="事件中的坐标"></a>事件中的坐标</h4><table><thead><tr><th>属性</th><th></th></tr></thead><tbody><tr><td>x/y,clientX/clientY</td><td>相对于body的左上角XY轴</td></tr><tr><td>offsetX,offsetY</td><td>相对于当前元素的XY轴</td></tr><tr><td>screenX/screenY</td><td>相对于事件源的的XY轴距离</td></tr><tr><td>pageX/pageY</td><td>相对于页面的XY轴</td></tr></tbody></table><h3 id="事件是否支持冒泡和具备阻止默认行为的功能"><a href="#事件是否支持冒泡和具备阻止默认行为的功能" class="headerlink" title="事件是否支持冒泡和具备阻止默认行为的功能"></a>事件是否支持冒泡和具备阻止默认行为的功能</h3><table><thead><tr><th>事件</th><th>冒泡</th><th>默认行为</th></tr></thead><tbody><tr><td>blur/focus</td><td>否</td><td></td></tr><tr><td>load/unload</td><td>否</td><td></td></tr><tr><td>DOMNodeInsertedIntoDocument/DOMNodeRemovedFromDocument</td><td>否</td><td></td></tr><tr><td>click</td><td></td><td>可以</td></tr><tr><td>mousedown/mouseup</td><td></td><td>可以</td></tr><tr><td>mouseout/mouseover</td><td></td><td>可以</td></tr><tr><td>submit</td><td></td><td>可以</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201028004154.png&quot; alt=&quot;20201028004154&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://fightlee.fun/categories/web/"/>
    
    
      <category term="js高级" scheme="http://fightlee.fun/tags/js%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>javaee-spring03</title>
    <link href="http://fightlee.fun/javaee-spring03.html"/>
    <id>http://fightlee.fun/javaee-spring03.html</id>
    <published>2020-10-26T15:08:19.000Z</published>
    <updated>2020-10-30T03:18:29.722Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030111805.png" alt="20201030111805"></p><a id="more"></a><h1 id="Javaee-Spring03"><a href="#Javaee-Spring03" class="headerlink" title="Javaee-Spring03"></a>Javaee-Spring03</h1><h2 id="本文概览"><a href="#本文概览" class="headerlink" title="本文概览"></a>本文概览</h2><ul><li>回顾&amp;工厂模式</li><li>代理模式<ul><li>静态代理</li><li>动态代理<ul><li>jdk中的动态代理</li><li>cglib动态代理</li></ul></li></ul></li><li>装饰设计模式</li></ul><h2 id="回顾-amp-工厂模式"><a href="#回顾-amp-工厂模式" class="headerlink" title="回顾&amp;工厂模式"></a>回顾&amp;工厂模式</h2><blockquote><p>在前2篇的文章中我们学习了Spring中的<strong>IOC(控制反转)</strong>和<strong>DI(依赖注入)</strong>,并分别使用<strong>xml</strong>和<strong>注解</strong>的形式对spring进行配置.</p><p>再来思考几个问题?</p><ul><li>ApplicationContext是个什么东西?</li><li>如何自己去构建一个BeanFactory?</li></ul></blockquote><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><h4 id="继承体系"><a href="#继承体系" class="headerlink" title="继承体系"></a>继承体系</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201027001942.png" alt="20201027001942"></p><blockquote><p>Spring有两个核心接口：BeanFactory和ApplicationContext，其中ApplicationContext是BeanFactory的子接口。他们都可代表Spring容器，Spring容器是生成Bean实例的工厂，并且管理容器中的Bean。 </p></blockquote><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><blockquote><p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p></blockquote><h4 id="工厂模式演示"><a href="#工厂模式演示" class="headerlink" title="工厂模式演示"></a>工厂模式演示</h4><blockquote><p>场景分析 : </p><ul><li>使用传统new的方式创建五菱,宝马,奔驰汽车对象不满足面向对象偷懒的原则,从而设计工厂创建对象,调用者告诉工厂需要什么车就创建什么车.</li><li>普通的工厂if…else和需要创建的对象耦合度高,维护性极低,采用配置文件来配置需要创建的对象</li><li>单例工厂生产单例对象,并在程序加载时就生产了所有对象.</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WuLin</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"五菱上山了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaoMa</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"宝马上山了"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"奔驰上山了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(name == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Car car = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"baoma"</span>.equalsIgnoreCase(name)) &#123;</span><br><span class="line">car = <span class="keyword">new</span> BaoMa();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"benz"</span>.equalsIgnoreCase(name)) &#123;</span><br><span class="line">car = <span class="keyword">new</span> Benz();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"wuling"</span>.equalsIgnoreCase(name)) &#123;</span><br><span class="line">car = <span class="keyword">new</span> WuLin();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"没有您想要的车型"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> car;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">Car car = CarFactory.getCar(<span class="string">"baoma"</span>);</span><br><span class="line">car.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点 :"></a>优缺点 :</h5><ul><li>优点<ul><li>一个调用者想创建一个对象，只要知道其名称就可以了。 </li><li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 </li><li>屏蔽产品的具体实现，调用者只关心产品的接口。 </li></ul></li><li>缺点<ul><li>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。</li><li>对象和工厂的耦合程度太高,当需要增加/删除创建的对象时,需要频繁修改工厂类的工厂方法.</li></ul></li></ul><h4 id="简单工厂修改"><a href="#简单工厂修改" class="headerlink" title="简单工厂修改"></a>简单工厂修改</h4><blockquote><p> 使用xml文件配置需要创建的对象的方式来降低对象和工厂之间的耦合度</p></blockquote><p><strong>beans.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"baoma"</span> <span class="attr">class</span>=<span class="string">"com.java.demo.BaoMa"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"wulin"</span> <span class="attr">class</span>=<span class="string">"com.java.demo.WuLin"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"benzi"</span> <span class="attr">class</span>=<span class="string">"com.java.demo.Benz"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>CarFactory.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(name == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Car car = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//读取xml文件</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Document document = Jsoup.parse(new File(CarFactory.class.getClassLoader().getResource("beans.xml").getPath()), "utf-8");</span><br><span class="line">Elements elements = document.getElementsByTag(<span class="string">"bean"</span>);</span><br><span class="line"><span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line"><span class="keyword">if</span>(name.equals(element.attr(<span class="string">"id"</span>))) &#123;</span><br><span class="line">String className = element.attr(<span class="string">"class"</span>);</span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">Object obj = clazz.newInstance();</span><br><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Car) &#123;</span><br><span class="line">car = (Car)obj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> car;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果需要创建的对象都是单例对象,可以继续修改</p></blockquote><p><strong>SingleCarFactory.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleCarFactory</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">/*类一加载实例化所有xml中的对象,并保存到Map中*/</span></span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Document document = Jsoup.parse(new File(CarFactory.class.getClassLoader().getResource("beans.xml").getPath()), "utf-8");</span><br><span class="line">            Elements elements = document.getElementsByTag(<span class="string">"bean"</span>);</span><br><span class="line">            <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">                String key = element.attr(<span class="string">"id"</span>);</span><br><span class="line">                String className = element.attr(<span class="string">"class"</span>);</span><br><span class="line">                Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">                Object obj = clazz.newInstance();</span><br><span class="line">                map.put(key, obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getCar</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">Car car2 = (Car) SingleCarFactory.getCar(<span class="string">"baoma"</span>);</span><br><span class="line">Car car1 = (Car) SingleCarFactory.getCar(<span class="string">"baoma"</span>);</span><br><span class="line">System.out.println(car1 == car2);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><blockquote><p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。</p><p>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p></blockquote><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><blockquote><p>场景分析 : </p><ul><li>电脑杀毒功能需要操作复杂的命令行操作</li><li>通过安装安全卫士调用安全卫士的杀毒功能来达到杀毒的目的.</li><li>在杀毒的同时还能帮助用户查找漏洞,安装极速浏览器和精美广告等功能.</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.pro;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> 功能</span>&#123;</span><br><span class="line"><span class="keyword">void</span> 杀毒();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 电脑 <span class="keyword">implements</span> 功能</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 杀毒() &#123;</span><br><span class="line">System.out.println(<span class="string">"电脑正在杀毒..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 安全卫士 <span class="keyword">implements</span> 功能</span>&#123;</span><br><span class="line"><span class="keyword">private</span> 电脑 com;</span><br><span class="line"><span class="keyword">public</span> 安全卫士(电脑 com) &#123;</span><br><span class="line"><span class="keyword">this</span>.com = com;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 杀毒() &#123;</span><br><span class="line">安装浏览器();</span><br><span class="line">com.杀毒();</span><br><span class="line">查找漏洞();</span><br><span class="line">弹窗广告();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 安装浏览器() &#123;</span><br><span class="line">System.out.println(<span class="string">"装上250浏览器..运行速度提升50倍"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 查找漏洞() &#123;</span><br><span class="line">System.out.println(<span class="string">"正在努力查询电脑中的漏洞"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 弹窗广告() &#123;</span><br><span class="line">System.out.println(<span class="string">"屠龙宝刀,点击就送"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 用户 </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">安全卫士 safe250 = <span class="keyword">new</span> 安全卫士(<span class="keyword">new</span> 电脑());</span><br><span class="line">safe250.杀毒();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点 :"></a>优缺点 :</h5><ul><li>优点 <ul><li>职责清晰,分工明确.</li><li>扩展性强,在不修改原有的基础功能上进行了扩展.</li><li>更加智能化,更加简便.</li></ul></li><li>缺点<ul><li>当需要在每个功能上进行相同的扩展,代码冗余.</li><li>每增加一个被代理类,就需要同步增加一个代理,代码量陡增.</li></ul></li></ul><h4 id="JDK中的动态代理"><a href="#JDK中的动态代理" class="headerlink" title="JDK中的动态代理"></a>JDK中的动态代理</h4><blockquote><p>场景分析 : 在原有的业务基础上拓展其他功能.</p><ul><li>准备计算器类和计算功能接口</li><li>在计算器中的加减乘除方法上添加测试功能和日志功能.</li></ul></blockquote><h5 id="使用静态代理"><a href="#使用静态代理" class="headerlink" title="使用静态代理"></a>使用静态代理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*计算接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ICalucator</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;<span class="comment">//加</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;<span class="comment">//减</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;<span class="comment">//乘</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;<span class="comment">//除</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要增加功能的计算器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calucator</span> <span class="keyword">implements</span> <span class="title">ICalucator</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalucatorProxy</span> <span class="keyword">implements</span> <span class="title">ICalucator</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Calucator calucator;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CalucatorProxy</span><span class="params">(Calucator calucator)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.calucator = calucator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">test(a, b);</span><br><span class="line"><span class="keyword">int</span> value = calucator.plus(a, b);</span><br><span class="line">log(a,b,value);</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">test(a, b);</span><br><span class="line"><span class="keyword">int</span> value = calucator.minus(a, b);</span><br><span class="line">log(a,b,value);</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">test(a, b);</span><br><span class="line"><span class="keyword">int</span> value = calucator.mult(a, b);</span><br><span class="line">log(a,b,value);</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">test(a, b);</span><br><span class="line"><span class="keyword">int</span> value = calucator.div(a, b);</span><br><span class="line">log(a,b,value);</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加日志功能</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(Object...objects)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"传入的参数为 : a = "</span> + objects[<span class="number">0</span>] + <span class="string">" , b = "</span> + objects[<span class="number">1</span>] + <span class="string">" , 结果value = "</span> + objects[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加测试功能</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"传入的数字不合法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Calucator calucator = <span class="keyword">new</span> Calucator();</span><br><span class="line">CalucatorProxy proxy = <span class="keyword">new</span> CalucatorProxy(calucator);</span><br><span class="line">proxy.plus(-<span class="number">5</span>, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个缺点太明显了,每一个被代理类中的业务都需要加上代理类中的日志功能和测试功能,极其繁琐.</p></blockquote><h5 id="使用动态代理"><a href="#使用动态代理" class="headerlink" title="使用动态代理"></a>使用动态代理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JDKProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line"><span class="comment">//需要增强的类</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JDKProxy</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//创建代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拦截代理接口中的方法,并统一处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        test(Integer.parseInt(args[<span class="number">0</span>].toString()),Integer.parseInt(args[<span class="number">1</span>].toString()));</span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        log(args[<span class="number">0</span>],args[<span class="number">1</span>],result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加日志功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(Object...objects)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"传入的参数为 : a = "</span> + objects[<span class="number">0</span>] + <span class="string">" , b = "</span> + objects[<span class="number">1</span>] + <span class="string">" , 结果value = "</span> + objects[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加测试功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"传入的数字不合法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calucator calucator = <span class="keyword">new</span> Calucator();</span><br><span class="line">        JDKProxy handler = <span class="keyword">new</span> JDKProxy(calucator);</span><br><span class="line">        ICalucator proxy = (ICalucator) handler.getProxy();</span><br><span class="line">        proxy.plus(-<span class="number">5</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用反射获取被代理类中的每个方法,然后在<code>Object result = method.invoke(calucator, args);</code>这句话的上下嵌入需要加入的功能.就等于给被代理类中的每个方法全部加上该功能.</p></blockquote><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul><li>JDK中的动态代理需要被代理类实现代理接口</li></ul><h4 id="动态代理核心对象"><a href="#动态代理核心对象" class="headerlink" title="动态代理核心对象"></a>动态代理核心对象</h4><h5 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h5><blockquote><p>代理类.使用静态方法<code>newProxyInstance()</code>方法动态创建代理对象.</p></blockquote><h5 id="InvocationHandler"><a href="#InvocationHandler" class="headerlink" title="InvocationHandler"></a>InvocationHandler</h5><blockquote><p>处理器,拦截器.通过接口中的<code>invoke()</code>方法对被代理类中的所有方法进行拦截,并统一处理.</p></blockquote><h4 id="Cglib动态代理"><a href="#Cglib动态代理" class="headerlink" title="Cglib动态代理"></a>Cglib动态代理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要增加功能的计算器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calucator1</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成代理对象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line"><span class="comment">//需要增强的类</span></span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CglibProxy</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">enhancer.setSuperclass(target.getClass());</span><br><span class="line">enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">return</span> enhancer.create();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拦截</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">Object result = method.invoke(target, args);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Calucator1 calucator1 = <span class="keyword">new</span> Calucator1();</span><br><span class="line">CglibProxy cglibProxy = <span class="keyword">new</span> CglibProxy(calucator1);</span><br><span class="line">Calucator1 proxy = (Calucator1) cglibProxy.getProxy();</span><br><span class="line">System.out.println(proxy.plus(-<span class="number">5</span>, <span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>和JDK不同的是,需要增强的类,及被代理类不需要实现任何接口.</li></ul><h3 id="装饰设计模式"><a href="#装饰设计模式" class="headerlink" title="装饰设计模式"></a>装饰设计模式</h3><blockquote><p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p><p>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p></blockquote><h4 id="装饰设计模式演示"><a href="#装饰设计模式演示" class="headerlink" title="装饰设计模式演示"></a>装饰设计模式演示</h4><blockquote><p>场景分析 : </p><ul><li>程序中已有读取功能接口<code>Reader</code>,接口中有<code>read()</code>方法</li><li>设计文本文件读取器<code>TextFileReader</code>,音乐文件读取器<code>MusicFileReader</code>.都实现Reader接口</li><li>对<code>TextFileReader</code>,<code>MusicFileReader</code>的<code>read</code>功能进行增强,实现高速读取.</li></ul></blockquote><h5 id="使用继承增强"><a href="#使用继承增强" class="headerlink" title="使用继承增强"></a>使用继承增强</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Reader</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextFileReader</span> <span class="keyword">implements</span> <span class="title">Reader</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"读取文本文件"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicFileReader</span> <span class="keyword">implements</span> <span class="title">Reader</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"读取音乐文件"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedTextFileReader</span> <span class="keyword">extends</span> <span class="title">TextFileReader</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"增加缓冲区"</span>);</span><br><span class="line">System.out.println(<span class="string">"高速读取"</span>);</span><br><span class="line"><span class="keyword">super</span>.read();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedMusicFileReader</span> <span class="keyword">extends</span> <span class="title">MusicFileReader</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"增加缓冲区"</span>);</span><br><span class="line">System.out.println(<span class="string">"高速读取"</span>);</span><br><span class="line"><span class="keyword">super</span>.read();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>缺点 : 每增加一个<code>Reader</code>接口的实现类,就需要增加一个该实现类的子类来增强其<code>read()</code>功能</li></ul><h5 id="使用装饰设计模式增强"><a href="#使用装饰设计模式增强" class="headerlink" title="使用装饰设计模式增强"></a>使用装饰设计模式增强</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Reader</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextFileReader</span> <span class="keyword">implements</span> <span class="title">Reader</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"读取文本文件"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicFileReader</span> <span class="keyword">implements</span> <span class="title">Reader</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"读取音乐文件"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedReader</span> <span class="keyword">implements</span> <span class="title">Reader</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Reader reader;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedReader</span><span class="params">(Reader reader)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.reader = reader;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"增加缓冲区"</span>);</span><br><span class="line">System.out.println(<span class="string">"高速读取"</span>);</span><br><span class="line">reader.read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点 : 增加的<code>Reader</code>接口的实现类,如果需要增强<code>read()</code>功能只需要通过<code>BufferedReader</code>对象对其增强即可</li></ul><h4 id="代理模式和装饰模式"><a href="#代理模式和装饰模式" class="headerlink" title="代理模式和装饰模式"></a>代理模式和装饰模式</h4><ul><li>代理强调功能的控制</li><li>装饰强调功能的增强</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030111805.png&quot; alt=&quot;20201030111805&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="spring" scheme="http://fightlee.fun/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>前端复习篇-html02</title>
    <link href="http://fightlee.fun/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E7%AF%87-html02.html"/>
    <id>http://fightlee.fun/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E7%AF%87-html02.html</id>
    <published>2020-10-25T08:30:42.000Z</published>
    <updated>2020-10-26T17:48:02.376Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201024230008.png" alt="20201024230008"></p><a id="more"></a><h1 id="HTML5-二"><a href="#HTML5-二" class="headerlink" title="HTML5(二)"></a>HTML5(二)</h1><h3 id="音视频"><a href="#音视频" class="headerlink" title="音视频"></a>音视频</h3><h4 id="video"><a href="#video" class="headerlink" title="video"></a>video</h4><blockquote><p>播放视频</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">"800"</span> <span class="attr">height</span>=<span class="string">"500"</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">当前浏览器不支持 video直接播放</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h4><blockquote><p>播放音频</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"asserts/tianti.mp3"</span> <span class="attr">controls</span> <span class="attr">loop</span> <span class="attr">autoplay</span> <span class="attr">muted</span> <span class="attr">preload</span>=<span class="string">"auto"</span>&gt;</span></span><br><span class="line">    当前浏览器不支持audio</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><blockquote><p>HTML 的 <code>canvas</code> 元素提供了一个空白绘图区域，可以使用 APIs 比如 Canvas 2D 或 WebGL）来绘制图形。</p></blockquote><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"mcanvas"</span> <span class="attr">width</span>=<span class="string">"250"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">height</span>=<span class="string">"250"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid red;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><em>note</em>:  如果CSS的尺寸与初始画布的比例不一致,它会出现扭曲. 如果你绘制出来的图像是扭曲的, 尝试用width和height属性为<code>canvas</code>明确规定宽高，而不是使用CSS。 </p></blockquote><h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'mcanvas'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (canvas.getContext)&#123;<span class="comment">//判断浏览器是否支持canvas</span></span><br><span class="line">  <span class="comment">//如果支持</span></span><br><span class="line">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//如果不支持</span></span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例-画几条线"><a href="#案例-画几条线" class="headerlink" title="案例 : 画几条线"></a>案例 : 画几条线</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">startDraw</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> mcanvas = <span class="built_in">document</span>.querySelector(<span class="string">'#mcanvas'</span>);</span></span><br><span class="line">if(mcanvas.getContext)&#123;</span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> ctx = mcanvas.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="actionscript">ctx.fillStyle = <span class="string">'red'</span>;</span></span><br><span class="line">ctx.fillRect(50,50,150,50);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">ctx.fillStyle = <span class="string">'black'</span>;</span></span><br><span class="line">ctx.fillRect(50,150,150,50);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"startDraw();"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"mcanvas"</span> <span class="attr">width</span>=<span class="string">"250px"</span> <span class="attr">height</span>=<span class="string">"250px"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h4><ul><li>fillRect(x, y, width, height) : 绘制一个填充矩形</li><li>strokeRect(x, y, width, height) : 绘制一个矩形边框</li><li>clearRect(x, y, width, height) : 清除矩形区域</li></ul><h4 id="绘制路径"><a href="#绘制路径" class="headerlink" title="绘制路径"></a>绘制路径</h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>beginPath()</td><td>创建路径起始点</td></tr><tr><td>moveTo(x,y)</td><td>移动</td></tr><tr><td>lineTo(x,y)</td><td>画线</td></tr><tr><td>closePath()</td><td>封闭路径</td></tr><tr><td>fill()</td><td>填充</td></tr><tr><td>stroke()</td><td>描边</td></tr></tbody></table><h5 id="案例-绘制三角形"><a href="#案例-绘制三角形" class="headerlink" title="案例 : 绘制三角形"></a>案例 : 绘制三角形</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">startDraw</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> mcanvas = <span class="built_in">document</span>.querySelector(<span class="string">'#mcanvas'</span>);</span></span><br><span class="line">        if(mcanvas.getContext)&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> c = mcanvas.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//创建起始点</span></span></span><br><span class="line">            c.beginPath();</span><br><span class="line"><span class="actionscript">            <span class="comment">//移动</span></span></span><br><span class="line">            c.moveTo(50,50);</span><br><span class="line"><span class="actionscript">            <span class="comment">//开始画线</span></span></span><br><span class="line">            c.lineTo(150,50);</span><br><span class="line">            c.lineTo(50,150);</span><br><span class="line"><span class="actionscript">            <span class="comment">//关闭路径</span></span></span><br><span class="line">            c.closePath();</span><br><span class="line"><span class="actionscript">            <span class="comment">//填充</span></span></span><br><span class="line">            c.fill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h4><blockquote><p>一般用来绘制复杂有规律的图形。 </p></blockquote><h5 id="二阶贝塞尔曲线和三阶贝塞尔曲线区别"><a href="#二阶贝塞尔曲线和三阶贝塞尔曲线区别" class="headerlink" title="二阶贝塞尔曲线和三阶贝塞尔曲线区别"></a>二阶贝塞尔曲线和三阶贝塞尔曲线区别</h5><p>线性公式 :</p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201026213336.png" alt="20201026213336"></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/1cifang.gif" alt="1cifang"></p><p>二次方公式 : </p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201026213407.png" alt="20201026213407"></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/2cifang.gif" alt="2cifang"></p><p>三次方公式 : </p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201026213419.png" alt="20201026213419"></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/3cifang.gif" alt="3cifang"></p><h5 id="简单贝塞尔案例"><a href="#简单贝塞尔案例" class="headerlink" title="简单贝塞尔案例"></a>简单贝塞尔案例</h5><h5 id="使用二阶贝塞尔曲线"><a href="#使用二阶贝塞尔曲线" class="headerlink" title="使用二阶贝塞尔曲线"></a><strong>使用二阶贝塞尔曲线</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startDraw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'mcanvas'</span>);</span><br><span class="line">  <span class="keyword">if</span> (canvas.getContext) &#123;</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二阶贝塞尔曲线</span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo(<span class="number">75</span>, <span class="number">25</span>);</span><br><span class="line">    ctx.quadraticCurveTo(<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">62.5</span>);</span><br><span class="line">    ctx.quadraticCurveTo(<span class="number">25</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">    ctx.quadraticCurveTo(<span class="number">50</span>, <span class="number">120</span>, <span class="number">30</span>, <span class="number">125</span>);</span><br><span class="line">    ctx.quadraticCurveTo(<span class="number">60</span>, <span class="number">120</span>, <span class="number">65</span>, <span class="number">100</span>);</span><br><span class="line">    ctx.quadraticCurveTo(<span class="number">125</span>, <span class="number">100</span>, <span class="number">125</span>, <span class="number">62.5</span>);</span><br><span class="line">    ctx.quadraticCurveTo(<span class="number">125</span>, <span class="number">25</span>, <span class="number">75</span>, <span class="number">25</span>);</span><br><span class="line">    ctx.stroke();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用三阶贝塞尔曲线</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startDraw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'mcanvas'</span>);</span><br><span class="line">    <span class="keyword">if</span> (canvas.getContext)&#123;</span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//三阶贝塞尔曲线</span></span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(<span class="number">75</span>, <span class="number">40</span>);</span><br><span class="line">        ctx.bezierCurveTo(<span class="number">75</span>, <span class="number">37</span>, <span class="number">70</span>, <span class="number">25</span>, <span class="number">50</span>, <span class="number">25</span>);</span><br><span class="line">        ctx.bezierCurveTo(<span class="number">20</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">62.5</span>, <span class="number">20</span>, <span class="number">62.5</span>);</span><br><span class="line">        ctx.bezierCurveTo(<span class="number">20</span>, <span class="number">80</span>, <span class="number">40</span>, <span class="number">102</span>, <span class="number">75</span>, <span class="number">120</span>);</span><br><span class="line">        ctx.bezierCurveTo(<span class="number">110</span>, <span class="number">102</span>, <span class="number">130</span>, <span class="number">80</span>, <span class="number">130</span>, <span class="number">62.5</span>);</span><br><span class="line">        ctx.bezierCurveTo(<span class="number">130</span>, <span class="number">62.5</span>, <span class="number">130</span>, <span class="number">25</span>, <span class="number">100</span>, <span class="number">25</span>);</span><br><span class="line">        ctx.bezierCurveTo(<span class="number">85</span>, <span class="number">25</span>, <span class="number">75</span>, <span class="number">37</span>, <span class="number">75</span>, <span class="number">40</span>);</span><br><span class="line">        ctx.fill();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绘制圆弧"><a href="#绘制圆弧" class="headerlink" title="绘制圆弧"></a>绘制圆弧</h4><ul><li>arc(x, y, radius, startAngle, endAngle, anticlockwise)</li><li>arcTo(x1, y1, x2, y2, radius)</li></ul><blockquote><p>这里详细介绍一下arc方法，该方法有六个参数：<code>x,y</code>为绘制圆弧所在圆上的圆心坐标。<code>radius</code>为半径。<code>startAngle</code>以及<code>endAngle</code>参数用弧度定义了开始以及结束的弧度。这些都是以x轴为基准。参数<code>anticlockwise</code>为一个布尔值。为true时，是逆时针方向，否则顺时针方向。 </p><p><strong>注意：<code>arc()</code>函数中表示角的单位是弧度，不是角度。角度与弧度的js表达式:</strong></p><p><strong>弧度=(Math.PI/180)*角度。</strong></p></blockquote><h5 id="案例-歪嘴战神"><a href="#案例-歪嘴战神" class="headerlink" title="案例 : 歪嘴战神"></a>案例 : 歪嘴战神</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startDraw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'mcanvas'</span>);</span><br><span class="line">    <span class="keyword">if</span> (canvas.getContext)&#123;</span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">        ctx.beginPath();<span class="comment">// 开始绘制</span></span><br><span class="line">        ctx.arc(<span class="number">75</span>, <span class="number">75</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>, <span class="literal">true</span>); <span class="comment">//画脸</span></span><br><span class="line">        ctx.moveTo(<span class="number">110</span>, <span class="number">75</span>);</span><br><span class="line">        ctx.arc(<span class="number">75</span>, <span class="number">75</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">2</span>, <span class="literal">false</span>);<span class="comment">//口(顺时针)</span></span><br><span class="line">        ctx.moveTo(<span class="number">65</span>, <span class="number">65</span>);</span><br><span class="line">        ctx.arc(<span class="number">60</span>, <span class="number">65</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>, <span class="literal">true</span>);  <span class="comment">// 左眼</span></span><br><span class="line">        ctx.moveTo(<span class="number">95</span>, <span class="number">65</span>);</span><br><span class="line">        ctx.arc(<span class="number">90</span>, <span class="number">65</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>, <span class="literal">true</span>);  <span class="comment">// 右眼</span></span><br><span class="line">        ctx.closePath();</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="样式属性"><a href="#样式属性" class="headerlink" title="样式属性"></a>样式属性</h4><h5 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h5><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>fillStyle</td><td>设置填充颜色</td></tr><tr><td>strokeStyle</td><td>设置轮廓颜色</td></tr></tbody></table><h5 id="线型"><a href="#线型" class="headerlink" title="线型"></a>线型</h5><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>lineWidth</td><td>线条宽度</td></tr><tr><td>lineCap</td><td>线条末端样式,<code>butt</code> <code>round</code> <code>square</code>,默认为<code>butt</code></td></tr><tr><td>lineJoin</td><td>线条交汇处样式 , <code>round</code> <code>bevel</code> <code>miter</code>,默认为<code>miter</code></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startDraw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'mcanvas'</span>);</span><br><span class="line">    <span class="keyword">if</span> (canvas.getContext) &#123;</span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lineJoin&amp;lineCap</span></span><br><span class="line">        ctx.beginPath(); <span class="comment">// 开始绘制</span></span><br><span class="line">        ctx.lineWidth = <span class="number">10</span>;</span><br><span class="line">        ctx.lineCap = <span class="string">'square'</span></span><br><span class="line">        ctx.lineJoin = <span class="string">'round'</span>;</span><br><span class="line">        ctx.moveTo(<span class="number">50</span>,<span class="number">120</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">120</span>,<span class="number">50</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">180</span>,<span class="number">120</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.closePath();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h4><ul><li>fillText(text, x, y [, maxWidth])  指定位置填充文本.</li><li>strokeText(text, x, y [, maxWidth]) 指定位置绘制文本边框</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startDraw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'mcanvas'</span>);</span><br><span class="line">    <span class="keyword">if</span> (canvas.getContext) &#123;</span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">        <span class="comment">//设置字体颜色</span></span><br><span class="line">        ctx.fillStyle = <span class="string">'red'</span>;</span><br><span class="line">        <span class="comment">//设置字体样式</span></span><br><span class="line">        ctx.font = <span class="string">'40px Arial'</span></span><br><span class="line">        <span class="comment">//填充字体</span></span><br><span class="line">        ctx.fillText(<span class="string">'Hello'</span>,<span class="number">20</span>,<span class="number">80</span>);</span><br><span class="line">        <span class="comment">//字体描边</span></span><br><span class="line">        ctx.strokeText(<span class="string">'Hello'</span>,<span class="number">20</span>,<span class="number">160</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h4><ul><li><p>drawImage(image, x, y) : 指定位置绘制image图片  —- 绘图</p></li><li><p>drawImage(image, x, y, width, height) : 指定缩放大小 —-缩放</p></li><li><p>drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) : </p><blockquote><p> 第一个参数和其它的是相同的，都是一个图像或者另一个 canvas 的引用.前4个是定义图像源的切片位置和大小，后4个则是定义切片的目标显示位置和大小。 </p></blockquote></li></ul><h5 id="创建图片"><a href="#创建图片" class="headerlink" title="创建图片"></a>创建图片</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();   <span class="comment">// 创建一个&lt;img&gt;元素</span></span><br><span class="line">img.src = <span class="string">'myImage.png'</span>; <span class="comment">// 设置图片源地址</span></span><br></pre></td></tr></table></figure><h5 id="绘制图片-1"><a href="#绘制图片-1" class="headerlink" title="绘制图片"></a>绘制图片</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ctx = document.getElementById(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.onload = function()&#123;</span><br><span class="line">        ctx.drawImage(img,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(<span class="number">30</span>,<span class="number">96</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">70</span>,<span class="number">66</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">103</span>,<span class="number">76</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">170</span>,<span class="number">15</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">    img.src = <span class="string">'images/backdrop.png'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="切图"><a href="#切图" class="headerlink" title="切图"></a>切图</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startDraw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//绘制图片</span></span><br><span class="line">        context.beginPath();</span><br><span class="line">        context.drawImage(img,<span class="number">27</span>,<span class="number">27</span>,<span class="number">64</span>,<span class="number">64</span>,<span class="number">27</span>,<span class="number">27</span>,<span class="number">64</span>,<span class="number">64</span>);</span><br><span class="line">        context.closePath();</span><br><span class="line">    &#125;</span><br><span class="line">    img.src = <span class="string">'img/bofangqi.png'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例-绘制马保国"><a href="#案例-绘制马保国" class="headerlink" title="案例 : 绘制马保国"></a>案例 : 绘制马保国</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//绘制图片</span></span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.drawImage(img,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">    context.closePath();</span><br><span class="line">    <span class="comment">//绘制文本</span></span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.fillStyle = <span class="string">'gold'</span>;</span><br><span class="line">    context.font = <span class="string">'18px 微软雅黑'</span>;</span><br><span class="line">    context.fillText(<span class="string">'年轻人要耗子喂汁!'</span>,<span class="number">100</span>,<span class="number">280</span>);</span><br><span class="line">    context.closePath();</span><br><span class="line">&#125;</span><br><span class="line">img.src = <span class="string">'img/mabaoguo.jpg'</span>;</span><br></pre></td></tr></table></figure><h5 id="案例-制作表情包"><a href="#案例-制作表情包" class="headerlink" title="案例 : 制作表情包"></a>案例 : 制作表情包</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入文字"</span> <span class="attr">id</span>=<span class="string">"imgText"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//绘制图片</span></span></span><br><span class="line">drawImg();</span><br><span class="line"><span class="actionscript"><span class="comment">//监听表单输入内容改变事件</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">'#imgText'</span>).onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">                drawText(<span class="keyword">this</span>.value);</span></span><br><span class="line">drawImg();</span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">//绘图</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">drawImg</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> context = <span class="built_in">document</span>.querySelector(<span class="string">'#canvas'</span>).getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="actionscript">img.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">context.drawImage(img,50,50);</span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript">img.src = <span class="string">'img/gaoxiao.png'</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">//绘制文字</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">drawText</span><span class="params">(text)</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> context = <span class="built_in">document</span>.querySelector(<span class="string">'#canvas'</span>).getContext(<span class="string">'2d'</span>);</span></span><br><span class="line">context.clearRect(0,0,500,500);</span><br><span class="line"><span class="actionscript">context.fillStyle = <span class="string">'red'</span>;</span></span><br><span class="line"><span class="actionscript">context.font = <span class="string">'30px 微软雅黑'</span>;</span></span><br><span class="line">context.fillText(text,100,330);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="save-amp-restore"><a href="#save-amp-restore" class="headerlink" title="save()&amp;restore()"></a>save()&amp;restore()</h4><ul><li>save() : 保存当前绘制状态</li><li>restore() : 恢复之前状态</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">  ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">150</span>);   <span class="comment">// 使用默认设置绘制一个矩形</span></span><br><span class="line">  ctx.save();                  <span class="comment">// 保存默认状态</span></span><br><span class="line"></span><br><span class="line">  ctx.fillStyle = <span class="string">'#09F'</span>       <span class="comment">// 在原有配置基础上对颜色做改变</span></span><br><span class="line">  ctx.fillRect(<span class="number">15</span>,<span class="number">15</span>,<span class="number">120</span>,<span class="number">120</span>); <span class="comment">// 使用新的设置绘制一个矩形</span></span><br><span class="line"></span><br><span class="line">  ctx.save();                  <span class="comment">// 保存当前状态</span></span><br><span class="line">  ctx.fillStyle = <span class="string">'#FFF'</span>       <span class="comment">// 再次改变颜色配置</span></span><br><span class="line">  ctx.globalAlpha = <span class="number">0.5</span>;    </span><br><span class="line">  ctx.fillRect(<span class="number">30</span>,<span class="number">30</span>,<span class="number">90</span>,<span class="number">90</span>);   <span class="comment">// 使用新的配置绘制一个矩形</span></span><br><span class="line"></span><br><span class="line">  ctx.restore();               <span class="comment">// 重新加载之前的颜色状态</span></span><br><span class="line">  ctx.fillRect(<span class="number">45</span>,<span class="number">45</span>,<span class="number">60</span>,<span class="number">60</span>);   <span class="comment">// 使用上一次的配置绘制一个矩形</span></span><br><span class="line"></span><br><span class="line">  ctx.restore();               <span class="comment">// 加载默认颜色配置</span></span><br><span class="line">  ctx.fillRect(<span class="number">60</span>,<span class="number">60</span>,<span class="number">30</span>,<span class="number">30</span>);   <span class="comment">// 使用加载的配置绘制一个矩形</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="小案例-绘制验证码"><a href="#小案例-绘制验证码" class="headerlink" title="小案例 : 绘制验证码"></a>小案例 : 绘制验证码</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"startDraw()"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"80"</span> <span class="attr">style</span>=<span class="string">"border:1px solid lightgray"</span> <span class="attr">onclick</span>=<span class="string">"startDraw()"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">startDraw</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//0.准备字体数组</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> texts = <span class="string">'1234567890abcdefghijlmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> textArray = texts.split(<span class="string">''</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//获取canvas</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//绘制前先清除内容</span></span></span><br><span class="line">                context.clearRect(0,0,200,80);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//1.绘制矩形背景</span></span></span><br><span class="line">                context.beginPath();</span><br><span class="line"><span class="actionscript">                context.fillStyle = <span class="string">'lightgray'</span>;</span></span><br><span class="line">                context.moveTo(0,0);</span><br><span class="line">                context.fillRect(0,0,200,80);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//2.绘制干扰线</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">15</span>;i++)&#123;</span></span><br><span class="line">                    context.beginPath();</span><br><span class="line">                    context.strokeStyle = getRandomColor();</span><br><span class="line">                    context.moveTo(getRandomNumber(200),getRandomNumber(80));</span><br><span class="line">                    context.lineTo(getRandomNumber(200),getRandomNumber(80));</span><br><span class="line">                    context.stroke();</span><br><span class="line">                    context.closePath();</span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">//3.绘制字体</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">6</span> ; i++)&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> text = textArray[getRandomNumber(textArray.length - <span class="number">1</span>)];</span></span><br><span class="line">                    context.beginPath();</span><br><span class="line"><span class="actionscript">                    <span class="comment">//保存当前状态</span></span></span><br><span class="line">                    context.save();</span><br><span class="line">                    context.fillStyle = getRandomColor();</span><br><span class="line"><span class="actionscript">                    context.font = <span class="string">'40px Arial'</span>;</span></span><br><span class="line"><span class="actionscript">                    context.textAlign = <span class="string">'center'</span>;</span></span><br><span class="line"><span class="javascript">                    context.rotate(getRandomNumber(<span class="number">10</span>) * <span class="built_in">Math</span>.PI / <span class="number">180</span>)</span></span><br><span class="line">                    context.fillText(text,(i + 1) * 27,50);</span><br><span class="line"><span class="actionscript">                    <span class="comment">//旋转一次后回到最初状态</span></span></span><br><span class="line">                    context.restore();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//获取随机颜色</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">getRandomColor</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">'rgb('</span>+getRandomNumber(<span class="number">255</span>)+<span class="string">','</span>+getRandomNumber(<span class="number">255</span>)+<span class="string">','</span>+getRandomNumber(<span class="number">255</span>)+<span class="string">')'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">//获取随机0~number数字</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">getRandomNumber</span><span class="params">(number)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (number + <span class="number">1</span>));</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201024230008.png&quot; alt=&quot;20201024230008&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://fightlee.fun/categories/web/"/>
    
    
      <category term="html5" scheme="http://fightlee.fun/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>前端复习篇-html01</title>
    <link href="http://fightlee.fun/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E7%AF%87-html01.html"/>
    <id>http://fightlee.fun/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E7%AF%87-html01.html</id>
    <published>2020-10-24T14:58:01.000Z</published>
    <updated>2020-10-28T05:33:16.951Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201024230008.png" alt="20201024230008"></p><a id="more"></a><h1 id="HTML5-一"><a href="#HTML5-一" class="headerlink" title="HTML5(一)"></a>HTML5(一)</h1><h4 id="html5兼容性"><a href="#html5兼容性" class="headerlink" title="html5兼容性"></a>html5兼容性</h4><blockquote><p>一些浏览器可能对Html5并不友好,所以我们需要一些特殊手段来保证Html5在低版本浏览器上的运行</p></blockquote><h5 id="方法1-使用CSS"><a href="#方法1-使用CSS" class="headerlink" title="方法1 : 使用CSS"></a>方法1 : 使用CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span>, <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">hgroup</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法2-使用script脚本"><a href="#方法2-使用script脚本" class="headerlink" title="方法2 : 使用script脚本"></a>方法2 : 使用script脚本</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">&lt;script src="http://apps.bdimg.com/libs/html5shiv/3.7/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><h5 id="方法3-添加noscript标签给与适当提示"><a href="#方法3-添加noscript标签给与适当提示" class="headerlink" title="方法3 : 添加noscript标签给与适当提示"></a>方法3 : 添加noscript标签给与适当提示</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment"> &lt;script src="http://apps.bdimg.com/libs/html5shiv/3.7/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">  &lt;noscript&gt;</span></span><br><span class="line"><span class="comment">     &lt;strong&gt;Warning !&lt;/strong&gt;</span></span><br><span class="line"><span class="comment">     Because your browser does not support HTML5, some elements are simulated using JScript.</span></span><br><span class="line"><span class="comment">     Unfortunately your browser has disabled scripting. Please enable it in order to display this page.</span></span><br><span class="line"><span class="comment">  &lt;/noscript&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="html5语义话标签"><a href="#html5语义话标签" class="headerlink" title="html5语义话标签"></a>html5语义话标签</h4><table><thead><tr><th>标签名</th><th>描述</th></tr></thead><tbody><tr><td><strong>header</strong></td><td>放在页面或布局的顶部，一般放置导航栏或标题.</td></tr><tr><td><strong>nav</strong></td><td>页面导航,一般在header或者aside中使用.</td></tr><tr><td><strong>aside</strong></td><td>放在网站侧边区域,比如侧边栏,广告,友情链接.</td></tr><tr><td><strong>footer</strong></td><td>底部信息,比如版权,联系方式等.</td></tr><tr><td>article</td><td>放在一个独立,完整的区域,比如一篇新闻,一个帖子,一条评论,可以认为是更强调独立性区域性的section.</td></tr><tr><td>hgroup</td><td>用来放置一组连续的标题.</td></tr><tr><td><strong>section</strong></td><td>表示一组或者一节内容,或者就是一块区域.</td></tr><tr><td><strong>main</strong></td><td>表示页面的主体内容区域,一个页面只能有一个main</td></tr><tr><td>mark</td><td>高亮文本</td></tr><tr><td>figure&amp;figcaption</td><td>规定独立的流内容(一些图片,图标,代码等)&amp;标题</td></tr><tr><td>address</td><td>个人邮箱地址信息</td></tr><tr><td>progress</td><td>进度,max最大值,value当前进度</td></tr></tbody></table><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201025000435.png" alt="20201025000435"></p><h4 id="html5中新属性"><a href="#html5中新属性" class="headerlink" title="html5中新属性"></a>html5中新属性</h4><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>contenteditable</td><td>内容是否可编辑</td></tr><tr><td>data-*</td><td>嵌入自定义数据</td></tr><tr><td>draggable</td><td>内容是否可拖拽</td></tr><tr><td>hidden</td><td>隐藏元素</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-name</span>=<span class="string">"zhangsan"</span> <span class="attr">id</span>=<span class="string">"labelDiv"</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"editDiv"</span> <span class="attr">contenteditable</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid red; width: 150px;height: 50px;overflow: scroll;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">hidden</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> labelDiv = <span class="built_in">document</span>.getElementById(<span class="string">"labelDiv"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> editDiv = <span class="built_in">document</span>.getElementById(<span class="string">"editDiv"</span>)</span></span><br><span class="line">    editDiv.innerHTML = labelDiv.dataset.name</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="html5中表单新特性"><a href="#html5中表单新特性" class="headerlink" title="html5中表单新特性"></a>html5中表单新特性</h4><ul><li>datalist</li></ul><blockquote><p><code>datalist</code>标签规定了 <code>input</code>元素可能的选项列表。</p><p><code>datalist</code>标签被用来在为<code>input</code>元素提供”自动完成”的特性。用户能看到一个下拉列表，里边的选项是预先定义好的，将作为用户的输入数据。</p><p>请使用<code>input</code>元素的 list 属性来绑定<code>datalist</code>元素。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"keywords"</span> <span class="attr">list</span>=<span class="string">"keywordsList"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"keywordsList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"java"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"python"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"html"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="html5中表单-amp-输入框新属性"><a href="#html5中表单-amp-输入框新属性" class="headerlink" title="html5中表单&amp;输入框新属性"></a>html5中表单&amp;输入框新属性</h4><blockquote><p>除了添加一些input中验证的新属性,如</p><ul><li>required</li><li>pattern</li><li>placeholder</li></ul><p>还有input中一些新的type类型</p><ul><li>email : 邮箱</li><li>color : 取色器</li><li>date : 日期</li><li>range : 范围选择框 , 进度调节器</li><li>tel : 电话</li><li>time : 时间</li><li>week : 周</li><li>month : 月</li><li>url : url地址</li></ul></blockquote><h5 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h5><table><thead><tr><th>form属性</th><th>描述</th></tr></thead><tbody><tr><td>autocomplete</td><td>自动补全,默认开启 autocomplete = “on”</td></tr><tr><td>novalidate</td><td>不需要验证.</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">autocomplete</span>=<span class="string">"on"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">    用户名 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    邮箱 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h5><table><thead><tr><th>input属性</th><th>描述</th></tr></thead><tbody><tr><td>formmethod</td><td>提交方式</td></tr><tr><td>formenctype</td><td>提交内容类型</td></tr><tr><td>formaction</td><td>提交路径</td></tr><tr><td>formnovalidate</td><td>提交不需要验证</td></tr><tr><td>formtarget</td><td>打开方式 , “_self”,”_blank”</td></tr><tr><td>autofocus</td><td>自动聚焦</td></tr></tbody></table><h4 id="html5中DOM操作"><a href="#html5中DOM操作" class="headerlink" title="html5中DOM操作"></a>html5中DOM操作</h4><blockquote><p>和jquery一样</p></blockquote><ul><li>querySelector(‘选择器’) : 获取单个元素</li><li>querySelectorAll(‘选择器’) : 获取多个元素</li></ul><h4 id="classList"><a href="#classList" class="headerlink" title="classList"></a>classList</h4><blockquote><p>classList 属性返回元素的类名，作为 DOMTokenList 对象。</p><p>该属性用于在元素中添加，移除及切换 CSS 类。</p><p>classList 属性是只读的，但你可以使用 add() 和 remove() 方法修改它。</p></blockquote><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>add(<em>class1, class2, …</em>)</td><td>添加一个或者多个类名</td></tr><tr><td>boolean contains(<em>class</em>)</td><td>判断是否存在指定类名</td></tr><tr><td>remove(<em>class1, class2, …</em>)</td><td>移除一个或者多个类名</td></tr><tr><td>toggle(<em>class,</em>boolean flag)</td><td>切换类名,第二个值代表是否强制添加或移除</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.active</span>&#123;</span></span><br><span class="line">background-color: lightblue;</span><br><span class="line">color: brown;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"testDiv"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>演示DIV<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"toggleClass();"</span>&gt;</span>切换样式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">toggleClass</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> testDiv = <span class="built_in">document</span>.querySelector(<span class="string">'#testDiv'</span>);</span></span><br><span class="line"><span class="actionscript">testDiv.classList.toggle(<span class="string">"active"</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="data"><a href="#data" class="headerlink" title="data-*"></a>data-*</h4><blockquote><p>data-* 属性用于存储页面或应用程序的私有自定义数据。</p><p>data-* 属性赋予我们在所有 HTML 元素上嵌入自定义 data 属性的能力。</p><p>存储的（自定义）数据能够被页面的 JavaScript 中利用，以创建更好的用户体验（不进行 Ajax 调用或服务器端数据库查询）。</p><p>data-* 属性包括两部分：</p><ul><li>属性名不应该包含任何大写字母，并且在前缀 “data-“ 之后必须有至少一个字符</li><li>属性值可以是任意字符串</li><li>data-*后接入了多个字符串,调用时需去除-,并改为驼峰进行使用.</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>获取data属性的值<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-user-name</span>=<span class="string">"zhangsan"</span> <span class="attr">id</span>=<span class="string">"divEle"</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"getData"</span>&gt;</span>GetData<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>根据button中的data的值切换图片显示<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">data-img-url</span> = <span class="string">"img/1.jpg"</span>&gt;</span>显示图片1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">data-img-url</span> = <span class="string">"img/2.jpg"</span>&gt;</span>显示图片2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">data-img-url</span> = <span class="string">"img/3.jpg"</span>&gt;</span>显示图片3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"bgImg"</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">"暂时没有图片信息"</span> <span class="attr">width</span>=<span class="string">"50px"</span> <span class="attr">height</span>=<span class="string">"50px"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>设置data属性值<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"setDate"</span>&gt;</span>SetData<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"testDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//取出div中的data值显示到p标签中</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">'#getData'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">'#p1'</span>).innerHTML = <span class="built_in">document</span>.querySelector(<span class="string">'#divEle'</span>).dataset.userName;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">//获取所有按钮添加点击事件,并动态切换img图片</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelectorAll(<span class="string">'.btn'</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">x.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">'#bgImg'</span>).src = x.dataset.imgUrl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">//设置testDiv的属性值</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">'#setDate'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">'#testDiv'</span>).dataset.url = <span class="string">'http://www.baidu.com'</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h4><h5 id="File-介绍"><a href="#File-介绍" class="headerlink" title="File 介绍"></a>File 介绍</h5><blockquote><p>文件<strong><code>File</code></strong>接口提供有关文件的信息，并允许网页中的 JavaScript 访问其内容</p></blockquote><h5 id="File-构造"><a href="#File-构造" class="headerlink" title="File 构造"></a>File 构造</h5><blockquote><p>File() 返回一个文件对象.</p></blockquote><h5 id="File-属性"><a href="#File-属性" class="headerlink" title="File 属性"></a>File 属性</h5><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>File.lastModified</td><td>返回当前File对象的最后修改时间,返回类型为毫秒值</td></tr><tr><td>File.lastModifiedDate</td><td>返回当前File对象的最后修改时间,返回类型为<code>Date</code></td></tr><tr><td>File.name</td><td>File对象引用文件的名称</td></tr><tr><td>File.size</td><td>文件大小</td></tr><tr><td>File.type</td><td>MIME类型</td></tr><tr><td>File.webkitRelativePath</td><td>File相关的path或者URL</td></tr></tbody></table><h5 id="FileReader-介绍"><a href="#FileReader-介绍" class="headerlink" title="FileReader 介绍"></a>FileReader 介绍</h5><blockquote><p>对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 <code>File</code>或 <code>Blob</code> 对象指定要读取的文件或数据。 </p></blockquote><h5 id="FileReader-构造"><a href="#FileReader-构造" class="headerlink" title="FileReader 构造"></a>FileReader 构造</h5><blockquote><p>FileReader() 返回一个文件读取对象</p></blockquote><h5 id="FileReader-属性"><a href="#FileReader-属性" class="headerlink" title="FileReader 属性"></a>FileReader 属性</h5><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>FileReader.error</td><td>读取文件时发生的错误</td></tr><tr><td>FileReader.readyState</td><td>状态值, <code>0</code>:没有加载任何数据 <code>1</code>:数据正在加载 <code>2</code>:加载完成 ,对应的常量名 : <code>EMPTY</code>,<code>LOADING</code>,<code>DONE</code></td></tr><tr><td>FileReader.result</td><td>文件的内容.<strong>该属性必须在读取完成后才有效</strong></td></tr></tbody></table><h5 id="FileReader中的事件"><a href="#FileReader中的事件" class="headerlink" title="FileReader中的事件"></a>FileReader中的事件</h5><table><thead><tr><th>事件名</th><th>描述</th></tr></thead><tbody><tr><td>FileReader.onabort</td><td>读取操作被中断时触发</td></tr><tr><td>FileReader.onerror</td><td>读取操作发生错误时触发</td></tr><tr><td>FileReader.onload</td><td>读取操作完成时触发</td></tr><tr><td>FileReader.onloadstart</td><td>读取操作开始时触发</td></tr><tr><td>FileReader.onloadend</td><td>读取操作结束时（要么成功，要么失败）触发</td></tr><tr><td>FileReader.onprogress</td><td>在读取<code>Blob</code>时触发</td></tr></tbody></table><h5 id="FileReader中的方法"><a href="#FileReader中的方法" class="headerlink" title="FileReader中的方法"></a>FileReader中的方法</h5><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>FileReader.abort()</td><td>中止操作,返回时,readyState属性为<code>DONE</code></td></tr><tr><td>FileReader.readAsArrayBuffer()</td><td>开始读取,读取完成后,result属性中<code>ArrayBuffer</code>对象.</td></tr><tr><td>FileReader.readAsBinaryString)</td><td>开始读取,读取完成后,result属性中为原始二进制数据内容.</td></tr><tr><td>FileReader.readAsDataURL()</td><td>开始读取,读取完成后,result属性中为一个<code>data</code>:URL格式的Base64字符串以表示所读取文件的内容</td></tr><tr><td>FileReader.readAsText()</td><td>开始读取,读取完成后,result属性中为字符串文本内容</td></tr></tbody></table><h5 id="通过input中type为file来读取文件"><a href="#通过input中type为file来读取文件" class="headerlink" title="通过input中type为file来读取文件"></a>通过input中type为file来读取文件</h5><blockquote><p>步骤 : </p><ol><li>监听上传文件框的<code>onchange</code>事件</li><li>调用输入框中的<code>files</code>属性获取文件列表(<strong>可以通过multiple属性设置上传多个文件</strong>)</li><li>遍历文件<code>FileList</code>获取上传的文件列表</li><li>创建<code>FileReader</code>,调用<code>readAsText</code>方法读取文本内容</li><li>监听<code>FileReader</code>的<code>onload</code>事件,当文件读取完成,调用<code>result</code>属性读取文件内容</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    上传文件 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload"</span> <span class="attr">id</span>=<span class="string">"upload"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'#upload'</span>).onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(<span class="keyword">this</span>.files.length &gt; <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="keyword">this</span>.files.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> file = <span class="keyword">this</span>.files[i];</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line"><span class="actionscript">                fileReader.readAsText(file,<span class="string">'gbk'</span>);</span></span><br><span class="line"><span class="actionscript">                fileReader.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.result);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="通过拖拽来读取文件"><a href="#通过拖拽来读取文件" class="headerlink" title="通过拖拽来读取文件"></a>通过拖拽来读取文件</h5><blockquote><p>步骤 : </p><ol><li>监听div拖拽事件<code>ondragover</code>和<code>ondrop</code><ul><li>ondragover : 当有被拖拽的元素在监听的元素上时</li><li>ondrop : 当被拖拽的元素放下时</li></ul></li><li>在<code>function</code>中的<code>event</code>参数中获取<code>DataTransfer</code>对象</li><li>通过<code>DataTransfer</code>对象中的<code>files</code>属性获取文件列表</li><li>同上</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">style</span>=<span class="string">"width: 150px;height: 150px; border: 1px solid red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> contentDiv = <span class="built_in">document</span>.querySelector(<span class="string">'#content'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    contentDiv.ondragover = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        e.preventDefault();<span class="comment">//阻止默认行为</span></span></span><br><span class="line"><span class="actionscript">        e.stopPropagation();<span class="comment">//停止事件冒泡</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//设置拖动后的操作效果的字符串</span></span></span><br><span class="line">        /*</span><br><span class="line">         cpoy : 在新位置生成源项的副本</span><br><span class="line">         move : 将项目移动到新位置</span><br><span class="line">         link : 在新位置建立源项目的链接</span><br><span class="line">        */</span><br><span class="line"><span class="actionscript">        e.dataTransfer.dropEffect = <span class="string">'copy'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    contentDiv.ondrop = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//获取文件</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> fileList = e.dataTransfer.files;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//遍历</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; fileList.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> file = fileList[i];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line"><span class="actionscript">            fileReader.readAsText(file,<span class="string">'gbk'</span>);</span></span><br><span class="line"><span class="actionscript">            fileReader.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.result);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="网络状态"><a href="#网络状态" class="headerlink" title="网络状态"></a>网络状态</h4><blockquote><p>监听用户浏览器的网络状态 : <code>window.navigator.onLine</code></p></blockquote><h4 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h4><h5 id="geolocation-对象获取"><a href="#geolocation-对象获取" class="headerlink" title="geolocation 对象获取"></a>geolocation 对象获取</h5><blockquote><p>通过 <code>window.navigator.geolocation</code> 返回</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断浏览器是否支持定位</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.navigator.geolocation)&#123;</span><br><span class="line">    <span class="comment">//如果支持,通过getCurrentPosition()函数获取地理位置</span></span><br><span class="line">    navigator.geolocation.getCurrentPosition(success)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'不支持'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pos : 当前位置, coords : 当前坐标</span></span><br><span class="line"><span class="comment">latitude : 纬度</span></span><br><span class="line"><span class="comment">longitude : 经度</span></span><br><span class="line"><span class="comment">accuracy : 精度</span></span><br><span class="line"><span class="comment">speed : 速度 , 以 米/秒 计算</span></span><br><span class="line"><span class="comment">altitude : 海拔 , 以 米 计算</span></span><br><span class="line"><span class="comment">altitudeAccuracy : 海拔精度</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">pos</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    <span class="keyword">var</span> crd = pos.coords;</span><br><span class="line">    <span class="built_in">console</span>.log(crd.latitude);</span><br><span class="line">    <span class="built_in">console</span>.log(crd.longitude);</span><br><span class="line">    <span class="built_in">console</span>.log(crd.accuracy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="百度地图"><a href="#百度地图" class="headerlink" title="百度地图"></a>百度地图</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1.0, user-scalable=no"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span>, <span class="selector-tag">html</span>,<span class="selector-id">#allmap</span> &#123;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">overflow</span>: hidden;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">font-family</span>:<span class="string">"微软雅黑"</span>;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//api.map.baidu.com/api?v=2.0&amp;ak=bNF3YZLp4U3fe0tt8a8rZvoWYRWTtf0Y"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>浏览器定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"allmap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 百度地图API功能</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"allmap"</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> point = <span class="keyword">new</span> BMap.Point(<span class="number">116.331398</span>,<span class="number">39.897445</span>);</span></span><br><span class="line">map.centerAndZoom(point,12);</span><br><span class="line"><span class="actionscript">map.enableScrollWheelZoom(<span class="literal">true</span>); </span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> geolocation = <span class="keyword">new</span> BMap.Geolocation();</span></span><br><span class="line"><span class="actionscript">geolocation.getCurrentPosition(<span class="function"><span class="keyword">function</span><span class="params">(r)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span>(<span class="keyword">this</span>.getStatus() == BMAP_STATUS_SUCCESS)&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> mk = <span class="keyword">new</span> BMap.Marker(r.point);</span></span><br><span class="line">map.addOverlay(mk);</span><br><span class="line">map.panTo(r.point);</span><br><span class="line"><span class="actionscript">alert(<span class="string">'您的位置：'</span>+r.point.lng+<span class="string">','</span>+r.point.lat);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">'failed'</span>+<span class="keyword">this</span>.getStatus());</span></span><br><span class="line">&#125;        </span><br><span class="line"><span class="actionscript">&#125;,&#123;enableHighAccuracy: <span class="literal">true</span>&#125;)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h4><h5 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h5><blockquote><p>通过<code>window.localStorage</code>获取</p></blockquote><ul><li>存储的数据一直有效</li><li>多窗口共享</li><li>存储数据容量约为20M</li></ul><h5 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h5><blockquote><p>通过<code>window.sessionStorage</code>获取</p></blockquote><ul><li>关闭浏览器之前有效</li><li>同一窗口</li><li>存储数据容量约为5M</li></ul><h5 id="通用API"><a href="#通用API" class="headerlink" title="通用API"></a>通用API</h5><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>setItem(<em>key</em>,<em>value</em>)</td><td>存数据</td></tr><tr><td>getItem(<em>key</em>)</td><td>取数据</td></tr><tr><td>removeItem(<em>key</em>)</td><td>删除数据</td></tr><tr><td>clear()</td><td>清空数据</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">UserName : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">id</span>=<span class="string">"userName"</span>&gt;</span></span><br><span class="line">Password : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"login"</span> <span class="attr">id</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"logout"</span> <span class="attr">id</span>=<span class="string">"logout"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">showUserInfo();</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">'#login'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//获取用户名和密码</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> userName = <span class="built_in">document</span>.querySelector(<span class="string">'#userName'</span>).value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> password = <span class="built_in">document</span>.querySelector(<span class="string">'#password'</span>).value;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//封装成json对象并转成字符串</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> jsonString = <span class="built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line">userName:userName,</span><br><span class="line">password:password</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">//保存用户信息</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.localStorage.setItem(<span class="string">'userInfo'</span>,jsonString);</span></span><br><span class="line"><span class="actionscript"><span class="comment">//显示用户信息</span></span></span><br><span class="line">showUserInfo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">'#logout'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//清空用户数据</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.localStorage.clear();</span></span><br><span class="line">showUserInfo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">showUserInfo</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> userInfo = <span class="built_in">window</span>.localStorage.getItem(<span class="string">'userInfo'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> a_user = <span class="built_in">document</span>.querySelector(<span class="string">'#user'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> input_login = <span class="built_in">document</span>.querySelector(<span class="string">'#login'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(<span class="built_in">JSON</span>.parse(userInfo))&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//有用户信息</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'用户已登录'</span>);</span></span><br><span class="line"><span class="actionscript">a_user.style.display = <span class="string">'inline'</span>;</span></span><br><span class="line"><span class="javascript">a_user.innerHTML = <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(<span class="string">'userInfo'</span>)).userName;</span></span><br><span class="line"><span class="actionscript">input_login.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="actionscript">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//没有用户信息</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'用户未登陆'</span>);</span></span><br><span class="line"><span class="actionscript">a_user.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="actionscript">input_login.style.display = <span class="string">'inline'</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201024230008.png&quot; alt=&quot;20201024230008&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://fightlee.fun/categories/web/"/>
    
    
      <category term="html5" scheme="http://fightlee.fun/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>javaee-spring02</title>
    <link href="http://fightlee.fun/javaee-spring02.html"/>
    <id>http://fightlee.fun/javaee-spring02.html</id>
    <published>2020-10-22T03:44:39.000Z</published>
    <updated>2020-10-30T03:44:50.006Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030111805.png" alt="20201030111805"></p><a id="more"></a><h1 id="Javaee-Spring02"><a href="#Javaee-Spring02" class="headerlink" title="Javaee-Spring02"></a>Javaee-Spring02</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ul><li>在Idea中开始第一个Spring项目</li><li>依赖注入<ul><li>构造注入</li><li>setter注入</li></ul></li><li>自动装配</li><li>scope</li><li>parent&amp;depends-on</li><li>引用外部文件</li><li>@Component等注解</li><li>JavaConfig中的注解</li></ul><h2 id="在Java中使用Spring"><a href="#在Java中使用Spring" class="headerlink" title="在Java中使用Spring"></a>在Java中使用Spring</h2><blockquote><p>上篇文章主要阐述了为什么在Java中需要使用Spring,使用Spring涉及到的依赖倒置原则,和控制反转,依赖注入等原理.</p><p>这篇文章主要教大家如何在Java中使用和应用Spring来进行开发</p></blockquote><h3 id="使用Spring的几个步骤"><a href="#使用Spring的几个步骤" class="headerlink" title="使用Spring的几个步骤"></a>使用Spring的几个步骤</h3><ol><li>在pom.xml中添加Spring相关的依赖,没有maven的同学在项目中添加spring相关的Jar包即可.</li><li>创建spring的配置文件,使用spring的配置文件来管理在项目中使用到的对象.(IOC容器)</li><li>加载spring配置文件 , 获取spring的上下文对象.</li><li>通过ApplicationContext对象根据getBean()方法获取对象.</li></ol><p><strong>0 ) Student.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Integer id, String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1 ) 在pom.xml中导入相关依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2 ) 创建spring配置文件applicationContext.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3 ) 加载spring配置文件, 获取上下文对象,</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassPathXmlApplicationContext context = </span><br><span class="line">        <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationCotext.xml"</span>);</span><br></pre></td></tr></table></figure><p><strong>4 ) 通过ApplicationContext对象根据id获取IOC容器中的对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过id获取Bean对象</span></span><br><span class="line">Student stu = (Student) context.getBean(<span class="string">"student"</span>);</span><br><span class="line">System.out.println(stu);</span><br><span class="line"><span class="comment">//通过id和Bean的字节码文件获取Bean对象 , 好处不需要强转</span></span><br><span class="line">Student student = context.getBean(<span class="string">"student"</span>, Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出 : </span><br><span class="line">Student&#123;id=null, name='null', age=null&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><blockquote><p>从以上步骤中获取的Student对象是一个空对象,那么我们可以通过依赖注入的方式给Student对象的属性赋值.</p></blockquote><h4 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h4><blockquote><p>构造注入就是通过对象的构造函数来给属性赋值,有三种方式.</p></blockquote><h5 id="1-名称赋值-推荐"><a href="#1-名称赋值-推荐" class="headerlink" title="1 ) 名称赋值 (推荐)"></a>1 ) 名称赋值 (推荐)</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"12"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出 : </span><br><span class="line">Student&#123;id=1, name='zhangsan', age=12&#125;</span><br></pre></td></tr></table></figure><h5 id="2-下标赋值"><a href="#2-下标赋值" class="headerlink" title="2 ) 下标赋值"></a>2 ) 下标赋值</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"lisi"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出 : </span><br><span class="line">Student&#123;id=2, name='lisi', age=22&#125;</span><br></pre></td></tr></table></figure><h5 id="3-类型赋值"><a href="#3-类型赋值" class="headerlink" title="3 ) 类型赋值"></a>3 ) 类型赋值</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"lisi"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">value</span>=<span class="string">"33"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出 : </span><br><span class="line">Student&#123;id=3, name='lisi', age=33&#125;</span><br></pre></td></tr></table></figure><h5 id="4-ref属性"><a href="#4-ref属性" class="headerlink" title="4 ) ref属性"></a>4 ) ref属性</h5><p><strong>Student.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Grade grade;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Integer id, String name, Integer age, Grade grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Grade <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(Grade grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", grade="</span> + grade +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Grade.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer gradeId;</span><br><span class="line">    <span class="keyword">private</span> String gradeName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Grade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Grade</span><span class="params">(Integer gradeId, String gradeName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gradeId = gradeId;</span><br><span class="line">        <span class="keyword">this</span>.gradeName = gradeName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getGradeId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gradeId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGradeId</span><span class="params">(Integer gradeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gradeId = gradeId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGradeName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gradeName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGradeName</span><span class="params">(String gradeName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gradeName = gradeName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Grade&#123;"</span> +</span><br><span class="line">                <span class="string">"gradeId="</span> + gradeId +</span><br><span class="line">                <span class="string">", gradeName='"</span> + gradeName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用构造注入,注入Grade</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"grade"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Grade"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"gradeId"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"gradeName"</span> <span class="attr">value</span>=<span class="string">"一年级"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhaoliu"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"44"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"grade"</span> <span class="attr">ref</span>=<span class="string">"grade"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出 : </span><br><span class="line">Student&#123;id=4, name='zhaoliu', age=44, grade=Grade&#123;gradeId=1, gradeName='一年级'&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h4><blockquote><p>通过Bean中的set方法给属性注入值</p></blockquote><p><strong>Student.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Grade grade;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] booksArray = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; booksList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer,String&gt; booksMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; booksSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Grade <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(Grade grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getBooksArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> booksArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooksArray</span><span class="params">(String[] booksArray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.booksArray = booksArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getBooksList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> booksList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooksList</span><span class="params">(List&lt;String&gt; booksList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.booksList = booksList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Integer, String&gt; <span class="title">getBooksMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> booksMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooksMap</span><span class="params">(Map&lt;Integer, String&gt; booksMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.booksMap = booksMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getBooksSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> booksSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooksSet</span><span class="params">(Set&lt;String&gt; booksSet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.booksSet = booksSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">getProps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProps</span><span class="params">(Properties props)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.props = props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", grade="</span> + grade +</span><br><span class="line">                <span class="string">", address="</span> + address +</span><br><span class="line">                <span class="string">", booksArray="</span> + Arrays.toString(booksArray) +</span><br><span class="line">                <span class="string">", booksList="</span> + booksList +</span><br><span class="line">                <span class="string">", booksMap="</span> + booksMap +</span><br><span class="line">                <span class="string">", booksSet="</span> + booksSet +</span><br><span class="line">                <span class="string">", props="</span> + props +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="setter注入-重点"><a href="#setter注入-重点" class="headerlink" title="setter注入(重点)"></a>setter注入(重点)</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:utils</span>=<span class="string">"http://www.springframework.org/schema/util"</span> <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"grade"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Grade"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"gradeId"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"gradeName"</span> <span class="attr">value</span>=<span class="string">"一年级"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stu1"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--普通值注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--空字符串注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--空值注入--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="age" value=""&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引用类型注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"grade"</span> <span class="attr">ref</span>=<span class="string">"grade"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--内部Bean--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Address"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addrId"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addrName"</span> <span class="attr">value</span>=<span class="string">"长沙"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数组注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"booksArray"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java从入门到放弃<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Mysql从建库到删库到跑路<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Spring从春天到冬天<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--list集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"booksList"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Set集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"booksSet"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>母猪的产后护理<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>宠物心得<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>论家猫和主人的地位<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Map集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"booksMap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"语文"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"数学"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"3"</span> <span class="attr">value</span>=<span class="string">"英语"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Properties集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driverClassName"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"url"</span>&gt;</span>jdbc:mysql://localhost:3306/mydb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--p命名空间赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stu2"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span> <span class="attr">p:name</span>=<span class="string">"zhangsanfeng"</span> <span class="attr">p:age</span>=<span class="string">"82"</span> <span class="attr">p:id</span>=<span class="string">"9"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"booksList"</span> <span class="attr">ref</span>=<span class="string">"boosListUtils"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--c命名空间赋值 和p类似,p使用set注入,c使用构造注入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过名称赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address1"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Address"</span> <span class="attr">c:addrId</span>=<span class="string">"2"</span> <span class="attr">c:addrName</span>=<span class="string">"北京"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过下标赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address2"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Address"</span> <span class="attr">c:_0</span>=<span class="string">"3"</span> <span class="attr">c:_1</span>=<span class="string">"上海"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--util命名空间创建外部集合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">utils:list</span> <span class="attr">id</span>=<span class="string">"boosListUtils"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>十万个为什么<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">utils:list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><blockquote><p>给Bean在xml文件中注入属性属实麻烦,Spring给我们提供了其他几种方式来简化注入的操作.</p><ul><li>xml文件<ul><li>byName</li><li>byType</li><li>byConstructor</li></ul></li><li>注解<ul><li>@Autowired注解</li><li>@Resource注解</li></ul></li></ul></blockquote><p><strong>Customer.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line">    <span class="keyword">private</span> BuyCart cart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ByName"><a href="#ByName" class="headerlink" title="ByName"></a>ByName</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"order"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"orderId"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"orderName"</span> <span class="attr">value</span>=<span class="string">"00fefx"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cart"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.BuyCart"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proName"</span> <span class="attr">value</span>=<span class="string">"wahaha"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">byName : 根据名称来自动装配 属性的名称和对应的bean对象的id要一致</span></span><br><span class="line"><span class="comment">byType : 根据类型来自动装配 前提,确保当前配置文件中不会存在多个相同类型的bean对象</span></span><br><span class="line"><span class="comment">constructor : 根据构造器来自动装配(不推荐)</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Customer"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ByType"><a href="#ByType" class="headerlink" title="ByType"></a>ByType</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Customer"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Autowired注解注入-重点"><a href="#Autowired注解注入-重点" class="headerlink" title="@Autowired注解注入(重点)"></a>@Autowired注解注入(重点)</h4><blockquote><p>@Autowired 使用特点</p><ul><li>@Autowired注解为Spring中的注解,<strong>需要在spring配置文件中开启注解配置方可使用</strong>.</li><li>@Autowired注解优先使用byType注入</li><li>在容器中有多个相同类型bean时,如果此时有一个的bean id 和属性名称相等,则使用byName注入</li><li>如果又有多个相同类型bean,并且名称和属性不一致,则需要配合@Qualifier(value = “xxx”)注解一起使用</li><li>@Autowired注解中可以通过required属性配置此值能不能为null.</li></ul></blockquote><p><strong>一定要记住在xml文件中配置&lt;context:annotation-config /&gt;!!!</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  开启注解支持  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"order"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"orderId"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"orderName"</span> <span class="attr">value</span>=<span class="string">"00fefx"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cart"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.BuyCart"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proName"</span> <span class="attr">value</span>=<span class="string">"wahaha"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Customer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Customer.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//如果xml中的该类型的对象不唯一,且没有同名属性和id则需要配合@Qualifier(value="xxx")注解使用</span></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)<span class="comment">//通过required属性配置该值可不可以为null</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"order1"</span>)</span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BuyCart cart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resource注解-重点"><a href="#Resource注解-重点" class="headerlink" title="@Resource注解(重点)"></a>@Resource注解(重点)</h4><blockquote><p>@Resource使用特点 : </p><ul><li>为Java jdk中提供的注解.但仍需在配置文件中配置.</li><li>直接在注解参数中使用name来配置要注入的bean的id , @Resource(name = “xxx”)</li><li>@Resource优先使用byName的方式来装配,如果名称不匹配则使用byType.</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"order1"</span>)</span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"cart"</span>)</span><br><span class="line">    <span class="keyword">private</span> BuyCart cart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="scope-作用域"><a href="#scope-作用域" class="headerlink" title="scope(作用域)"></a>scope(作用域)</h3><blockquote><p>在bean标签中可以通过scope属性配置bean的初始化方式.</p><ul><li>singleton : 单例,在容器初始化时,对象就被创建了. <strong>为spring容器默认的初始化方式</strong></li><li>prototype : 原型,可以理解为普通对象创建(多个实例).在调用getBean()获取对象时,才创建对象.</li><li>request</li><li>session</li><li>application</li><li>websocket</li></ul></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stu1"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stu1"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Test.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ClassPathXmlApplicationContext context </span><br><span class="line">        = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="parent-amp-depends-on-继承-amp-依赖"><a href="#parent-amp-depends-on-继承-amp-依赖" class="headerlink" title="parent&amp;depends-on(继承&amp;依赖)"></a>parent&amp;depends-on(继承&amp;依赖)</h3><blockquote><p>使用<strong>parent</strong>属性和<strong>depends-on</strong>属性可以配置某些bean之间的关系</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 继承  parent属性</span></span><br><span class="line"><span class="comment"> 作用 : 一般用来配置一些模板类 , 父类一般使用abstract修饰</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"parentDog"</span> <span class="attr">class</span>=<span class="string">"com.java.spring.extend.Dog"</span> <span class="attr">abstract</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"旺财"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"com.java.spring.extend.Dog"</span> <span class="attr">parent</span>=<span class="string">"parentDog"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"公"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"weight"</span> <span class="attr">value</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 依赖 </span></span><br><span class="line"><span class="comment">depends-on属性</span></span><br><span class="line"><span class="comment">作用 : 当实例化的bean与bean之间并没有明显的相互依赖的关系,可以通过depends-on属性来决定bean初始化的顺序</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">bean : a</span></span><br><span class="line"><span class="comment">bean : b</span></span><br><span class="line"><span class="comment">要求 a 和 b 之间没有直接关系, 但是在实例化 b 之前 必须要先实例化 a.</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"settingsInit"</span> <span class="attr">class</span>=<span class="string">"com.java.spring.depends.SettingsInit"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testSystem"</span> <span class="attr">class</span>=<span class="string">"com.java.spring.depends.TestSystem"</span> <span class="attr">depends-on</span>=<span class="string">"settingsInit"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 程序中的一个设置类</span></span><br><span class="line"><span class="comment"> * 系统设置 : 比如说 系统更新的时间</span></span><br><span class="line"><span class="comment"> *  现在这个REFRESH_CYCLE这个参数比较死板,为了设计更为灵活,可以把参数设置到数据库中,</span></span><br><span class="line"><span class="comment"> *  每一次启动系统的时候,都去数据库中更新REFRESH_CYCLE中的值</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Settings</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> REFRESH_CYCLE = <span class="number">100</span>;<span class="comment">//s min day</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 对系统参数值进行一个数据库的更新</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SettingsInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SettingsInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"settingsInit初始化了"</span>);</span><br><span class="line"><span class="comment">//从数据库中加载值来对REFRESH_CYCLE进行更新</span></span><br><span class="line">Settings.REFRESH_CYCLE = <span class="number">2000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定时任务类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 线程 Runnable接口  </span></span><br><span class="line"><span class="comment"> * new Thread(new MyRunnable()&#123;</span></span><br><span class="line"><span class="comment"> * @Override</span></span><br><span class="line"><span class="comment">public void run() &#123;</span></span><br><span class="line"><span class="comment">System.out.println("程序更新了.....");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> * &#125;)</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"程序更新了....."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSystem</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 最初 Settings中有变量 a , 任务调用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 现在 Settings中有变量a , 经过 SettingsInit类来更新变量a的值, 任务调用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.定义一个定时任务</span></span><br><span class="line">Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">TimerTask task = <span class="keyword">new</span> UpdateTask();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.周期性的执行定时任务</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * scheduleAtFixedRate(timerTask,delay,period);</span></span><br><span class="line"><span class="comment"> * timerTask : 要执行的定时任务 , 一般是继承了TimerTask类的对象</span></span><br><span class="line"><span class="comment"> * delay : 延迟时间</span></span><br><span class="line"><span class="comment"> * period : 运行周期</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">timer.scheduleAtFixedRate(task, <span class="number">0</span>, Settings.REFRESH_CYCLE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="context-placeholder-引用外部文件"><a href="#context-placeholder-引用外部文件" class="headerlink" title="context:placeholder(引用外部文件)"></a>context:placeholder(引用外部文件)</h3><blockquote><p>使用该标签可以读取其他配置文件的信息,比如xx.properties文件.通过${key}的方式给bean的属性赋值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用外部文件扫描来给类中的属性注入值 </span></span><br><span class="line"><span class="comment">作用 : 在ssh中或者ssm中 用它给hibernate或者mybatis中的数据源需要的参数赋值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db_server.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcUtils"</span> <span class="attr">class</span>=<span class="string">"com.java.spring.placeholder.JDBCUtils"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;driverClassName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Componet注解的使用"><a href="#Componet注解的使用" class="headerlink" title="@Componet注解的使用"></a>@Componet注解的使用</h3><blockquote><p>在上面的案例中,我们介绍了可以将IOC容器中的bean对象通过@Autowired注解或者@Resource注解自动注入注解所引用的对象中.这里我们介绍@Componet注解以及其他注解的使用</p><ul><li><p>前提 : 必须在xml中加入 <strong>context:component-scan</strong> 标签 , 开启扫描</p></li><li><p>@Component : 将Java中的类注入到IOC容器中</p><ul><li>@Service : 适用于MVC架构中的Service层实现类使用,例 : StudentServiceImp,ProductServiceImp</li><li>@Repository : Dao层实现类使用 , 例 :  StudentDaoImp,ProductDaoImp..</li><li>@Controller : Controller层使用 ,UserController等.</li></ul></li><li><p>@Value : 给对象注入属性值 , 可以在属性上或者其对应的setter方法上使用</p></li></ul></blockquote><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><strong>Student.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"zhangsan"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString()...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student student = context.getBean(<span class="string">"student"</span>, Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出 : </span><br><span class="line">Student&#123;id=null, name='zhangsan', age=1&#125;</span><br></pre></td></tr></table></figure><p><strong>StudentService &amp; StudentDao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"studentDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStu</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"addStu 成功执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"studentService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"studentDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentDao</span><span class="params">(StudentDao studentDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentDao = studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        studentDao.addStu(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StudentService studentService = context.getBean(<span class="string">"studentService"</span>, StudentService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">studentService.addStudent(<span class="keyword">new</span> Student());</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出 : </span><br><span class="line">addStu 成功执行</span><br></pre></td></tr></table></figure><h3 id="使用JavaConfig来配置Spring"><a href="#使用JavaConfig来配置Spring" class="headerlink" title="使用JavaConfig来配置Spring"></a>使用JavaConfig来配置Spring</h3><blockquote><p>Spring提供了一些新的注解,可以使用Java类来替代xml文件</p></blockquote><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h4><blockquote><p>指定当前类为配置类</p></blockquote><h4 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h4><blockquote><p>将注解配置的方法的返回值存入IOC容器中,当没有指定@Bean的name值时,默使用方法名来获取该对象.</p></blockquote><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><blockquote><p>和xml中的component-scan标签作用一致</p></blockquote><h4 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h4><blockquote><p>和xml中bean的scope属性作用一致</p></blockquote><h4 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h4><blockquote><p>和xml中的import标签作用一致</p></blockquote><h4 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h4><blockquote><p>和xml中的property-placeholder标签作用一致</p></blockquote><h3 id="idea控制台不输出错误具体信息"><a href="#idea控制台不输出错误具体信息" class="headerlink" title="idea控制台不输出错误具体信息"></a>idea控制台不输出错误具体信息</h3><blockquote><p>pom.xml中添加插件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030111805.png&quot; alt=&quot;20201030111805&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="spring" scheme="http://fightlee.fun/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>javaweb篇-反射(三)</title>
    <link href="http://fightlee.fun/javaweb%E7%AF%87-reflection3.html"/>
    <id>http://fightlee.fun/javaweb%E7%AF%87-reflection3.html</id>
    <published>2020-10-20T16:52:11.000Z</published>
    <updated>2020-10-30T03:26:21.111Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png" alt="20201030112614"></p><a id="more"></a><h1 id="JavaWeb-反射-三"><a href="#JavaWeb-反射-三" class="headerlink" title="JavaWeb-反射(三)"></a>JavaWeb-反射(三)</h1><h2 id="Java内省机制"><a href="#Java内省机制" class="headerlink" title="Java内省机制"></a>Java内省机制</h2><blockquote><p>维基百科解释 :  在计算机科学中，内省是指计算机程序在运行时（Runtime）检查对象（Object）类型的一种能力，通常也可以称作“运行时类型检查”。一些编程语言如C++、Java、Ruby、PHP、Objective-C、Perl等等具有这种特性。</p><p>不应该将内省和反射混淆。相对于内省，反射更进一步，是指计算机程序在运行时（Runtime）可以访问、检测和修改它本身状态或行为的一种能力。</p></blockquote><blockquote><p>Java内省机制和反射其实差不多,反射是在运行状态中动态的对任意已知路径的字节码文件中的信息进行获取,比如属性,构造,注解,方法等.而内省主要针对Java项目中比较特殊的一种类,JavaBean类的信息的获取.</p><p>JavaBean是些什么类?这些类又有一些什么特征?</p><ul><li>在JavaBean中会提供一个默认的无参构造函数</li><li>需要被序列化所以应实现<strong>Serializable</strong>接口</li><li>应当有一系列的可读写的属性</li><li>与其中属性对应的<strong>getter</strong>/<strong>setter</strong>方法</li></ul><p>例如 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.smbms.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="内省机制中相关的类-接口"><a href="#内省机制中相关的类-接口" class="headerlink" title="内省机制中相关的类/接口"></a>内省机制中相关的类/接口</h2><blockquote><p>跟内省机制相关的类都存放在<strong>java.beans</strong>包中,主要有以下几个类/接口 : </p><ul><li>Introspector类</li><li>BeanInfo接口</li><li>PropertyDescriptor类</li></ul></blockquote><h3 id="Introspector类"><a href="#Introspector类" class="headerlink" title="Introspector类"></a>Introspector类</h3><blockquote><p>The Introspector class provides a standard way for tools to learn about the properties, events, and methods supported by a target Java Bean.</p><p>Introspector类提供了一种标准方法来了解目标javabean中的属性、事件和方法。</p></blockquote><table><thead><tr><th>方法</th><th align="center">描述</th></tr></thead><tbody><tr><td>static BeanInfo <strong>getBeanInfo</strong>(beanClass)</td><td align="center">获取beanClass,以及其父类的字节码文件的基本信息</td></tr><tr><td>static BeanInfo <strong>getBeanInfo</strong>(beanClass,stopClass)</td><td align="center">获取beanClass到stopClass截止的字节码文件的基本信息,包含beanClass不包含stopClass</td></tr></tbody></table><h3 id="BeanInfo接口"><a href="#BeanInfo接口" class="headerlink" title="BeanInfo接口"></a>BeanInfo接口</h3><blockquote><p>Use the <code>BeanInfo</code> interface to create a <code>BeanInfo</code> class and provide explicit information about the methods, properties, events, and other features of your beans. </p><p>使用BeanInfo接口创建BeanInfo类，并提供对应JavaBean中的方法、属性、事件和其他特征的明确信息。</p></blockquote><table><thead><tr><th align="left">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">PropertyDescriptor[] getPropertyDescriptors()</td><td align="center">获取属性描述器数组</td></tr></tbody></table><h3 id="PropertyDescriptor类"><a href="#PropertyDescriptor类" class="headerlink" title="PropertyDescriptor类"></a>PropertyDescriptor类</h3><blockquote><p>A PropertyDescriptor describes one property that a Java Bean exports via a pair of accessor methods.</p><p>一个PropertyDescriptor描述一个属性，一个javabean的出口通过一对访问方法</p></blockquote><table><thead><tr><th>方法</th><th align="center">描述</th></tr></thead><tbody><tr><td>Method getWriteMethod()</td><td align="center">获取这个属性可访问的setter方法</td></tr><tr><td>Method getReadMethod()</td><td align="center">获取这个属性可访问的getter方法</td></tr><tr><td>String getDisplayName() / String getName()</td><td align="center">获取这个属性的名称</td></tr><tr><td>Class&lt;?&gt; getPropertyType()</td><td align="center">获取这个属性的类型</td></tr></tbody></table><blockquote><p>总的归纳  : </p><ol><li>我们可以通过<code>Introspector</code>类中的<strong>getBeanInfo</strong>()方法来获取当前bean的基本信息<code>BeanInfo</code>对象</li><li>通过<code>BeanInfo</code>对象中的<strong>getPropertyDescriptors</strong>()方法来获取当前bean中的<strong>每个属性</strong>的描述器<code>PropertyDescriptor</code></li><li>通过<code>PropertyDescriptor</code>获取其属性所对应的<strong>getter</strong>/<strong>setter</strong>方法,来对属性进行赋值的操作.</li><li>尤其注意通过<strong>getBeanInfo(Class beanClass)</strong>不仅能获取这个<strong>beanClass</strong>中的信息还有其父类的信息.如果只需要获取当前这个<strong>beanClass</strong>中的信息,应当使用<strong>getBeanInfo(Class beanClass,Class stopClass)</strong>,stopClass为其父类的字节码文件.</li></ol></blockquote><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><h4 id="获取Student类中的所有属性以及其类型和其getter-setter方法"><a href="#获取Student类中的所有属性以及其类型和其getter-setter方法" class="headerlink" title="获取Student类中的所有属性以及其类型和其getter/setter方法"></a>获取Student类中的所有属性以及其类型和其getter/setter方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> IntrospectionException </span>&#123;</span><br><span class="line">    Class beanClass = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    BeanInfo beanInfo = Introspector.getBeanInfo(beanClass,beanClass.getSuperclass());</span><br><span class="line">    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">    <span class="comment">//输出Student.class中所有的属性及其类型</span></span><br><span class="line">    Arrays.asList(propertyDescriptors).forEach(x -&gt; System.out.println(x.getName() + <span class="string">" : "</span> + x.getPropertyType()));</span><br><span class="line">    <span class="comment">//输出Student.class中所有的属性对应的getter/setter方法</span></span><br><span class="line">    Arrays.asList(propertyDescriptors).forEach(x -&gt; &#123;</span><br><span class="line">        System.out.println(x.getReadMethod());</span><br><span class="line">        System.out.println(x.getWriteMethod());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出</strong>:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">email : class java.lang.String</span><br><span class="line">id : class java.lang.Integer</span><br><span class="line">name : class java.lang.String</span><br><span class="line"></span><br><span class="line">public java.lang.String com.java.refleciton.Student.getEmail()</span><br><span class="line">public void com.java.refleciton.Student.setEmail(java.lang.String)</span><br><span class="line">public java.lang.Integer com.java.refleciton.Student.getId()</span><br><span class="line">public void com.java.refleciton.Student.setId(java.lang.Integer)</span><br><span class="line">public java.lang.String com.java.refleciton.Student.getName()</span><br><span class="line">public void com.java.refleciton.Student.setName(java.lang.String)</span><br></pre></td></tr></table></figure><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><h4 id="1-使用Java内省机制将Student中的属性和其属性值存入到map中"><a href="#1-使用Java内省机制将Student中的属性和其属性值存入到map中" class="headerlink" title="1) 使用Java内省机制将Student中的属性和其属性值存入到map中"></a>1) 使用Java内省机制将Student中的属性和其属性值存入到map中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    student.setId(<span class="number">1</span>);</span><br><span class="line">    student.setName(<span class="string">"zhangsan"</span>);</span><br><span class="line">    student.setEmail(<span class="string">"zhangsan@qq.com"</span>);</span><br><span class="line">    Map&lt;String,Object&gt; map = bean2Map(student);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">bean2Map</span><span class="params">(Student stu)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前对象的字节码文件</span></span><br><span class="line">    Class&lt;? extends Student&gt; clazz = stu.getClass();</span><br><span class="line">    <span class="comment">//1.获取当前字节码文件的BeanInfo对象</span></span><br><span class="line">    BeanInfo beanInfo = Introspector.getBeanInfo(clazz,clazz.getSuperclass());</span><br><span class="line">    <span class="comment">//2.获取beanInfo中的所有属性的描述器</span></span><br><span class="line">    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">    <span class="comment">//3.遍历&amp;创建Map对象</span></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    Arrays.asList(propertyDescriptors).forEach(pd -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取属性的getter方法并调用得到属性的值</span></span><br><span class="line">            Method readMethod = pd.getReadMethod();</span><br><span class="line">            Object value = readMethod.invoke(stu);</span><br><span class="line">            <span class="comment">//获取属性的名称</span></span><br><span class="line">            String key = pd.getName();</span><br><span class="line">            <span class="comment">//map的key为 : 属性的名称, value为属性的值</span></span><br><span class="line">            map.put(key,value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-使用Java内省机制将map中的值保存到Student的属性中"><a href="#2-使用Java内省机制将map中的值保存到Student的属性中" class="headerlink" title="2)  使用Java内省机制将map中的值保存到Student的属性中"></a>2)  使用Java内省机制将map中的值保存到Student的属性中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"id"</span>, <span class="number">2</span>);</span><br><span class="line">    map.put(<span class="string">"name"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">    map.put(<span class="string">"email"</span>, <span class="string">"zhangsan@qq.com"</span>);</span><br><span class="line">    Student stu = map2Bean(Student<span class="class">.<span class="keyword">class</span>,<span class="title">map</span>)</span>;</span><br><span class="line">    System.out.println(stu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">map2Bean</span><span class="params">(Class&lt;T&gt; clazz, Map&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    T t = clazz.newInstance();</span><br><span class="line">    <span class="comment">//1.获取当前字节码文件的BeanInfo对象</span></span><br><span class="line">    BeanInfo beanInfo = Introspector.getBeanInfo(clazz, clazz.getSuperclass());</span><br><span class="line">    <span class="comment">//2.获取beanInfo中的所有属性的描述器</span></span><br><span class="line">    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">    <span class="comment">//3.遍历</span></span><br><span class="line">    Arrays.asList(propertyDescriptors).forEach(pd -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取每一个属性的setter方法</span></span><br><span class="line">            Method writeMethod = pd.getWriteMethod();</span><br><span class="line">            <span class="comment">//根据属性的名称获取值</span></span><br><span class="line">            Object value = map.get(pd.getName());</span><br><span class="line">            <span class="comment">//调用方法给t对象赋值</span></span><br><span class="line">            writeMethod.invoke(t, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-案例2-2的改造"><a href="#3-案例2-2的改造" class="headerlink" title="3) 案例2.2的改造"></a>3) 案例2.2的改造</h4><blockquote><p>思考 : 在Map转Bean的过程中,我们Map中的对应key/属性的值的类型是一致,如果不一致,在调用对应的setter方法赋值时传入的参数类型不匹配就会有异常的出现,我们可以针对一些常见的类型进行显示的判断,再赋值</p></blockquote><p><strong>修改后的map2Bean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"id"</span>, <span class="string">"2"</span>);</span><br><span class="line">    map.put(<span class="string">"name"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">    map.put(<span class="string">"email"</span>, <span class="string">"zhangsan@qq.com"</span>);</span><br><span class="line">    Student stu = map2Bean(Student<span class="class">.<span class="keyword">class</span>,<span class="title">map</span>)</span>;</span><br><span class="line">    System.out.println(stu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">map2Bean</span><span class="params">(Class&lt;T&gt; clazz, Map&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    T t = clazz.newInstance();</span><br><span class="line">    <span class="comment">//1.获取当前字节码文件的BeanInfo对象</span></span><br><span class="line">    BeanInfo beanInfo = Introspector.getBeanInfo(clazz, clazz.getSuperclass());</span><br><span class="line">    <span class="comment">//2.获取beanInfo中的所有属性的描述器</span></span><br><span class="line">    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">    <span class="comment">//3.遍历</span></span><br><span class="line">    Arrays.asList(propertyDescriptors).forEach(pd -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取每一个属性的setter方法</span></span><br><span class="line">            Method writeMethod = pd.getWriteMethod();</span><br><span class="line">            <span class="comment">//根据属性的名称获取值</span></span><br><span class="line">            Object value = map.get(pd.getName());</span><br><span class="line">            <span class="keyword">if</span>(value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//先获取属性的类型</span></span><br><span class="line">                Class&lt;?&gt; type = pd.getPropertyType();</span><br><span class="line">                <span class="comment">//判断属性是什么类型,再将value转换成对应类型</span></span><br><span class="line">                <span class="keyword">if</span>(type.isAssignableFrom(String<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="comment">//如果是字符串,转换成字符串赋值</span></span><br><span class="line">                    writeMethod.invoke(t, value.toString());</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.isAssignableFrom(<span class="keyword">int</span><span class="class">.<span class="keyword">class</span>) || <span class="title">type</span>.<span class="title">isAssignableFrom</span>(<span class="title">Integer</span>.<span class="title">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="comment">//如果是int或者Integer,则转换后赋值</span></span><br><span class="line">                    writeMethod.invoke(t, Integer.parseInt(value.toString()));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.isAssignableFrom(<span class="keyword">double</span><span class="class">.<span class="keyword">class</span>) || <span class="title">type</span>.<span class="title">isAssignableFrom</span>(<span class="title">Double</span>.<span class="title">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="comment">//如果是double或者Double,则转换后赋值</span></span><br><span class="line">                    writeMethod.invoke(t, Double.parseDouble(value.toString()));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.isAssignableFrom(<span class="keyword">boolean</span><span class="class">.<span class="keyword">class</span>) || <span class="title">type</span>.<span class="title">isAssignableFrom</span>(<span class="title">Boolean</span>.<span class="title">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="comment">//如果是Boolean或者boolean,则转换后赋值</span></span><br><span class="line">                    writeMethod.invoke(t, Boolean.parseBoolean(value.toString()));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.isAssignableFrom(Date<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="comment">//如果是Date类型,则转换后赋值</span></span><br><span class="line">                    Date date = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).parse(value.toString());</span><br><span class="line">                    writeMethod.invoke(t,date);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里特地在map中的id处,将int的值修改成String,运行后没有问题.</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>通过Introspector获取BeanInfo对象</li><li>通过BeanInfo获取Bean中所有属性的属性描述器PropertyDescriptor[]</li><li>遍历PropertyDescriptor数组,通过PropertyDescriptor对象获取属性的getter/setter方法,或者属性的类型和名称.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png&quot; alt=&quot;20201030112614&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="反射" scheme="http://fightlee.fun/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>java基础增强篇01</title>
    <link href="http://fightlee.fun/java%E5%9F%BA%E7%A1%80%E5%A2%9E%E5%BC%BA%E7%AF%8701.html"/>
    <id>http://fightlee.fun/java%E5%9F%BA%E7%A1%80%E5%A2%9E%E5%BC%BA%E7%AF%8701.html</id>
    <published>2020-10-17T02:02:55.000Z</published>
    <updated>2020-10-30T03:26:17.786Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png" alt="20201030112614"></p><a id="more"></a><h1 id="Java基础增强"><a href="#Java基础增强" class="headerlink" title="Java基础增强"></a>Java基础增强</h1><h2 id="前文概述"><a href="#前文概述" class="headerlink" title="前文概述"></a>前文概述</h2><blockquote><p>本文主要针对于Java8的新特性进行部分讲解,在大部分大学和一些机构的教学过程中发现Java8的新特性很少有老师提起,但是现阶段的实际开发中Java8的新特性是必不可少的一部分,尤其是本文要提到的<strong>Lambda表达式</strong>以及<strong>函数式接口</strong>和一些其他内容.</p></blockquote><h2 id="内容概览"><a href="#内容概览" class="headerlink" title="内容概览"></a>内容概览</h2><ol><li>函数式接口&amp;Lambda表达式</li><li>default关键字</li><li>Stream流</li><li>Optional</li></ol><h2 id="1-函数式接口-amp-Lambda表达式"><a href="#1-函数式接口-amp-Lambda表达式" class="headerlink" title="1) 函数式接口 &amp; Lambda表达式"></a>1) 函数式接口 &amp; Lambda表达式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p><strong>函数式接口</strong> : 在Java8中,一个接口中只有一个需要被实现的方法,我们就可以认为其是一个函数式接口 . 比如一些常见的 线程中的 <strong>Runnable</strong> , 比较排序使用的<strong>Comparator</strong> 等接口.</p><p>当我们在自定义函数式接口时,为了避免自己或者其他人以后在此接口中加上其他接口方法,导致此接口变为<strong>非函数式接口</strong>,我们可以在此接口上加上<strong>@FunctionalInterface</strong>注解,加上后如果再向此接口中添加新的接口函数,编译会出错.</p><p><strong>Runnable接口的定义</strong> : </p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201017135620.png" alt="20201017135620"></p><p><strong>Comparator接口的定义</strong> : </p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201017135635.png" alt="20201017135635"></p><p>Java8之前,我们经常对Runnable或者Comparator这种单方法实现的接口使用匿名内部类的形式来使用,这种使用方式相对而言比较繁琐,从Java8之后,我们可以使用Lambda表达式来对这些操作进行简化.</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用匿名内部类的形式创建Runnable</span></span><br><span class="line">    Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"线程要执行的任务"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//使用Lambda表达式创建Runnable</span></span><br><span class="line">    Runnable r1 = () -&gt; System.out.println(<span class="string">"线程要执行的任务"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda表达式的演化过程"><a href="#Lambda表达式的演化过程" class="headerlink" title="Lambda表达式的演化过程"></a>Lambda表达式的演化过程</h3><blockquote><p> 我们可以从JavaScript中的声明式函数来推演出Java中的函数式接口的Lambda语法,JavaScript同理.</p></blockquote><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201017150802.png" alt="20201017150802"></p><h3 id="Lambda表达式的使用方式"><a href="#Lambda表达式的使用方式" class="headerlink" title="Lambda表达式的使用方式"></a>Lambda表达式的使用方式</h3><blockquote><p>Lambda表达式的使用方式主要从这几点考虑,接口的实现方法有没有形参?形参有几个?方法体中有几行代码?有没有返回值?不需要考虑返回值类型和参数类型</p><ul><li><p>只有1个或者没有形参,没有返回值,方法体中只有1行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//没有形参</span></span><br><span class="line">Runnable r1 = () -&gt; System.out.println(<span class="string">"线程要执行的任务"</span>);</span><br><span class="line"><span class="comment">//只有1个形参,小括号可以省略</span></span><br><span class="line">TestInterface ti = x -&gt; System.out.println(x);</span><br></pre></td></tr></table></figure></li><li><p>有多个形参,有返回值,方法体中有多行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TestInterface ti = (x,y) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>有返回值,方法提中只有一个return的话可以省略return.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TestInterface ti = (x,y) -&gt; x + y;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h3><p><strong>现有若干个Student(int age , String name)保存在集合中,使用Collections对集合Student进行排序</strong></p><p><strong>案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Student stu1 = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>, <span class="number">12</span>);</span><br><span class="line">    Student stu2 = <span class="keyword">new</span> Student(<span class="string">"lisi"</span>, <span class="number">13</span>);</span><br><span class="line">    Student stu3 = <span class="keyword">new</span> Student(<span class="string">"wangwu"</span>, <span class="number">14</span>);</span><br><span class="line">    Student stu4 = <span class="keyword">new</span> Student(<span class="string">"wangba"</span>, <span class="number">14</span>);</span><br><span class="line">    List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(stu1);</span><br><span class="line">    list.add(stu2);</span><br><span class="line">    list.add(stu3);</span><br><span class="line">    list.add(stu4);</span><br><span class="line">    <span class="comment">//使用匿名内部类</span></span><br><span class="line">    Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = o1.getAge() - o2.getAge();</span><br><span class="line">            <span class="keyword">return</span> temp == <span class="number">0</span> ? o1.getName().compareTo(o2.getName()) : temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用lambda表达式</span></span><br><span class="line">Collections.sort(list,(o1,o2) -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> temp = o1.getAge() - o2.getAge();</span><br><span class="line">    <span class="keyword">return</span> temp == <span class="number">0</span> ? o1.getName().compareTo(o2.getName()) : temp;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Java8的函数式接口"><a href="#Java8的函数式接口" class="headerlink" title="Java8的函数式接口"></a>Java8的函数式接口</h3><blockquote><p>在lambda的表达式的实际使用中,我们不可能仅仅只对Java中的Comparator或者Runnable等现有函数式接口进行简化操作,我们还需要操作一些自定义的函数式接口,但是每一次使用时我们完成某一个逻辑实现时都需要自己定义一个函数式接口来操作,未免显得不太方便,如以下</p><p><strong>自定义函数式接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TestFunctionInterface</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果要使用的方法需要传参</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TestFunctionInterface</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果有返回值....等等</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>所以Java8中给我们提供了大量的函数式接口给我们在各种场景配合使用.</strong></p><table><thead><tr><th>序号</th><th>接口</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><strong>Consumer&lt; T &gt;</strong></td><td>代表了接受一个输入参数并且无返回的操作</td></tr><tr><td>2</td><td><strong>Predicate&lt; T &gt;</strong></td><td>接受一个输入参数，返回一个布尔值结果。</td></tr><tr><td>3</td><td><strong>Function&lt; T, R &gt;</strong></td><td>接受一个输入参数，返回一个结果。</td></tr><tr><td>4</td><td><strong>Supplier&lt; T &gt;</strong></td><td>无参数，返回一个结果。</td></tr></tbody></table><p>…剩下还有39个,我们先讲这4个.</p><h4 id="Consumer-lt-T-gt"><a href="#Consumer-lt-T-gt" class="headerlink" title="Consumer&lt; T &gt;"></a>Consumer&lt; T &gt;</h4><blockquote><p>Consumer : 消费者,顾客 . 代表了接受一个输入参数并且无返回的操作.</p><p>接口定义 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> Consumer&lt;T&gt; <span class="title">andThen</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; after)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里接口中还有方法体是不是很神奇?这个和default这个关键字我们放到后面讲解.</p><p>使用场景 : 当我们需要使用Lambda表达式来操作一个传入一个参数但不需要返回值的方法,这里一般使用在forEach中对集合内部迭代对传入的参数做一些操作.后面会介绍.</p></blockquote><p><strong>使用小案例</strong> : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Consumer&lt;Integer&gt; consumer = x -&gt; &#123;</span><br><span class="line">        x = x + <span class="number">10</span>;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer.accept(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Predicate-lt-T-gt"><a href="#Predicate-lt-T-gt" class="headerlink" title="Predicate&lt; T &gt;"></a>Predicate&lt; T &gt;</h4><blockquote><p>Predicate :  表明,阐明,断言,判断 . 接受一个输入参数，返回一个布尔值结果.</p><p>接口定义 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">and</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; !test(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">or</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">isEqual</span><span class="params">(Object targetRef)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">null</span> == targetRef)</span><br><span class="line">                ? Objects::isNull</span><br><span class="line">                : object -&gt; targetRef.equals(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用场景 : 当我们需要使用Lambda表达式来操作一个传入一个参数但需要返回布尔类型值的方法.</p></blockquote><p><strong>使用小案例</strong> : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Predicate&lt;Integer&gt; predicate = x -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(predicate.test(<span class="number">30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用Predicate来完成一些判断的功能</strong></p><p>1.判断传入的字符串的长度是不是大于5?</p><p>2.判断传入的数值是不是偶数?</p><p>3.判断传入的字符串是不是包含‘@’符号?</p><p><strong>传统做法</strong> : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">testStringLength</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.length() &gt; <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">testValueisEven</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.parseInt(value) % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">testValueisContains</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.contains(<span class="string">"@"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(testStringLength(<span class="string">"asd"</span>));;</span><br><span class="line">    System.out.println(testValueisEven(<span class="string">"122"</span>));;</span><br><span class="line">    System.out.println(testValueisContains(<span class="string">"asd"</span>));;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用Lambda表达式</strong> : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">testMethod</span><span class="params">(String value,Predicate&lt;String&gt; predicate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> predicate.test(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(testMethod(<span class="string">"asd"</span>,value -&gt; value.length() &gt; <span class="number">5</span>));</span><br><span class="line">    System.out.println(testMethod(<span class="string">"122"</span>,value -&gt; Integer.parseInt(value) % <span class="number">2</span> == <span class="number">0</span>));</span><br><span class="line">    System.out.println(testMethod(<span class="string">"asd@"</span>,value -&gt; value.contains(<span class="string">"@"</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Function-lt-T-R-gt"><a href="#Function-lt-T-R-gt" class="headerlink" title="Function&lt; T, R &gt;"></a>Function&lt; T, R &gt;</h4><blockquote><p>Function : 这个顾名思义 函数 , 接受一个输入参数，返回一个结果.</p><p>接口定义 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;V, R&gt; <span class="title">compose</span><span class="params">(Function&lt;? <span class="keyword">super</span> V, ? extends T&gt; before)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(before);</span><br><span class="line">        <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;T, V&gt; <span class="title">andThen</span><span class="params">(Function&lt;? <span class="keyword">super</span> R, ? extends V&gt; after)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Function&lt;T, T&gt; <span class="title">identity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用场景 : 当我们需要使用Lambda表达式来操作一个传入一个参数但需要返回一个特定类型值的方法.</p></blockquote><p><strong>使用小案例</strong> : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Function&lt;String, String[]&gt; function = value -&gt; value.split(<span class="string">"-"</span>);</span><br><span class="line">    System.out.println(Arrays.asList(function.apply(<span class="string">"123-456-789"</span>)));;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用Function来完成一些字符串处理的操作</strong></p><p>1.将传入的字符串首字母大写然后在字符串前加上”set”返回</p><p>2.将传入的字符串从 “:” 切割后再去除两端空格返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMethod1</span><span class="params">(String value,Function&lt;String, String&gt; function)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> function.apply(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.将传入的字符串首字母大写然后在字符串前加上"set"返回</span></span><br><span class="line">    System.out.println(testMethod1(<span class="string">"age"</span>,value -&gt; &#123;</span><br><span class="line">        <span class="keyword">char</span>[] charArray = value.toCharArray();</span><br><span class="line">        charArray[<span class="number">0</span>] = (<span class="keyword">char</span>) (charArray[<span class="number">0</span>] - <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"set"</span> + <span class="keyword">new</span> String(charArray);</span><br><span class="line">    &#125;));</span><br><span class="line">    </span><br><span class="line"><span class="comment">//2.将传入的字符串从 ":" 切割后再去除两端空格返回</span></span><br><span class="line">    System.out.println(testMethod1(<span class="string">"redirect:login.jsp"</span>, value -&gt; &#123;</span><br><span class="line">        <span class="keyword">int</span> index = value.indexOf(<span class="string">":"</span>);</span><br><span class="line">        <span class="keyword">return</span> value.substring(index + <span class="number">1</span>);</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Supplier-lt-T-gt"><a href="#Supplier-lt-T-gt" class="headerlink" title="Supplier&lt; T &gt;"></a>Supplier&lt; T &gt;</h4><blockquote><p>Supplier :  供应者; 供货商; 供货方; 无参数,返回一个结果。</p><p>接口定义  : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用场景 :  当我们需要使用Lambda表达式来操作不需要传入参数但能返回一个特定类型值的方法.</p></blockquote><p><strong>使用小案例</strong> : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Supplier&lt;Double&gt; supplier = () -&gt; Math.PI; </span><br><span class="line">    System.out.println(supplier.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用Supplier来完成获取一些值的操作</strong></p><p>1.获取一个UUID随机字符串值,只获取最后一个 “-“ 后的字符串.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test09</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(testMethod2(() -&gt; &#123;</span><br><span class="line">        String uuidStr = UUID.randomUUID().toString();</span><br><span class="line">        <span class="keyword">return</span> uuidStr.substring(uuidStr.lastIndexOf(<span class="string">"-"</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;));</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMethod2</span><span class="params">(Supplier&lt;String&gt; supplier)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> supplier.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后再来提几个</p><h4 id="BiConsumer-lt-T-R-gt"><a href="#BiConsumer-lt-T-R-gt" class="headerlink" title="BiConsumer&lt;T,R&gt;"></a>BiConsumer&lt;T,R&gt;</h4><blockquote><p>和<strong>Consumer</strong>类似,唯一不同就是 Consumer 传入一个参数,BiConsumer传入2个参数</p><p>使用场景 : 迭代Map</p></blockquote><p><strong>这里补充一下Consumer的迭代操作</strong></p><p>1.使用Consumer迭代List集合</p><p>2.使用BiConsumer迭代Map集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">"aaa"</span>);</span><br><span class="line">    list.add(<span class="string">"bbb"</span>);</span><br><span class="line">    list.add(<span class="string">"ccc"</span>);</span><br><span class="line">    list.add(<span class="string">"ddd"</span>);</span><br><span class="line">    list.forEach(x -&gt; System.out.print(x + <span class="string">" "</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(<span class="string">"----------"</span>);</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"username"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">    map.put(<span class="string">"password"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    map.put(<span class="string">"gender"</span>, <span class="string">"male"</span>);</span><br><span class="line">    map.put(<span class="string">"email"</span>, <span class="string">"zhangsan@qq.com"</span>);</span><br><span class="line">    map.forEach((key,value) -&gt; System.out.println(key + <span class="string">" : "</span> + value));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aaa bbb ccc ddd </span><br><span class="line">----------</span><br><span class="line">password : 123456</span><br><span class="line">gender : male</span><br><span class="line">email : zhangsan@qq.com</span><br><span class="line">username : zhangsan</span><br></pre></td></tr></table></figure><p><strong>从这里可以看出使用Lambda表达式迭代集合不要太爽好不好?</strong></p><h4 id="UnaryOperator-lt-T-gt"><a href="#UnaryOperator-lt-T-gt" class="headerlink" title="UnaryOperator&lt; T &gt;"></a>UnaryOperator&lt; T &gt;</h4><blockquote><p>此接口继承了<strong>Function</strong>接口 , 与其不同的就是,Function是传入一个T类型,返回R类型.而UnaryOperator则是传入T类型返回T类型</p></blockquote><p><strong>案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test11</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(testMethod3(<span class="number">100</span>,x -&gt; x * <span class="number">2</span>));</span><br><span class="line">    System.out.println(testMethod3(<span class="number">100</span>,x -&gt; x + <span class="number">1</span>));</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">testMethod3</span><span class="params">(Integer value,UnaryOperator&lt;Integer&gt; unaryOperator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unaryOperator.apply(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>剩下还有很多函数式接口不一一列举,可以自行在表格中查看用法</strong></p><table><thead><tr><th>接口</th><th align="center">描述</th></tr></thead><tbody><tr><td>ToDoubleBiFunction&amp;ToIntBiFunction&amp;ToLongBiFunction</td><td align="center">接收2个输入参数,返回double,int,long类型结果</td></tr><tr><td>ToDoubleFunction&amp;ToIntFunction&amp;ToLongFunction</td><td align="center">接受1个输入参数,返回double,int,long类型结果</td></tr><tr><td>ObjDoubleConsumer&amp;ObjIntConsumer&amp;ObjLongConsumer</td><td align="center">接受1个object类型和一个doube,int,long的输入参数，无返回值。</td></tr><tr><td>BiFunction&lt;T,U,R&gt;</td><td align="center">代表了一个接受两个输入参数的方法，并且返回一个结果</td></tr><tr><td>BinaryOperator&lt; T &gt;</td><td align="center">代表了一个作用于于两个同类型操作符的操作，并且返回了操作符同类型的结果</td></tr><tr><td>BiPredicate&lt;T,U&gt;</td><td align="center">代表了一个两个参数的boolean值方法</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>带Bi的就多一个参数.</li><li>带Function接收一个输入参数,返回一个特定类型.</li><li>带Consumer接收一个输入参数,无返回值.</li><li>带Predicate接收一个输入参数,返回boolean类型值.</li><li>带Supplier无输入参数,返回一个特定类型.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png&quot; alt=&quot;20201030112614&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="java8新特性" scheme="http://fightlee.fun/tags/java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>javaee-spring01</title>
    <link href="http://fightlee.fun/javaee-spring01.html"/>
    <id>http://fightlee.fun/javaee-spring01.html</id>
    <published>2020-10-17T01:18:00.000Z</published>
    <updated>2020-10-30T03:42:23.300Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030111805.png" alt="20201030111805"></p><a id="more"></a><h1 id="Javaee-Spring01"><a href="#Javaee-Spring01" class="headerlink" title="Javaee-Spring01"></a>Javaee-Spring01</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ul><li>What is Spring FrameWork?</li><li>Why We Need Spring ?</li><li><strong>DIP</strong>, <strong>IOC</strong> and <strong>DI</strong></li></ul><h2 id="概念阐述"><a href="#概念阐述" class="headerlink" title="概念阐述"></a>概念阐述</h2><h3 id="什么是Spring框架"><a href="#什么是Spring框架" class="headerlink" title="什么是Spring框架?"></a>什么是Spring框架?</h3><blockquote><p>来自维基百科的解释 : <strong>Spring框架</strong>是Java平台的一个开源的全栈(Full-stack)应用程序框架和控制反转容器实现,一般被直接称为 Spring,是针对bean的生命周期进行管理的轻量级容器(lightweight container).</p><p>那么简单来说 : <strong>Spring就是一个管理bean的容器,作为控制反转的容器实现</strong></p></blockquote><h3 id="为什么要使用Spring-Spring解决了什么问题"><a href="#为什么要使用Spring-Spring解决了什么问题" class="headerlink" title="为什么要使用Spring?Spring解决了什么问题?"></a>为什么要使用Spring?Spring解决了什么问题?</h3><blockquote><p>在解释为什么要使用Spring之前,我们不妨先来了解一种设计模式原则 : <strong>依赖倒置原则(Dependency Inversion Principle)</strong>.</p><p>那什么是<strong>依赖倒置原则</strong>呢?该原则包含如下2个原则 : </p><ul><li>上层模块不应该依赖底层模块，两者都应依赖于抽象</li><li>抽象不应该依赖细节,细节应该依赖抽象</li></ul><p>厚礼蟹!听起来有点厉害的样子,那么在Java中我们如何来描述这些含义呢?</p><p><strong>上层和底层</strong> : </p><p>无论哪一个实现逻辑下都是由表现层(上层)到底层,比如我们已经学过的JavaWeb的小案例中,在传统的MVC架构模式里,上层我们可以认为是Controller层,也就是我们的Servlet,在Servlet我们获取客户端中用户的输入对数据进行处理,通常我们处理的方式都是调用下层的代码来对该业务进行实现.比如在Servlet中调用Service层的实现,而在Service层中调用Dao层的实现.</p><p><strong>细节和抽象</strong> : </p><p>在Java中抽象代表抽象类或者接口,那么细节就代表抽象类或者接口对应的实现类,那么对应第二个含义的解释就为,抽象类和接口不应该依赖于其实现类,而实现类应该依赖其接口或抽象类.</p><p><strong>依赖倒置原则的中心思想为 : 面向接口编程</strong></p><p>瓦特法克?面向对象已经够难了?那么什么是面向接口呢?我们通过一个小案例来进行阐述.</p></blockquote><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>三年二班有位小周同学沉迷于电脑游戏,最近迷上了一款网游,于是迫不及待的登录游戏,创建角色开始游戏.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*网络游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetGame</span></span>&#123;</span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"单机游戏开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//玩网络游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(NetGame game)</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">xiaoZhou.playGame(<span class="keyword">new</span> NetGame());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小周经过同学的介绍又迷上了另一款单机游戏,于是又连忙找到资源down下来开始玩耍,从此从早到晚玩的不亦乐乎.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*单机游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleGame</span></span>&#123;</span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"单机游戏开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*网络游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetGame</span></span>&#123;</span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"网络游戏开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//玩网络游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(NetGame game)</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//玩单机游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(SingleGame game)</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">xiaoZhou.playGame(<span class="keyword">new</span> NetGame());</span><br><span class="line">xiaoZhou.playGame(<span class="keyword">new</span> SingleGame());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好家伙,每当小周同学找到一款新类型的游戏,我们的程序将会越来越臃肿,那么问题在哪呢?我们看人物类Person是一个上层模块,并且是一个细节实现类,而Person类中的代码实现又依赖于NetGame&amp;SingleGame2个细节实现类,因此导致小周同学每一次开始玩新类型游戏都需要修改上层模块Person类的代码.很明显这有悖于我们上文提到的依赖倒置的原则.那么如何去修改呢?</p><h5 id="细节转抽象"><a href="#细节转抽象" class="headerlink" title="细节转抽象"></a>细节转抽象</h5><p>我们发现在NetGame和SingleGame中都具备开始游戏(startGame)的功能,那么我们可以将该功能抽取至接口IGame中,让NetGame和SingleGame实现该接口,在Person中的playGame方法中修改参数类型为该接口类型.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*游戏接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*单机游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleGame</span> <span class="keyword">implements</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"单机游戏开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*网络游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetGame</span> <span class="keyword">implements</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"网络游戏开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//玩游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(IGame game)</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">xiaoZhou.playGame(<span class="keyword">new</span> NetGame());</span><br><span class="line">xiaoZhou.playGame(<span class="keyword">new</span> SingleGame());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过细节转抽象后,即时小周同学下次再发现了新游戏,我们上层模块(Person类)也不再需要修改.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*游戏接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*手机游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MobileGame</span> <span class="keyword">implements</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"手机游戏开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*单机游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleGame</span> <span class="keyword">implements</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"单机游戏开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*网络游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetGame</span> <span class="keyword">implements</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"网络游戏开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//玩游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(IGame game)</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">xiaoZhou.playGame(<span class="keyword">new</span> NetGame());</span><br><span class="line">xiaoZhou.playGame(<span class="keyword">new</span> SingleGame());</span><br><span class="line">xiaoZhou.playGame(<span class="keyword">new</span> MobileGame());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在依赖倒置原则中,依赖关系的传递有三种方式 : </p><ul><li>通过接口传递关系(就如上面的例子)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(IGame game)</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">    xiaoZhou.playGame(<span class="keyword">new</span> NetGame());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过构造函数传递关系</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> IGame game;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(IGame game)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.game = game; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person xiaoZhou = <span class="keyword">new</span> Person(<span class="keyword">new</span> NetGame());</span><br><span class="line">    xiaoZhou.playGame();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过Setter方法传递关系</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> IGame game;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGame</span><span class="params">(IGame game)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.game = game;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">    xiaoZhou.setGame(<span class="keyword">new</span> NetGame());</span><br><span class="line">    xiaoZhou.playGame();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="上层不依赖底层"><a href="#上层不依赖底层" class="headerlink" title="上层不依赖底层"></a>上层不依赖底层</h5><p>解决了细节转抽象后,那么依赖倒置呢?我们继续修改代码.</p><p>小周同学接触了网络游戏后,创建游戏角色,然后操作游戏角色拿起武器攻击怪物,怪物的掉血量根据武器的攻击来决定.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*武器类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weapon</span></span>&#123;</span><br><span class="line"><span class="comment">//武器攻击</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ad = <span class="number">30</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"怪物掉"</span> + ad + <span class="string">"滴血!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*英雄类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Weapon weapon;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span> </span>&#123;</span><br><span class="line">weapon = <span class="keyword">new</span> Weapon();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">weapon.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*网络游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetGame</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Hero hero;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NetGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">hero = <span class="keyword">new</span> Hero();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">hero.attack();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> NetGame game;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">game = <span class="keyword">new</span> NetGame();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//玩游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*测试类*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">xiaoZhou.playGame();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上面的代码我用图片来给大家解释</strong></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201019021441.png" alt="20201019021441"></p><p>这类型的代码结构就是典型的上层依赖下层,那么这种结构有什么问题呢?假设我们将Weapon类修改一下,由原先的默认ad = 30攻击,改为通过构造函数的形式传入具体的攻击力.</p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201019023211.png" alt="20201019023211"></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201019023348.png" alt="20201019023348"></p><p>从上图可以看出,当仅仅修改了底层Weapon类的结构时,上层的每一层的构造函数都需要重新编写,这种设计在后期维护中简直就是灾难.如果在实际开发中,这样的类结构可能是成百上千个,如果每次为了修改一个类而导致依赖他的每个类都要进行修改,维护的成本未免太大.</p><p><strong>那么如何进行修改呢?</strong></p><p>既然我们不能上层依赖下层,那么将依赖的关系反转过来,由下层依赖上层,换种说法就是让上层控制下层.这里我们用<strong>依赖注入</strong>来实现控制反转.<strong>所谓的依赖注入,就是将下层类作为参数传入到上层类,从而实现上层对下层的控制</strong>.重新编写各层级代码.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*武器类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weapon</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ad;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Weapon</span><span class="params">(<span class="keyword">int</span> ad)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ad = ad;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"怪物掉"</span> + ad + <span class="string">"滴血!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*英雄类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Weapon weapon;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(Weapon weapon)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">weapon.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*网络游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetGame</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Hero hero;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NetGame</span><span class="params">(Hero hero)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hero = hero;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">hero.attack();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> NetGame game;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(NetGame game)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.game = game;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*测试类*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Weapon weapon = <span class="keyword">new</span> Weapon(<span class="number">50</span>);</span><br><span class="line">Hero hero = <span class="keyword">new</span> Hero(weapon);</span><br><span class="line">NetGame game = <span class="keyword">new</span> NetGame(hero);</span><br><span class="line">Person xiaoZhou = <span class="keyword">new</span> Person(game);</span><br><span class="line">xiaoZhou.playGame();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>看图</strong></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201019025713.png" alt="20201019025713"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><blockquote><p>案例来到这里我们来进行简单的总结,其实由以上的案例我们不仅解释了什么是<strong>依赖倒置原则</strong>,还顺带讲解了2个概念.</p><ul><li><p><strong>控制反转</strong>:  <strong>Inversion of Control</strong>   , 我们可以通过控制反转的思路来实现依赖倒置.</p></li><li><p><strong>依赖注入</strong>:  <strong>Dependency Injection</strong>  , 要想实现控制反转,可以通过依赖注入的形式将低层的对象注入到上层,由上层管理下层.</p></li></ul><p>那么这些又和Spring有什么关系呢?接着往下看咯</p></blockquote><h4 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h4><blockquote><p>从上个案例中我们使用控制反转的思路,利用依赖注入的方式实现了依赖倒置.但是在测试类中我们在方法体内创建了大量的对象.看测试类代码</p></blockquote><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Weapon weapon = <span class="keyword">new</span> Weapon(<span class="number">50</span>);</span><br><span class="line">Hero hero = <span class="keyword">new</span> Hero(weapon);</span><br><span class="line">NetGame game = <span class="keyword">new</span> NetGame(hero);</span><br><span class="line">Person xiaoZhou = <span class="keyword">new</span> Person(game);</span><br><span class="line">xiaoZhou.playGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个测试类中的体现就是 , 小周同学为了玩这个网络游戏,不仅要自己创建网络游戏,还得创建英雄,还得创建一把武器.</p><p>再好比,今天客户(Customer)想要买条内裤,结果首先跑去市场(Market)然后去了店铺(Store),接着找到店员(Salesman),最后买了一条内裤(Underware).</p><p>但是在现在的信息化和互联网时代,这种操作是不是很费时间的操作?如果我们找一个”可靠”的<strong>第三方平台</strong>(TaoBao),在平台上搜索想要购买的商品,点击购买,最后内裤(Underware)邮寄到手上,尽管可能在<strong>第三方平台</strong>中会产生很多其他的对象,比如也有商铺(Store),客服(CustomerService),快递公司(Express)…等等对象,但Customer根本不需要操心这些对象是如何运行和操作的,只要内裤到手就OK!</p><p>那么这个管理这些对象的<strong>第三方平台</strong>是什么?对了,就是今天要讲的Spring.</p><p>再来回顾<strong>Spring</strong>的概念 : <strong>Spring就是一个管理bean的容器,作为控制反转的容器实现.</strong>也就是说Spring就是一个大的容器帮助我们管理一些bean对象,而这些bean对象一般都是为了实现控制反转所创建的.也就是这些.    </p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201019214510.png" alt="20201019214510" style="zoom: 80%;" /><p><strong>有了这个容器后,就可以自动对我们代码里的对象进行初始化</strong>,当然我们需要通过<strong>配置</strong>来对这些对象进行自动化处理,不再需要我们手动的在代码中去写大量的new来实现,<strong>并且我们在使用最上层的实例时也不需要去关心其实现细节</strong>.这就是<strong>控制反转容器</strong>,而其实现就是我们大名鼎鼎的<strong>Spring</strong>了.</p><h4 id="最终总结"><a href="#最终总结" class="headerlink" title="最终总结"></a>最终总结</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201019220631.png" alt="20201019220631"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030111805.png&quot; alt=&quot;20201030111805&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="spring" scheme="http://fightlee.fun/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>javaweb篇-反射(二)</title>
    <link href="http://fightlee.fun/javaweb%E7%AF%87-reflection2.html"/>
    <id>http://fightlee.fun/javaweb%E7%AF%87-reflection2.html</id>
    <published>2020-10-10T06:47:26.000Z</published>
    <updated>2020-11-15T04:03:35.313Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png" alt="20201030112614"></p><a id="more"></a><h1 id="JavaWeb-反射-二"><a href="#JavaWeb-反射-二" class="headerlink" title="JavaWeb-反射(二)"></a>JavaWeb-反射(二)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文继续深入学习反射&amp;使用反射改造之前Servlet案例中的代码结构</p></blockquote><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><div style="position: relative; width: 100%; height: 0;padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=669879000&bvid=BV1Na4y1L7jT&cid=246463513&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div><h3 id="回顾前文"><a href="#回顾前文" class="headerlink" title="回顾前文"></a>回顾前文</h3><ul><li><p>从前文已经了解想要创建一个类的对象,并不是只有通过<strong>new</strong>关键字才能创建.</p></li><li><p>想要调用一个类的属性和其方法,只需先拿到该类的字节码文件即可.</p></li><li><p>获取Class对象的三种方式中其中一种只需要直到该Class所在的路径名即可.</p></li></ul><h3 id="问题解析"><a href="#问题解析" class="headerlink" title="问题解析"></a>问题解析</h3><blockquote><p>前文一开始抛出了3个Servlet相关的问题,我们按照之前的学习一个一个解答</p></blockquote><ol><li><p>Servlet中的service()方法怎么调用的?</p><p>答 : service()方法能够成功运行,即证明在Servlet被访问时,该Servlet对象被创建,并调用了service()方法</p></li><li><p>service()方法能调用的话?Servlet对象在哪里创建的?</p><p>答 : Servlet的创建很明显不是由我们当前Web应用手动通过new来创建的,是装载Servlet的容器Tomcat帮助我们创建了该Servlet对象.</p></li><li><p>为什么需要在web.xml中配置Servlet?</p><p>答 : Tomcat要想创建当前访问的Servlet对象,就需要知道该Servlet的字节码文件路径,通过路径名就可以获取该Servlet的字节码文件对象,然后通过反射中的newInstance()方法创建其对象,并获取Servlet中的service()方法对应的Method对象,再执行,所以我们需要在web.xml中对Servlet路径进行配置.</p></li></ol><h3 id="问题模拟"><a href="#问题模拟" class="headerlink" title="问题模拟"></a>问题模拟</h3><p><strong>模拟Tomcat容器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.refleciton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 模拟Tomcat容器</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWeb</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1.通过解析web.xml文件得到Servlet的路径(这里采用jsoup框架解析)</span></span><br><span class="line"><span class="comment">//a.通过pares方法得到文档document对象</span></span><br><span class="line">Document document = Jsoup.parse(<span class="keyword">new</span> File(<span class="string">"web.xml"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="comment">//b.通过document对象获取标签中的内容---和js类似</span></span><br><span class="line">Elements elements = document.getElementsByTag(<span class="string">"servlet-name"</span>);</span><br><span class="line">String className = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line"><span class="comment">//找到匹配的servlet-name标签</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"ServletDemo"</span>.equals(element.html())) &#123;</span><br><span class="line"><span class="comment">//该元素的下一个元素标签中的html内容即为全路径.</span></span><br><span class="line">className = element.nextElementSibling().html();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(className != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//2.根据路径名获取对应Servlet的Class对象</span></span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line"><span class="comment">//3.使用Class对象创建Servlet的实例</span></span><br><span class="line">Object obj = clazz.newInstance();</span><br><span class="line"><span class="comment">//4.获取Servlet中的service方法</span></span><br><span class="line">Method method = clazz.getMethod(<span class="string">"service"</span>, Object<span class="class">.<span class="keyword">class</span>,<span class="title">Object</span>.<span class="title">class</span>)</span>;</span><br><span class="line"><span class="comment">//5.调用service , 使用1 和 2 模拟request和response对象</span></span><br><span class="line">method.invoke(obj, <span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模拟Servlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.refleciton.other;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 模拟Web应用中的Servlet</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(Object request,Object response)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"service run .... "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模拟web.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.java.refleciton.other.ServletDemo<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>aaa.bbb.ccc<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service run ....</span><br></pre></td></tr></table></figure><p><strong>结论</strong></p><ol><li>模拟时解析使用的是jsoup爬虫框架,使用方式参考JS&amp;JQuery</li><li>Tomcat容器中的代码只有一处需要改动,就是if判断中的Servlet的名称,实际上Tomcat容器可以根据web.xml中的url-parttern中的虚拟路径上的servlet-mapping标签获取servlet-name.这里简化了操作.</li><li>只是Java环境,所以使用了Object对象代替了HttpServletRequest&amp;HttpServletResponse对象</li></ol><p><strong>有图有真相</strong></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201010160719.png" alt="20201010160719"></p><h2 id="案例改造"><a href="#案例改造" class="headerlink" title="案例改造"></a>案例改造</h2><blockquote><p>之前在servlet4中我们实现了一个登录注册的小案例,本篇文章中我们来对此案例利用反射进行优化改造.</p><p>优化内容 : </p><ol><li>对于Servlet的优化</li><li>应用程序中的对象的创建优化</li><li>数据库查询的优化</li></ol></blockquote><h3 id="1-Servlet的优化"><a href="#1-Servlet的优化" class="headerlink" title="1)Servlet的优化"></a>1)Servlet的优化</h3><h4 id="优化背景"><a href="#优化背景" class="headerlink" title="优化背景"></a>优化背景</h4><blockquote><p>在案例中,我们仅仅完成了一些用户相关的需求就创建了多个Servlet,开发后期用户相关的业务增加的同时,会导致Servlet也同时对比增加,会导致项目越来越庞大,后期的可维护性也非常差,当对业务进行增删时,同时需要对项目中的Servlet进行频繁的修改,比如</p><ol><li>登录业务–LoginServlet</li><li>注册业务–RegisterServlet</li><li>修改用户信息业务–UpdateUserServlet</li><li>删除用户信息业务–DeleteUserByIdServlet</li><li>等等..</li></ol><p>所以在此背景下,我们需要思考如何将所有业务相关的Servlet整合到一个Servlet中,比如用户相关的就封装为UserServlet,商品相关的就封装为ProductServlet,等等.</p></blockquote><h4 id="优化步骤"><a href="#优化步骤" class="headerlink" title="优化步骤"></a>优化步骤</h4><ol><li>将多个相关的业务Servlet整合到一个Servlet中,如将LoginServlet&amp;RegisterServlet整合为UserServlet</li></ol><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201015221102.png" alt="20201015221102"></p><p><strong>初步改造后的UserServlet.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.java.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.java.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.java.service.imp.UserServiceImp;</span><br><span class="line"><span class="keyword">import</span> com.java.utils.ResponseData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//将2个业务中都有的设置字符集代码抽取出来</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.获取请求参数中的方法名</span></span><br><span class="line">String methodName = request.getParameter(<span class="string">"method"</span>);</span><br><span class="line"><span class="comment">//2.根据methodName决定要执行的方法</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"doLogin"</span>.equals(methodName)) &#123;</span><br><span class="line">doLogin(request, response);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"doRegister"</span>.equals(methodName)) &#123;</span><br><span class="line">doRegister(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...等等其他业务</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doLogin</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//2.获取请求中的表单参数</span></span><br><span class="line">String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line"><span class="comment">//3.调用业务层UserService实现登录业务</span></span><br><span class="line">UserService us = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line"><span class="comment">//4.准备回传参数对象</span></span><br><span class="line">ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">User user = us.loginByUserNameAndPassword(userName, password);</span><br><span class="line"><span class="keyword">if</span>(user != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//登录成功</span></span><br><span class="line">responseData = responseData.success(<span class="string">"登陆成功"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//登录失败</span></span><br><span class="line">responseData = responseData.fail(<span class="string">"用户名密码不正确..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用response的getWriter将其写回</span></span><br><span class="line"><span class="comment">//使用第三方工具fastjson将对象转换成Json字符串</span></span><br><span class="line">String jsonString = JSON.toJSONString(responseData);</span><br><span class="line"><span class="comment">//写回字符串</span></span><br><span class="line">response.getWriter().write(jsonString);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doRegister</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//2.获取请求中的表单参数</span></span><br><span class="line">String userEmail = request.getParameter(<span class="string">"userEmail"</span>);</span><br><span class="line">String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line"><span class="comment">//3.调用业务层UserService实现注册业务</span></span><br><span class="line">UserService us = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line"><span class="comment">//4.准备回传参数对象</span></span><br><span class="line">ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> result = us.registerWithUserInfo(userName,password,userEmail);</span><br><span class="line"><span class="keyword">if</span>(result) &#123;</span><br><span class="line">responseData = responseData.success(<span class="string">"注册成功,请重新登陆.."</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">responseData = responseData.success(<span class="string">"注册失败,请稍后再试!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用第三方工具fastjson将对象转换成Json字符串</span></span><br><span class="line">String jsonString = JSON.toJSONString(responseData);</span><br><span class="line"><span class="comment">//写回字符串</span></span><br><span class="line">response.getWriter().write(jsonString);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>经过1步骤的优化后,项目开发中涉及到用户相关的业务操作全都可以封装在一个UserServlet中,并且通过不同方法名称就能调用对应的业务逻辑.</p></blockquote><ol start="2"><li>如果在项目中有很多的Servlet,那我们可以对所有的Servlet中的代码继续进行抽取,比如doGet()和doPost()方法.</li></ol><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201015223414.png" alt="20201015223414" style="zoom: 67%;" /><p><strong>抽取出的BaseServlet.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//将2个业务中都有的设置字符集代码抽取出来</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.获取请求参数中的方法名</span></span><br><span class="line">String methodName = request.getParameter(<span class="string">"method"</span>);</span><br><span class="line"><span class="comment">//2.使用反射根据methodName决定要执行的方法</span></span><br><span class="line">Class&lt;? extends BaseServlet&gt; clazz = <span class="keyword">this</span>.getClass();</span><br><span class="line">Method method = clazz.getMethod(methodName, HttpServletRequest<span class="class">.<span class="keyword">class</span>,<span class="title">HttpServletResponse</span>.<span class="title">class</span>)</span>;</span><br><span class="line"><span class="comment">//3.方法调用</span></span><br><span class="line">method.invoke(<span class="keyword">this</span>, request,response);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有了BaseServlet后,UserServlet或者其他的Servlet中就不需要再去重写doGet或者doPost方法,但要注意的是请求参数中的<strong>method的值必须和方法名一一对应</strong></p></blockquote><ol start="3"><li>在前2步的基础上,我们可以对UserServlet下的doLogin方法或者其他业务逻辑方法的返回值进行相关的封装</li></ol><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201015225718.png" alt="20201015225718" style="zoom:80%;" /><p><strong>优化后的BaseServlet.java和UserServlet.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//将2个业务中都有的设置字符集代码抽取出来</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.获取请求参数中的方法名</span></span><br><span class="line">String methodName = request.getParameter(<span class="string">"method"</span>);</span><br><span class="line"><span class="comment">//2.使用反射根据methodName决定要执行的方法</span></span><br><span class="line">Class&lt;? extends BaseServlet&gt; clazz = <span class="keyword">this</span>.getClass();</span><br><span class="line">Method method = clazz.getMethod(methodName, HttpServletRequest<span class="class">.<span class="keyword">class</span>,<span class="title">HttpServletResponse</span>.<span class="title">class</span>)</span>;</span><br><span class="line"><span class="comment">//3.方法调用</span></span><br><span class="line">Object result = method.invoke(<span class="keyword">this</span>, request,response);</span><br><span class="line"><span class="keyword">if</span>(result != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//返回值内容是对象还是字符串?</span></span><br><span class="line"><span class="keyword">if</span>(result <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line"><span class="comment">//如果是字符串---&gt;做路径的跳转,一种是重定向,一种请求转发</span></span><br><span class="line">String contextPath = request.getContextPath();</span><br><span class="line">String path = result.toString();</span><br><span class="line">String viewName = <span class="keyword">null</span>;<span class="comment">//需要重新定下的视图名称</span></span><br><span class="line"><span class="keyword">if</span>(path.contains(<span class="string">"redirect"</span>)) &#123;</span><br><span class="line"><span class="comment">//重定向</span></span><br><span class="line">viewName = path.substring(<span class="number">9</span>) + <span class="string">".jsp"</span>;</span><br><span class="line">response.sendRedirect(contextPath + viewName);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//请求转发</span></span><br><span class="line">viewName = path + <span class="string">".jsp"</span>;</span><br><span class="line">request.getRequestDispatcher(viewName).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果是对象---&gt;做Ajax请求,利用response对象写json字符串回去</span></span><br><span class="line">response.getWriter().write(JSON.toJSONString(result));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.java.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.java.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.java.service.imp.UserServiceImp;</span><br><span class="line"><span class="keyword">import</span> com.java.utils.ResponseData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseData <span class="title">doLogin</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//2.获取请求中的表单参数</span></span><br><span class="line">String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line"><span class="comment">//3.调用业务层UserService实现登录业务</span></span><br><span class="line">UserService us = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line"><span class="comment">//4.准备回传参数对象</span></span><br><span class="line">ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">User user = us.loginByUserNameAndPassword(userName, password);</span><br><span class="line"><span class="keyword">if</span>(user != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//登录成功,返回成功状态对象</span></span><br><span class="line"><span class="keyword">return</span> responseData.success(<span class="string">"登陆成功"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//登录失败,返回失败状态对象</span></span><br><span class="line"><span class="keyword">return</span> responseData.fail(<span class="string">"用户名密码不正确..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> responseData.fail(<span class="string">"服务器操作失败...请稍候再试!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseData <span class="title">doRegister</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//2.获取请求中的表单参数</span></span><br><span class="line">String userEmail = request.getParameter(<span class="string">"userEmail"</span>);</span><br><span class="line">String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line"><span class="comment">//3.调用业务层UserService实现注册业务</span></span><br><span class="line">UserService us = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line"><span class="comment">//4.准备回传参数对象</span></span><br><span class="line">ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> result = us.registerWithUserInfo(userName,password,userEmail);</span><br><span class="line"><span class="keyword">if</span>(result) &#123;</span><br><span class="line"><span class="keyword">return</span> responseData.success(<span class="string">"注册成功,请重新登陆.."</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> responseData.fail(<span class="string">"注册失败,请稍后再试!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> responseData.fail(<span class="string">"服务器操作失败...请稍候再试!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>经过最终的优化,在Servlet中只需要通过对应的返回值就能决定当前是需要<strong>请求转发</strong>/<strong>重定向</strong>至某个路径,还是返回<strong>Json对象</strong>给前台使用.</p></blockquote><h3 id="2-数据库查询优化"><a href="#2-数据库查询优化" class="headerlink" title="2)数据库查询优化"></a>2)数据库查询优化</h3><blockquote><p>我们先来分析下原有的UserDao中的查询的实现,分析存在的问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 根据用户名密码查询用户</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="function">User <span class="title">getUserByUserNameAndPassword</span><span class="params">(String userName,String password)</span><span class="keyword">throws</span> SQLException</span>;</span><br></pre></td></tr></table></figure><h4 id="优化背景-1"><a href="#优化背景-1" class="headerlink" title="优化背景"></a>优化背景</h4><blockquote><p>   <strong>存在问题</strong> : </p><ol><li><p>如果在原有的接口中继续添加相关查询方法,比如根据邮箱密码查询用户,或者其他条件查询用户,需要增加其他方法.</p></li><li><p>在User相关dao操作中需要做查询返回对应User对象,其他比如Product,Order的相关dao操作中,也需要返回对应的Product或者Order对象,在业务逻辑中封装对象的操作非常繁琐.</p></li></ol></blockquote><h4 id="优化步骤-1"><a href="#优化步骤-1" class="headerlink" title="优化步骤"></a>优化步骤</h4><ol><li>修改方法的参数为可变参数</li></ol><p><strong>JDBCUtils.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取连接...</span></span><br><span class="line"><span class="comment">//释放资源...</span></span><br><span class="line"><span class="comment">//封装查询方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserByClause</span><span class="params">(Object... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果有Product</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">getProductByClause</span><span class="params">(Object... args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果有Order...</span></span><br></pre></td></tr></table></figure><ol start="2"><li>通过在参数中指定对应的字节码文件返回其对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装查询方法</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String sql, Class&lt;T&gt; clazz , Object... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1.声明T对象</span></span><br><span class="line">    T t = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//2.根据参数中传入的字节码文件 创建其对象</span></span><br><span class="line">    t = clazz.newInstance();</span><br><span class="line">    Connection conn = getConnection();</span><br><span class="line">    PreparedStatement pstmt = conn.prepareStatement(sql);</span><br><span class="line">    <span class="comment">//3.遍历传入的参数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">        pstmt.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.执行查询</span></span><br><span class="line">    ResultSet rs = pstmt.executeQuery();</span><br><span class="line">    <span class="comment">//5.获取结果集中的元数据对象</span></span><br><span class="line">    ResultSetMetaData metaData = rs.getMetaData();</span><br><span class="line">    <span class="keyword">if</span>(rs.next()) &#123;<span class="comment">//如果有数据</span></span><br><span class="line">        <span class="comment">//6.创建Map封装数据库中的字段名以及对应的值</span></span><br><span class="line">        Map&lt;String, Object&gt; map = getMapFromResultSet(rs, metaData);</span><br><span class="line">        <span class="comment">//7.遍历map,并将class字节码文件中的每个字段赋值</span></span><br><span class="line">        populateBean(clazz, t, map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">selectList</span><span class="params">(String sql, Class&lt;T&gt; clazz , Object... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1.声明集合对象</span></span><br><span class="line">    List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">    <span class="comment">//2.准备Connection&amp;Statement对象</span></span><br><span class="line">    Connection conn = getConnection();</span><br><span class="line">    PreparedStatement pstmt = conn.prepareStatement(sql);</span><br><span class="line">    <span class="comment">//3.判断&amp;遍历传入的参数</span></span><br><span class="line">    <span class="keyword">if</span>(args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            pstmt.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.执行查询</span></span><br><span class="line">    ResultSet rs = pstmt.executeQuery();</span><br><span class="line">    <span class="comment">//5.获取结果集中的元数据对象</span></span><br><span class="line">    ResultSetMetaData metaData = rs.getMetaData();</span><br><span class="line">    <span class="keyword">while</span>(rs.next()) &#123;<span class="comment">//如果有一行数据</span></span><br><span class="line">        <span class="comment">//6.创建一个对象</span></span><br><span class="line">        T t = clazz.newInstance();</span><br><span class="line">        <span class="comment">//7.使用Map封装表中字段和值</span></span><br><span class="line">        Map&lt;String, Object&gt; map = getMapFromResultSet(rs, metaData);</span><br><span class="line">        <span class="comment">//8.遍历Map给class中的字段赋值</span></span><br><span class="line">        populateBean(clazz, t, map);</span><br><span class="line">        <span class="comment">//9.集合保存对象</span></span><br><span class="line">        list.add(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*封装Bean*/</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">populateBean</span><span class="params">(Class&lt;T&gt; clazz, T t, Map&lt;String, Object&gt; map)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;String, Object&gt; entry : map.entrySet()) &#123;</span><br><span class="line">        Field field = clazz.getDeclaredField(entry.getKey());</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(t, entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*使用Map封装表中的字段名&amp;值,并返回*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">getMapFromResultSet</span><span class="params">(ResultSet rs, ResultSetMetaData metaData)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; metaData.getColumnCount(); i++) &#123;</span><br><span class="line">        String labelName = metaData.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line">        Object value = rs.getObject(labelName);</span><br><span class="line">        map.put(labelName, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>优化后,涉及到查询的单个对象查询的操作可以使用selectOne,多个对象查询的操作可以使用selectList.在查询到对象的同时会根据表中和Bean中的字段自动封装并返回对象,是不是更为方便呢?</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>本篇文章继续使用反射对前文的问题进行解析,并对之前案例进行改造.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png&quot; alt=&quot;20201030112614&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="反射" scheme="http://fightlee.fun/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
</feed>
