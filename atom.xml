<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Here is Lee Blog.</title>
  
  <subtitle>Keep fighting,Keep your mind,Be patient,and Never give up!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fightlee.fun/"/>
  <updated>2020-10-30T03:04:55.503Z</updated>
  <id>http://fightlee.fun/</id>
  
  <author>
    <name>Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript高级04</title>
    <link href="http://fightlee.fun/javascript%E9%AB%98%E7%BA%A704.html"/>
    <id>http://fightlee.fun/javascript%E9%AB%98%E7%BA%A704.html</id>
    <published>2020-10-30T03:04:55.000Z</published>
    <updated>2020-10-30T03:04:55.503Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>javascript高级03</title>
    <link href="http://fightlee.fun/javascript%E9%AB%98%E7%BA%A703.html"/>
    <id>http://fightlee.fun/javascript%E9%AB%98%E7%BA%A703.html</id>
    <published>2020-10-30T03:04:45.000Z</published>
    <updated>2020-10-30T03:04:45.732Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>javaee-spring04</title>
    <link href="http://fightlee.fun/javaee-spring04.html"/>
    <id>http://fightlee.fun/javaee-spring04.html</id>
    <published>2020-10-30T03:03:54.000Z</published>
    <updated>2020-10-30T08:52:03.352Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030111805.png" alt="20201030111805"></p><a id="more"></a><h1 id="Javaee-Spring04"><a href="#Javaee-Spring04" class="headerlink" title="Javaee-Spring04"></a>Javaee-Spring04</h1><h2 id="本文概览"><a href="#本文概览" class="headerlink" title="本文概览"></a>本文概览</h2><ul><li>SpringAOP<ul><li>aop概念和术语解释</li><li>aop的xml配置</li><li>aop的注解配置</li></ul></li><li>SpringJDBC</li></ul><h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>Spring 框架的一个关键组件是<strong>面向切面的编程</strong>(AOP)框架。面向方面的编程需要把程序逻辑分解成不同的部分称为所谓的关注点。跨一个应用程序的多个点的功能被称为<strong>横切关注点</strong>，这些横切关注点在概念上独立于应用程序的业务逻辑。有各种各样的常见的很好的方面的例子，如日志记录、审计、声明式事务、安全性和缓存等。</p><p>在 OOP 中，关键单元模块度是类，而在 AOP 中单元模块度是切面。依赖注入帮助你对应用程序对象相互解耦和 AOP 可以帮助你从它们所影响的对象中对横切关注点解耦。AOP 是像编程语言的触发物，如 Perl，.NET，Java 或者其他。</p><p>Spring AOP 模块提供拦截器来拦截一个应用程序，例如，当执行一个方法时，你可以在方法执行之前或之后添加额外的功能。</p></blockquote><blockquote><p>经过前文的<strong>代理模式</strong>的学习,大家应该对如何向一个业务类中动态添加代理来给业务类中的一些功能添加额外的业务需求,那么本文就是在此基础上在Spring框架中对此模式的实现.</p></blockquote><h3 id="AOP示意图"><a href="#AOP示意图" class="headerlink" title="AOP示意图"></a>AOP示意图</h3><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030130319.png" alt="20201030130319"></p><h3 id="Spring-AOP-术语"><a href="#Spring-AOP-术语" class="headerlink" title="Spring AOP 术语"></a>Spring AOP 术语</h3><table><thead><tr><th>术语</th><th><strong>概念描述</strong></th></tr></thead><tbody><tr><td><strong>Aspect</strong></td><td>切面.一个Class,是对系统中的横切关注点逻辑进行模块化封装的AOP概念实体,简单来说就是其中定义了所有要织入的逻辑.</td></tr><tr><td><strong>Joinpoint</strong></td><td>织入的过程中,我们需要知道在系统的哪些执行点上进行织入操作,这些系统执行点就称之为Joinpoint.</td></tr><tr><td><strong>Advice</strong></td><td>单一横切关注点逻辑的载体,XXAdvice为即将织入到Joinpoint的横切逻辑.根据Joinpoint执行时机的差异或功能不同,分成不同形式或者不同方向.</td></tr><tr><td><strong>Pointcut</strong></td><td>为Joinpoint的表达式.织入过程中,需要参战Pointcut规定的Joinpoint信息来完成正确的织入.</td></tr><tr><td><strong>Target Object</strong></td><td>符合Pointcut所指定的条件,将在织入过程中被织入横切逻辑的对象,即为目标对象</td></tr><tr><td><strong>Weave</strong></td><td>将 AOP 的功能模块嵌入的过程称之为<strong>织入(Weave)</strong></td></tr></tbody></table><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030134401.png" alt="20201030134401"></p><table><thead><tr><th>通知(Advice)</th><th>描述</th></tr></thead><tbody><tr><td>前置通知(Before)</td><td>方法执行前,执行通知</td></tr><tr><td>后置通知(After)</td><td>方法执行后,无论成功还是抛出异常,都会执行通知</td></tr><tr><td>返回通知(AfterReturning)</td><td>方法执行,成功返回值后,执行通知</td></tr><tr><td>异常通知(AfterThrowing)</td><td>方法执行过程中出现异常,执行通知</td></tr><tr><td>环绕通知(Around)</td><td>在方法前后,执行通知,相当于围绕方法.</td></tr></tbody></table><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><blockquote><p>场景描述 : 还是之前的动态代理中的计算器案例.</p></blockquote><p>*<em>因为要用到AOP相关实现AOL语言的AspectJ中的对象,所以需要导入AspectJ的依赖 : *</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-AOP-xml架构"><a href="#Spring-AOP-xml架构" class="headerlink" title="Spring AOP xml架构"></a>Spring AOP xml架构</h3><blockquote><p>在xml中配置需要导入aop命名空间.</p></blockquote><p><strong>业务接口Calucator.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calucator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>业务接口实现类CalucatorImp.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalucatorImp</span> <span class="keyword">implements</span> <span class="title">Calucator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = a + b;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = a - b;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = a * b;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = a / b;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>功能切面LoggingAspect.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoggingAspect</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是"</span>+joinPoint.getSignature().getName()+<span class="string">"方法的前置通知 , 传入的参数为 : "</span> + Arrays.asList(joinPoint.getArgs()) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是"</span> + joinPoint.getSignature().getName() + <span class="string">"方法的后置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是返回通知 : "</span> + returnValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Exception ex)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是异常通知 : "</span> + ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>功能切面SecurityAspect.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityAspect</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"round方法执行前"</span>);</span><br><span class="line">            Object proceed = jp.proceed();</span><br><span class="line">            System.out.println(<span class="string">"round方法成功执行后"</span>);</span><br><span class="line">            <span class="keyword">return</span> proceed;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            System.out.println(<span class="string">"出现异常.."</span> + throwable.getMessage());</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"round方法最终执行"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>xml文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入业务Calucator和切面logginAspect--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"calucator"</span> <span class="attr">class</span>=<span class="string">"com.java.aop.CalucatorImp"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"loggingAspect"</span> <span class="attr">class</span>=<span class="string">"com.java.aop.LoggingAspect"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityAspect"</span> <span class="attr">class</span>=<span class="string">"com.java.aop.SecurityAspect"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置AOP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置Pointcut切入点</span></span><br><span class="line"><span class="comment">        expression表达式 : execution(* com.java.aop.CalucatorImp.*(..))</span></span><br><span class="line"><span class="comment">        完整表达式 : public int com.java.aop.CalucatorImp.plus(int,int))</span></span><br><span class="line"><span class="comment">        [修饰符] [返回值] [包] [类] [方法] [参数1,参数2..]</span></span><br><span class="line"><span class="comment">        哪个想通配就用 *</span></span><br><span class="line"><span class="comment">        参数用 ..</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(public int com.java.aop.CalucatorImp.plus(int,int))"</span>/&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--数值越小,优先级越高--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置第一个Aspect切面 order优先级--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"loggingAspect"</span> <span class="attr">id</span>=<span class="string">"logAspect"</span> <span class="attr">order</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置Advice通知--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--前置通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--后置通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--注意返回通知需要接收返回值需要配置 returning , 在方法参数中传入 Object returnValue--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span> <span class="attr">returning</span>=<span class="string">"returnValue"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--异常通知需要接收异常信息需要配置 throwing , 在方法参数中传入 Exception ex--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowing"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span> <span class="attr">throwing</span>=<span class="string">"ex"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--配置第二个切面 order优先级--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"securityAspect"</span> <span class="attr">id</span>=<span class="string">"sa"</span> <span class="attr">order</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置环绕通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-AOP-注解架构"><a href="#Spring-AOP-注解架构" class="headerlink" title="Spring AOP 注解架构"></a>Spring AOP 注解架构</h3><blockquote><p>需要使用@Aspect等注解</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启AOP 注解配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用注解的切面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.anno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityAspect</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.java.anno.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">selectAll</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"selectAll()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"round方法执行前"</span>);</span><br><span class="line">            Object proceed = jp.proceed();</span><br><span class="line">            System.out.println(<span class="string">"round方法成功执行后"</span>);</span><br><span class="line">            <span class="keyword">return</span> proceed;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            System.out.println(<span class="string">"出现异常.."</span> + throwable.getMessage());</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"round方法最终执行"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.anno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoggingAspect</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.java.anno.CalucatorImp.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">selectAll</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"selectAll()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是"</span>+joinPoint.getSignature().getName()+<span class="string">"方法的前置通知 , 传入的参数为 : "</span> + Arrays.asList(joinPoint.getArgs()) );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"selectAll()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是"</span> + joinPoint.getSignature().getName() + <span class="string">"方法的后置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(pointcut = <span class="string">"selectAll()"</span>,returning=<span class="string">"returnValue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是返回通知 : "</span> + returnValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(pointcut = <span class="string">"selectAll()"</span>,throwing = <span class="string">"ex"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Exception ex)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是异常通知 : "</span> + ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.java.anno"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启AOP注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th>l注解/对象</th><th>描述</th></tr></thead><tbody><tr><td>JoinPoint</td><td>连接点.<br><code>getSignature().getName()</code> : 获取连接点方法名<br><code>getArgs()</code> : 获取连接点处参数</td></tr><tr><td>ProceedingJoinPoint</td><td>连接点,一般用在环绕通知中.<br><code>proceed()</code> : 执行方法</td></tr><tr><td>@Aspect</td><td>切面</td></tr><tr><td>@AfterReturning</td><td>返回通知</td></tr><tr><td>@AfterThrowing</td><td>异常通知</td></tr><tr><td>@Before</td><td>前置通知</td></tr><tr><td>@After</td><td>后置通知</td></tr><tr><td>@Around</td><td>环绕通知</td></tr><tr><td>@Order</td><td>设置优先级</td></tr><tr><td>@Pointcut</td><td>设置切入点,一般设置在切面中的某个私有方法上</td></tr></tbody></table><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><blockquote><p>在使用普通的 JDBC 数据库时，就会很麻烦的写不必要的代码来处理异常，打开和关闭数据库连接等。但 Spring JDBC 框架负责所有的低层细节，从开始打开连接，准备和执行 SQL 语句，处理异常，处理事务，到最后关闭连接。</p><p>所以当从数据库中获取数据时，你所做的是定义连接参数，指定要执行的 SQL 语句，每次迭代完成所需的工作。</p></blockquote><h3 id="配置Idea-database"><a href="#配置Idea-database" class="headerlink" title="配置Idea database"></a>配置Idea database</h3><h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030160501.png" alt="20201030160501"><br><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030160942.png" alt="20201030160942"></p><h4 id="自动生成表对应的实体类"><a href="#自动生成表对应的实体类" class="headerlink" title="自动生成表对应的实体类"></a>自动生成表对应的实体类</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030160951.png" alt="20201030160951"></p><h3 id="一个JDBC的小案例"><a href="#一个JDBC的小案例" class="headerlink" title="一个JDBC的小案例"></a>一个JDBC的小案例</h3><p><strong>实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> userId;</span><br><span class="line">  <span class="keyword">private</span> String userName;</span><br><span class="line">  <span class="keyword">private</span> String userAddress;</span><br><span class="line">  <span class="keyword">private</span> String userEmail;</span><br><span class="line">  <span class="keyword">private</span> String userPassword;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String userName, String userAddress, String userEmail, String userPassword)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    <span class="keyword">this</span>.userAddress = userAddress;</span><br><span class="line">    <span class="keyword">this</span>.userEmail = userEmail;</span><br><span class="line">    <span class="keyword">this</span>.userPassword = userPassword;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(<span class="keyword">long</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userId = userId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userName = userName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUserAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userAddress;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserAddress</span><span class="params">(String userAddress)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userAddress = userAddress;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUserEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userEmail;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserEmail</span><span class="params">(String userEmail)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userEmail = userEmail;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getUserPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userPassword;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserPassword</span><span class="params">(String userPassword)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userPassword = userPassword;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实体Mapper类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.java.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserId(resultSet.getLong(<span class="string">"user_id"</span>));</span><br><span class="line">        user.setUserName(resultSet.getString(<span class="string">"user_name"</span>));</span><br><span class="line">        user.setUserEmail(resultSet.getString(<span class="string">"user_email"</span>));</span><br><span class="line">        user.setUserAddress(resultSet.getString(<span class="string">"user_address"</span>));</span><br><span class="line">        user.setUserPassword(resultSet.getString(<span class="string">"user_password"</span>));</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Dao类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.java.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImp</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"><span class="comment">//添加用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into user(user_name,user_address,user_email,user_password) values(?,?,?,?)"</span>;</span><br><span class="line">        <span class="keyword">int</span> rows = jdbcTemplate.update(sql, user.getUserName(), user.getUserAddress(), user.getUserEmail(), user.getUserPassword());</span><br><span class="line">        <span class="keyword">return</span> rows &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//删除用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"delete from user where user_id = ?"</span>;</span><br><span class="line">        <span class="keyword">int</span> rows = jdbcTemplate.update(sql, id);</span><br><span class="line">        <span class="keyword">return</span> rows &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//更新用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateUserById</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"update user set user_name = ?,user_address = ?,user_email = ?,user_password = ? where user_id = ?"</span>;</span><br><span class="line">        <span class="keyword">int</span> rows = jdbcTemplate.update(sql, user.getUserName(), user.getUserAddress(), user.getUserEmail(), user.getUserPassword(), user.getUserId());</span><br><span class="line">        <span class="keyword">return</span> rows &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//查询单个用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from user where user_id = ?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql,<span class="keyword">new</span> UserMapper(),id);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//查询多个用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from user"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql,<span class="keyword">new</span> UserMapper());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Dao接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.java.bean.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">deleteUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">updateUserById</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>spring.xml配置文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.java.jdbc"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.driverClassName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>pom文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.39<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext-jdbc.xml"</span>);</span><br><span class="line">    UserDaoImp userDaoImp = ac.getBean(<span class="string">"userDaoImp"</span>, UserDaoImp<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    userDaoImp.addUser(<span class="keyword">new</span> User(<span class="string">"张三1"</span>,<span class="string">"长沙"</span>,<span class="string">"zhangsan1@qq.com"</span>,<span class="string">"123"</span>));</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    userDaoImp.deleteUserById(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUserId(<span class="number">1</span>);</span><br><span class="line">    user.setUserName(<span class="string">"老八"</span>);</span><br><span class="line">    user.setUserPassword(<span class="string">"666"</span>);</span><br><span class="line">    user.setUserEmail(<span class="string">"laba@qq.com"</span>);</span><br><span class="line">    user.setUserAddress(<span class="string">"厕所"</span>);</span><br><span class="line">    userDaoImp.updateUserById(user);</span><br><span class="line">    <span class="comment">//根据id查询</span></span><br><span class="line">    System.out.println(userDaoImp.getUserById(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    System.out.println(userDaoImp.getAllUsers());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030111805.png&quot; alt=&quot;20201030111805&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>javascript高级(二)</title>
    <link href="http://fightlee.fun/javascript%E9%AB%98%E7%BA%A702.html"/>
    <id>http://fightlee.fun/javascript%E9%AB%98%E7%BA%A702.html</id>
    <published>2020-10-28T11:14:27.000Z</published>
    <updated>2020-10-30T02:35:58.951Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201028004154.png" alt="20201028004154"></p><a id="more"></a><h1 id="javascript高级-二"><a href="#javascript高级-二" class="headerlink" title="javascript高级(二)"></a>javascript高级(二)</h1><h2 id="对象—Object"><a href="#对象—Object" class="headerlink" title="对象—Object"></a>对象—Object</h2><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><h5 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量{}"></a>对象字面量{}</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="comment">//定义对象中的属性</span></span><br><span class="line">    id : <span class="number">1</span>,</span><br><span class="line">    name : <span class="string">'zhangsan'</span>,</span><br><span class="line">    age : <span class="number">12</span>,</span><br><span class="line">    <span class="comment">//定义对象中的函数</span></span><br><span class="line">    study : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'好好学习,天天向上'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用属性</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'id : '</span> + person.id);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name : '</span> + person[<span class="string">'name'</span>]);</span><br><span class="line"><span class="comment">//调用对象中定义的函数</span></span><br><span class="line">person.study();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="new-Object"><a href="#new-Object" class="headerlink" title="new Object()"></a>new Object()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象定义</span></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">dog.name = <span class="string">'旺财'</span>;</span><br><span class="line">dog.age = <span class="number">1</span>;</span><br><span class="line">dog.breed = <span class="string">'拉布拉多'</span>;</span><br><span class="line">dog.lookHome = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'看家'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用属性</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.name);</span><br><span class="line">dog.lookHome();</span><br></pre></td></tr></table></figure><h5 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数的前身--工厂模式</span></span><br><span class="line"><span class="comment">//所有对象都属于Object,创建的对象没有具体的身份,存在对象识别的问题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    o.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'打招呼.'</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后面使用instanceof关键字判断都属于Object</span></span><br></pre></td></tr></table></figure><h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><blockquote><p> ES5中没有Class的概念,所以使用函数的形式来组织要创建对象的模版</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通构造函数</span></span><br><span class="line"><span class="comment">//定义构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hero</span>(<span class="params">name,country</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.country = country;</span><br><span class="line">    <span class="comment">//定义普通方法</span></span><br><span class="line">    <span class="keyword">this</span>.skill = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'放大招啦.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"><span class="keyword">var</span> gailun = <span class="keyword">new</span> Hero(<span class="string">'盖伦'</span>,<span class="string">'德玛西亚'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(gailun.name);</span><br><span class="line"><span class="built_in">console</span>.log(gailun.country);</span><br><span class="line">gailun.skill();</span><br><span class="line"><span class="comment">//定义静态属性&amp;方法,通过构造函数名.静态属性 &amp; 构造函数名.静态函数名()</span></span><br><span class="line">Hero.sex = <span class="string">'男'</span>;</span><br><span class="line">Hero.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再次创建对象</span></span><br><span class="line"><span class="keyword">var</span> huangzi = <span class="keyword">new</span> Hero(<span class="string">'皇子'</span>,<span class="string">'德玛西亚'</span>);</span><br><span class="line">huangzi.skill();</span><br><span class="line"><span class="comment">//查看2个不同对象中的同一skill方法是否相等 , 也就是说同一skill方法在2个对象中都占用了不同的内存空间</span></span><br><span class="line"><span class="built_in">console</span>.log(gailun.skill === huangzi.skill);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h5 id="构造函数扩展模式"><a href="#构造函数扩展模式" class="headerlink" title="构造函数扩展模式"></a>构造函数扩展模式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数扩展模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sayHi = sayHi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将对象中的公共方法放在全局作用域,但是会污染全局作用域,函数也不安全</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'zhangsan'</span>,<span class="number">12</span>);</span><br></pre></td></tr></table></figure><h5 id="构造函数寄生模式"><a href="#构造函数寄生模式" class="headerlink" title="构造函数寄生模式"></a>构造函数寄生模式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数寄生模式</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 和工厂模式的区别 : </span></span><br><span class="line"><span class="comment"> 1. 将名称改为具体对象</span></span><br><span class="line"><span class="comment"> 2. 使用 new 关键字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    o.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'打招呼.'</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'zhangsan'</span>,<span class="number">12</span>);</span><br></pre></td></tr></table></figure><blockquote><p>除了使用new操作符并把使用的包装函数叫做构造函数之外，这个模式跟工厂模式其实是一模一样的。构造函数在不返回值的情况下，默认会返回新对象实例。而通过在构造函数的末尾添加一个return语句，可以重写调用构造函数时返回的值。</p></blockquote><h5 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//稳妥构造函数模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">p_name,p_age</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//创建要返回的对象</span></span><br><span class="line">    <span class="keyword">var</span> p = &#123;&#125;;</span><br><span class="line">    <span class="comment">//定义私有属性和方法</span></span><br><span class="line">    <span class="keyword">var</span> name = p_name;</span><br><span class="line">    <span class="keyword">var</span> age = p_age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'计算器功能...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义公共方法</span></span><br><span class="line">    p.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'zhangsan'</span>,<span class="number">12</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.getName());<span class="comment">//zhangsan</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name);<span class="comment">//undefined</span></span><br><span class="line">person.sun();<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><blockquote><p>类似于闭包的处理方式,可以理解为Java中定义类的方式.</p></blockquote><p><strong>instanceof的使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = Person(<span class="string">'zhangsan'</span>,<span class="number">12</span>)</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Person(<span class="string">'zhangsan'</span>,<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><h5 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h5><p><strong>定义class</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(name,age,country) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.country = country;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义</span></span><br><span class="line">    attack()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'攻击.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hero = <span class="keyword">new</span> Hero(<span class="string">'亚索'</span>,<span class="number">12</span>,<span class="string">'艾欧尼亚'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hero.name);</span><br><span class="line">hero.attack();</span><br></pre></td></tr></table></figure><p><strong>class的继承</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age,breed) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.breed = breed;</span><br><span class="line">    &#125;</span><br><span class="line">    eat(food)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'吃'</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age,breed,sex) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age,breed);</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    lookHome()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'狗看家'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age,breed,weight) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age,breed);</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    catchMouse(name)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'抓到了'</span> + name);</span><br><span class="line">        <span class="keyword">super</span>.eat(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">'旺财'</span>,<span class="number">12</span>,<span class="string">'哈士奇'</span>,<span class="string">'公'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dog.name);</span><br><span class="line"><span class="built_in">console</span>.log(dog.breed);</span><br><span class="line">dog.lookHome();</span><br><span class="line">dog.eat(<span class="string">'骨头'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">'Tom'</span>,<span class="number">22</span>,<span class="string">'蓝猫'</span>,<span class="string">'公'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.breed);</span><br><span class="line">cat.catchMouse(<span class="string">'Jack'</span>);</span><br></pre></td></tr></table></figure><h5 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h5><blockquote><p> 同样看完原型后再来理解. 调用<code>Object.create()</code>来创建一个新对象。新对象的原型就是调用 <code>create</code> 方法时传入的第一个参数： </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;; </span><br><span class="line"><span class="comment">// a ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">Object</span>.create(a);</span><br><span class="line"><span class="comment">// b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"><span class="built_in">console</span>.log(b.a); <span class="comment">// 1 (继承而来)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">Object</span>.create(b);</span><br><span class="line"><span class="comment">// c ---&gt; b ---&gt; a ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// d ---&gt; null</span></span><br><span class="line"><span class="built_in">console</span>.log(d.hasOwnProperty); <span class="comment">// undefined, 因为d没有继承Object.prototype</span></span><br></pre></td></tr></table></figure><h5 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原型模式  等同于Object.create()的创建方式</span></span><br><span class="line"><span class="keyword">var</span> personPrototype = &#123;</span><br><span class="line">    init:<span class="function"><span class="keyword">function</span>(<span class="params">p_name</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = p_name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'name : '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">P</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    P.prototype = personPrototype;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> P();</span><br><span class="line">    p.init(name);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = createPerson(<span class="string">'zhangsan'</span>);</span><br></pre></td></tr></table></figure><h5 id="组合模式-重要"><a href="#组合模式-重要" class="headerlink" title="组合模式(重要)"></a>组合模式(重要)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组合模式 ----&gt; 在讲到使用原型添加多个方法处会讲到</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给Person.prototype定义多个方法,每个方法由逗号隔开.</span></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="comment">//修改原型后需要重新给原型中的构造赋值.</span></span><br><span class="line">    <span class="keyword">constructor</span>:Person,</span><br><span class="line">    sayHello:function()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">',向你打招呼'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    eat:<span class="function"><span class="keyword">function</span>(<span class="params">food</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'吃'</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="动态组合模式-了解"><a href="#动态组合模式-了解" class="headerlink" title="动态组合模式(了解)"></a>动态组合模式(了解)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.sayHi != <span class="string">'function'</span>) &#123;</span><br><span class="line">        Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" : "</span> + <span class="keyword">this</span>.age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype);</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'zhangsan'</span>,<span class="number">12</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype);</span><br></pre></td></tr></table></figure><h2 id="原型—Prototypes"><a href="#原型—Prototypes" class="headerlink" title="原型—Prototypes"></a>原型—Prototypes</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201029045206.png" alt="20201029045206"></p><blockquote><p>也就是说一个对象可以有2种成员类型 </p><ul><li>实例成员 : 直接存在于对象实例中</li><li>原型成员 : 从对象原型继承而来</li></ul></blockquote><table><thead><tr><th>属性</th><th>作用</th><th>用法</th></tr></thead><tbody><tr><td><strong>Constructor.prototype</strong></td><td>访问构造函数的原型</td><td>Person.prototype</td></tr><tr><td>object.<code>__proto__</code></td><td>访问对象的原型</td><td>obj.<code>__proto__</code></td></tr><tr><td>Prototype.constructor</td><td>访问原型所对应的构造函数</td><td>person.<code>__proto__</code>.constructor</td></tr></tbody></table><h4 id="案例解析"><a href="#案例解析" class="headerlink" title="案例解析"></a>案例解析</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name : <span class="string">'zhangsan'</span>,</span><br><span class="line">    age : <span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.toString());<span class="comment">//[object Object]</span></span><br></pre></td></tr></table></figure><blockquote><p>从上栗可以看出,在对象person中有2个实例成员name和age,并没有toString()方法的定义,但也成功执行了.方法toString()是由对象person继承来的原型成员. (是不是和Java中的Object很类似?)</p></blockquote><h4 id="对象和原型关系"><a href="#对象和原型关系" class="headerlink" title="对象和原型关系"></a>对象和原型关系</h4><blockquote><p>注意 : 这里的person对象的创建相当于, var person = new Object().所以person原型就是Object原型</p></blockquote><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201029052159.png" alt="20201029052159"></p><h4 id="解析过程"><a href="#解析过程" class="headerlink" title="解析过程"></a>解析过程</h4><blockquote><p>当person.toString()被调用时,会从对象实例开始搜索名为toString()的成员,如果没有,则继续搜索其原型对象,直到toString()方法被找到并执行.由此可见,对象person可以访问它原型中的每一个属性和方法.</p></blockquote><h4 id="hasOwnProperty-amp-in"><a href="#hasOwnProperty-amp-in" class="headerlink" title="hasOwnProperty &amp; in"></a>hasOwnProperty &amp; in</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201029052715.png" alt="20201029052715"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name : <span class="string">'zhangsan'</span>,</span><br><span class="line">    age : <span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.hasOwnProperty(<span class="string">'name'</span>));<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person.hasOwnProperty(<span class="string">'toString'</span>));<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'toString'</span> <span class="keyword">in</span> person);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>hasOwnProperty :  只搜索实例</li><li>in 操作符 : 既搜索也搜索原型</li></ul><h2 id="原型链—Prototype-Chains"><a href="#原型链—Prototype-Chains" class="headerlink" title="原型链—Prototype Chains"></a>原型链—Prototype Chains</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201029053037.png" alt="20201029053037"></p><h4 id="使用构造函数的prototype定义单个方法"><a href="#使用构造函数的prototype定义单个方法" class="headerlink" title="使用构造函数的prototype定义单个方法"></a>使用构造函数的prototype定义单个方法</h4><blockquote><p>在原型上添加方法可以将其理解为Java中的<code>static</code>关键字,将每个Person对象实例中公共的部分定义在原型中.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过Person的静态属性prototype来给Person对象定义方法</span></span><br><span class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' , 向你打招呼!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'老王'</span>,<span class="number">32</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'老八'</span>,<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.toString());;<span class="comment">//[object Object]</span></span><br><span class="line">person2.sayHello();<span class="comment">//老八 , 向你打招呼!</span></span><br></pre></td></tr></table></figure><h5 id="对象原型链关系"><a href="#对象原型链关系" class="headerlink" title="对象原型链关系"></a>对象原型链关系</h5><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201029062614.png" alt="20201029062614"></p><h4 id="对象-amp-原型-amp-构造函数之间的关系"><a href="#对象-amp-原型-amp-构造函数之间的关系" class="headerlink" title="对象&amp;原型&amp;构造函数之间的关系"></a>对象&amp;原型&amp;构造函数之间的关系</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030100533.png" alt="20201030100533"></p><h4 id="原型链图"><a href="#原型链图" class="headerlink" title="原型链图"></a>原型链图</h4><blockquote><p>在person原型中依然存在<code>__proto__</code>属性,意味着可以继续访问其原型.</p></blockquote><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030101628.png" alt="20201030101628"></p><h4 id="使用构造函数的prototype定义多个方法"><a href="#使用构造函数的prototype定义多个方法" class="headerlink" title="使用构造函数的prototype定义多个方法"></a>使用构造函数的prototype定义多个方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给Person.prototype定义多个方法,每个方法由逗号隔开.</span></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="comment">//修改原型后需要重新给原型中的构造赋值.</span></span><br><span class="line">    <span class="keyword">constructor</span>:Person,</span><br><span class="line">    sayHello:function()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">',向你打招呼'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    eat:<span class="function"><span class="keyword">function</span>(<span class="params">food</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'吃'</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'老八'</span>,<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">person.sayHello();</span><br><span class="line">person.eat(<span class="string">'奥里给'</span>);</span><br></pre></td></tr></table></figure><h4 id="基于原型给已有内置对象添加其原型方法应用"><a href="#基于原型给已有内置对象添加其原型方法应用" class="headerlink" title="基于原型给已有内置对象添加其原型方法应用"></a>基于原型给已有内置对象添加其原型方法应用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给已有的数组原型添加求和方法</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.getSum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line">        sum += <span class="keyword">this</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//求和</span></span><br><span class="line"><span class="keyword">var</span> result = arr.getSum()</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><blockquote><p>在原型链上查找属性比较耗时，对性能有副作用，这在性能要求苛刻的情况下很重要。另外，试图访问不存在的属性时会遍历整个原型链。 </p><p>所以在做某些操作的时候,最好先将对象中取得的属性值赋值给局部变量,这样会减少原型链遍历的次数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunction</span>(<span class="params">element1,className1,className2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element1.className == className1 || element1.className == className2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改后</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunction</span>(<span class="params">element1,className1,className2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> currentClassName = element1.className;</span><br><span class="line">    <span class="keyword">return</span> currentClassName == className1 || currentClassName == className2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201029111050.png" alt="20201029111050"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201028004154.png&quot; alt=&quot;20201028004154&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://fightlee.fun/categories/web/"/>
    
    
      <category term="js高级" scheme="http://fightlee.fun/tags/js%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>javascript高级(一)</title>
    <link href="http://fightlee.fun/javascript%E9%AB%98%E7%BA%A701.html"/>
    <id>http://fightlee.fun/javascript%E9%AB%98%E7%BA%A701.html</id>
    <published>2020-10-27T16:40:26.000Z</published>
    <updated>2020-10-28T08:25:54.722Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201028004154.png" alt="20201028004154"></p><a id="more"></a><h1 id="javascript高级-一"><a href="#javascript高级-一" class="headerlink" title="javascript高级(一)"></a>javascript高级(一)</h1><h2 id="事件Event"><a href="#事件Event" class="headerlink" title="事件Event"></a>事件Event</h2><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><blockquote><p>IE提出了名为<strong>事件冒泡</strong>的事件流。事件按照从最特定的事件目标到最不特定的事件目标(document对象)的顺序触发。可以想象把一颗石头投入水中，泡泡会一直从水底冒出水面。也就是说，事件会从最内层的元素开始发生，一直向上传播，直到document对象。 </p></blockquote><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><blockquote><p>网景提出另一种事件流名为<strong>事件捕获</strong>。事件从最不精确的对象(document 对象)开始触发，然后到最精确(也可以在窗口级别捕获事件，不过必须由开发人员特别指定)，与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。同样形象的比喻一下可以想象成警察逮捕屋子内的小偷，就要从外面一层层的进入到房子内。 </p></blockquote><h4 id="冒泡和捕获演示"><a href="#冒泡和捕获演示" class="headerlink" title="冒泡和捕获演示"></a>冒泡和捕获演示</h4><ul><li>冒泡</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#div1</span>&#123;</span></span><br><span class="line">height: 200px;</span><br><span class="line">width: 200px;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#f00</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-id">#div2</span>&#123;</span></span><br><span class="line">height: 150px;</span><br><span class="line">width: 150px;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#0f0</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-id">#div3</span>&#123;</span></span><br><span class="line">height: 75px;</span><br><span class="line">width: 75px;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#00f</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">class</span>=<span class="string">"btns"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span> <span class="attr">class</span>=<span class="string">"btns"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span> <span class="attr">class</span>=<span class="string">"btns"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelectorAll(<span class="string">'.btns'</span>).forEach(<span class="function"><span class="params">x</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">x.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'body'</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.documentElement.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'html'</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'window'</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击蓝色div3后查看结果</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div3</span><br><span class="line">div2</span><br><span class="line">div1</span><br><span class="line">body</span><br><span class="line">html</span><br><span class="line">window</span><br></pre></td></tr></table></figure><ul><li>捕获</li></ul><blockquote><p>通过 <code>addEventListener(arg1,arg2,arg3)</code>方法来监听事件捕获</p><p>arg1 : 监听的事件 , 如 click , dbclick等..</p><p>arg2 : 事件的回调函数</p><p>arg3 : 通过boolean类型的值来决定事件捕获还是冒泡,false为冒泡,true为捕获.默认false</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelectorAll(<span class="string">'.btns'</span>).forEach(<span class="function"><span class="params">x</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">        x.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</span></span><br><span class="line"><span class="actionscript">        &#125;,<span class="literal">true</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'body'</span>);</span></span><br><span class="line"><span class="actionscript">    &#125;,<span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.documentElement.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'html'</span>);</span></span><br><span class="line"><span class="actionscript">    &#125;,<span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'window'</span>);</span></span><br><span class="line"><span class="actionscript">    &#125;,<span class="literal">true</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样点击div3后查看结果</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">window</span><br><span class="line">html</span><br><span class="line">body</span><br><span class="line">div1</span><br><span class="line">div2</span><br><span class="line">div3</span><br></pre></td></tr></table></figure><h3 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h3><blockquote><p>通俗来说就是那些onclick,onsubmit这些监听器,就称之为事件处理程序.</p><p>在JavaScript中给事件处理程序分为4种</p><ul><li>HTML事件处理程序</li><li>DOM0级处理程序</li><li>DOM2级处理程序</li><li>IE事件处理程序</li></ul></blockquote><h4 id="HTML事件处理程序"><a href="#HTML事件处理程序" class="headerlink" title="HTML事件处理程序"></a>HTML事件处理程序</h4><blockquote><p>我们可以在HTML标签中监听用户所调用的事件,然后直接在标签内部进行处理.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"testDiv"</span> <span class="attr">onclick</span>=<span class="string">"this.innerHTML += 'HelloWorld'"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当onclick中要处理多个语句时,我们可以将这些语句定义到一个函数中,然后用HTML事件处理程序来调用该函数.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"testDiv"</span> <span class="attr">onclick</span>=<span class="string">"test();"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> testDiv = <span class="built_in">document</span>.querySelector(<span class="string">'#testDiv'</span>);</span></span><br><span class="line"><span class="actionscript">        testDiv.innerHTML += <span class="string">'Hello'</span>;<span class="comment">//这里千万不能使用this.innerHTML , this指向的不是div,而是window对象</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="DOM0级处理程序"><a href="#DOM0级处理程序" class="headerlink" title="DOM0级处理程序"></a>DOM0级处理程序</h4><blockquote><p>也可是作为JavaScript属性的处理程序,我们可以在JavaScript中获取元素,然后通过元素的属性来做事件处理.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"testDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> testDiv = <span class="built_in">document</span>.querySelector(<span class="string">'#testDiv'</span>);</span></span><br><span class="line"><span class="actionscript">    testDiv.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.innerHTML += <span class="string">'Hello'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>较HTML事件处理程序而言,处理事件更加简单,减少了HTML和JavaScript的混合,增加了代码的模块性,更容易维护.(有个小缺陷,如果用户在文档装载完之前与元素进行交互,那么该元素的事件处理程序可能还没有定义)</p></blockquote><h4 id="DOM0级处理程序的移除操作和重复绑定操作"><a href="#DOM0级处理程序的移除操作和重复绑定操作" class="headerlink" title="DOM0级处理程序的移除操作和重复绑定操作"></a>DOM0级处理程序的移除操作和重复绑定操作</h4><blockquote><p>可以将null赋值给DOM0级处理程序来实现移除操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">testDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML += <span class="string">'Hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line">testDiv.onclick = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><blockquote><p>DOM0级处理程序的绑定多个处理程序的操作是无效的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">testDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML += <span class="string">'Hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line">testDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML += <span class="string">'bye'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里只会生效下面的onclick函数.</p></blockquote><h4 id="事件处理的返回值"><a href="#事件处理的返回值" class="headerlink" title="事件处理的返回值"></a>事件处理的返回值</h4><blockquote><p>无论是HTML事件处理程序还是DOM0级处理程序,都使用其返回值来说明事件的处理方法.比如Form表单的onsubmit的事件处理程序返回值为false,那么可以阻止表单的提交.</p></blockquote><h4 id="DOM2级处理程序"><a href="#DOM2级处理程序" class="headerlink" title="DOM2级处理程序"></a>DOM2级处理程序</h4><blockquote><p>使用<code>addEventListener()</code>来给元素添加事件处理程序,<code>removeEventListener()</code>来删除元素上的事件处理函数.</p><p>在2级DOM中,事件的处理将会存在着事件传播,,传播分为三个阶段</p><ol><li>捕捉阶段,往下传递的阶段</li><li>目标上的事件处理程序执行</li><li>冒泡阶段,向上传递的阶段</li></ol><p>在事件的传播过程中,任何事件处理程序都可以调用当前事件中的<code>Event</code>对象的<code>stopPropagation()</code>方法来停止传播.</p><p>还有一些元素会有一些默认动作,比如<code>&lt;a&gt;</code>标签,在浏览器中的默认是进行超链接跳转,但是这个默认动作必须在事件传播的三个阶段完成后才会执行,当我们在事件传播过程中调用任意一个处理程序的<code>Event</code>对象的<code>preventDefault()</code>方法就可以阻止默认动作的发生.</p></blockquote><blockquote><p>对比0级处理程序,在同一元素上可以绑定多个2级处理程序</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testDiv = <span class="built_in">document</span>.querySelector(<span class="string">'#testDiv'</span>);</span><br><span class="line">testDiv.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML += <span class="string">'hello'</span>;</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">testDiv.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML += <span class="string">'world'</span>;</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><blockquote><p>移除事件的操作需要通过<code>removeEventListener()</code>来进行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testDiv = <span class="built_in">document</span>.querySelector(<span class="string">'#testDiv'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello_handler</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.innerHTML += <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line">testDiv.addEventListener(<span class="string">'click'</span>,hello_handler,<span class="literal">false</span>);</span><br><span class="line">testDiv.removeEventListener(<span class="string">'click'</span>,hello_handler,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h4 id="IE事件处理程序"><a href="#IE事件处理程序" class="headerlink" title="IE事件处理程序"></a>IE事件处理程序</h4><blockquote><p>IE事件处理程序使用<code>attachEvent()</code>方法和<code>detachEvent()</code>方法来为指定对象事件类型注册其处理函数,他们与<code>addEventListener</code>,<code>removeEventListener</code>类似,注意的是,他们不能处理事件捕捉,所以只有2个参数,并且处理的事件类型名称前需要加上<code>on</code>, 比如<code>onclick</code>,<code>onmouseover</code>.</p></blockquote><blockquote><p>IE9以下不支持<code>addEventListener()</code>等方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testDiv = <span class="built_in">document</span>.getElementById(<span class="string">'testDiv'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello_handler</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    testDiv.innerHTML += <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line">testDiv.attachEvent(<span class="string">'onclick'</span>,hello_handler);</span><br><span class="line">testDiv.detachEvent(<span class="string">'onclick'</span>,hello_handler);</span><br></pre></td></tr></table></figure><h4 id="处理不同事件处理程序的兼容问题"><a href="#处理不同事件处理程序的兼容问题" class="headerlink" title="处理不同事件处理程序的兼容问题"></a>处理不同事件处理程序的兼容问题</h4><blockquote><p>为了解决IE8不兼容的问题(事实上IE8现在也很少有公司去兼容),我们需要对<code>attachEvent</code>和<code>addEventListener</code>分别做处理</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"testDiv"</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> testDiv = <span class="built_in">document</span>.getElementById(<span class="string">'testDiv'</span>);</span></span><br><span class="line"><span class="actionscript">    addEvent(testDiv,<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.innerHTML += <span class="string">'hello'</span>;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    /*</span><br><span class="line">* target : 目标对象</span><br><span class="line">* eventType : 事件类型</span><br><span class="line">* handler : 回调函数</span><br><span class="line">* */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">addEvent</span><span class="params">(target,eventType,handler)</span></span>&#123;</span></span><br><span class="line">        if(target.addEventListener)&#123;</span><br><span class="line"><span class="actionscript">            target.addEventListener(eventType,handler,<span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">            target.attachEvent(<span class="string">'on'</span> + eventType,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">                handler.call(target);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件对象Event"><a href="#事件对象Event" class="headerlink" title="事件对象Event"></a>事件对象Event</h3><blockquote><p>在上文中多次提到事件处理程序中的<code>Event</code>对象.现在我们来具体的介绍Event</p></blockquote><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>type</td><td>发生的事件类型,<code>click</code>,<code>mouseover</code></td></tr><tr><td>target</td><td>事件目标对象</td></tr><tr><td>currentTarget</td><td>正在处理的事件的节点,也可以认为是事件目标对象</td></tr><tr><td>bubbles</td><td>布尔值,是否支持冒泡</td></tr><tr><td>cancelable</td><td>布尔值,是否具有取消默认动作的功能</td></tr><tr><td>returnValue</td><td>是否取消默认动作,false为取消</td></tr><tr><td>cancelBubble</td><td>是否取消冒泡,true为取消</td></tr><tr><td>eventPhase</td><td>事件传播的阶段</td></tr></tbody></table><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>stopPropagation()</td><td>停止事件冒泡</td></tr><tr><td>preventDefault()</td><td>阻止默认行为</td></tr><tr><td>stopImmediatePropagation()</td><td>停止事件冒泡的同时,阻止其他监听调用</td></tr></tbody></table><h4 id="Event对象的获取"><a href="#Event对象的获取" class="headerlink" title="Event对象的获取"></a>Event对象的获取</h4><blockquote><p>在事件处理程序的回调函数中加入参数e即可获取Event对象.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testDiv = <span class="built_in">document</span>.getElementById(<span class="string">'testDiv'</span>);</span><br><span class="line">testDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意 : IE8要获取event对象直接从window.event获取,不需要通过函数参数.考虑到兼容性的写法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testDiv = <span class="built_in">document</span>.getElementById(<span class="string">'testDiv'</span>);</span><br><span class="line">testDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e = e || event;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="事件目标对象"><a href="#事件目标对象" class="headerlink" title="事件目标对象"></a>事件目标对象</h4><ul><li>target : 触发事件的真实元素 </li><li>currentTarget :  绑定事件的元素,函数中的this指针即为currentTarget</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">ul&#123;</span><br><span class="line">width: 800px;</span><br><span class="line">height: 30px;</span><br><span class="line">background-color: green;</span><br><span class="line">&#125;</span><br><span class="line">ul li&#123;</span><br><span class="line">float: left;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 30px;</span><br><span class="line">list-style: none;</span><br><span class="line">background-color: red;</span><br><span class="line">margin-left: 20px;</span><br><span class="line">text-align: center;</span><br><span class="line">line-height: 30px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>搜狗<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> child = <span class="built_in">document</span>.getElementById(<span class="string">'child'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> parent = <span class="built_in">document</span>.getElementById(<span class="string">'parent'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">parent.onclick = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(e.target);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(e.currentTarget);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(e.target === <span class="keyword">this</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(e.currentTarget === <span class="keyword">this</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">child.onclick = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(e.target);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(e.currentTarget);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(e.target === <span class="keyword">this</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(e.currentTarget === <span class="keyword">this</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="事件代理-事件委托"><a href="#事件代理-事件委托" class="headerlink" title="事件代理|事件委托"></a>事件代理|事件委托</h4><blockquote><p>和Java中的代理模式很类似,元素本身能做到的事情交给代理来做.</p><p>修改上例代码,当鼠标移入li标签时修改li标签的颜色,移除则回复之前的颜色</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">   <span class="comment">//传统方式</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> childs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">    childs.forEach( <span class="function"><span class="params">x</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">        x.onmouseover = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            x.style.backgroundColor = <span class="string">'orange'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">        x.onmouseout = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            x.style.backgroundColor = <span class="string">'red'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="comment">//采用事件委托</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> parent = <span class="built_in">document</span>.querySelector(<span class="string">'#parent'</span>);</span></span><br><span class="line"><span class="actionscript">    parent.onmouseover = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line">        e = e || event;</span><br><span class="line"><span class="actionscript">        e.target.style.backgroundColor = <span class="string">'orange'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    parent.onmouseout = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line">        e = e || event;</span><br><span class="line"><span class="actionscript">        e.target.style.backgroundColor = <span class="string">'red'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="事件冒泡-1"><a href="#事件冒泡-1" class="headerlink" title="事件冒泡"></a>事件冒泡</h4><blockquote><p>在这里主要来讲述如何来阻止事件的冒泡,和冒泡带来的影响</p></blockquote><ul><li>event.stopPropagation() </li><li>event.cancelBubble</li><li>event.stopImmediatePropagation()</li></ul><h4 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h4><ul><li>event.preventDefault()</li><li>event.returnValue属性,返回false阻止</li><li>return false;</li></ul><h4 id="事件中的坐标"><a href="#事件中的坐标" class="headerlink" title="事件中的坐标"></a>事件中的坐标</h4><table><thead><tr><th>属性</th><th></th></tr></thead><tbody><tr><td>x/y,clientX/clientY</td><td>相对于body的左上角XY轴</td></tr><tr><td>offsetX,offsetY</td><td>相对于当前元素的XY轴</td></tr><tr><td>screenX/screenY</td><td>相对于事件源的的XY轴距离</td></tr><tr><td>pageX/pageY</td><td>相对于页面的XY轴</td></tr></tbody></table><h3 id="事件是否支持冒泡和具备阻止默认行为的功能"><a href="#事件是否支持冒泡和具备阻止默认行为的功能" class="headerlink" title="事件是否支持冒泡和具备阻止默认行为的功能"></a>事件是否支持冒泡和具备阻止默认行为的功能</h3><table><thead><tr><th>事件</th><th>冒泡</th><th>默认行为</th></tr></thead><tbody><tr><td>blur/focus</td><td>否</td><td></td></tr><tr><td>load/unload</td><td>否</td><td></td></tr><tr><td>DOMNodeInsertedIntoDocument/DOMNodeRemovedFromDocument</td><td>否</td><td></td></tr><tr><td>click</td><td></td><td>可以</td></tr><tr><td>mousedown/mouseup</td><td></td><td>可以</td></tr><tr><td>mouseout/mouseover</td><td></td><td>可以</td></tr><tr><td>submit</td><td></td><td>可以</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201028004154.png&quot; alt=&quot;20201028004154&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://fightlee.fun/categories/web/"/>
    
    
      <category term="js高级" scheme="http://fightlee.fun/tags/js%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>javaee-spring03</title>
    <link href="http://fightlee.fun/javaee-spring03.html"/>
    <id>http://fightlee.fun/javaee-spring03.html</id>
    <published>2020-10-26T15:08:19.000Z</published>
    <updated>2020-10-30T03:18:29.722Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030111805.png" alt="20201030111805"></p><a id="more"></a><h1 id="Javaee-Spring03"><a href="#Javaee-Spring03" class="headerlink" title="Javaee-Spring03"></a>Javaee-Spring03</h1><h2 id="本文概览"><a href="#本文概览" class="headerlink" title="本文概览"></a>本文概览</h2><ul><li>回顾&amp;工厂模式</li><li>代理模式<ul><li>静态代理</li><li>动态代理<ul><li>jdk中的动态代理</li><li>cglib动态代理</li></ul></li></ul></li><li>装饰设计模式</li></ul><h2 id="回顾-amp-工厂模式"><a href="#回顾-amp-工厂模式" class="headerlink" title="回顾&amp;工厂模式"></a>回顾&amp;工厂模式</h2><blockquote><p>在前2篇的文章中我们学习了Spring中的<strong>IOC(控制反转)</strong>和<strong>DI(依赖注入)</strong>,并分别使用<strong>xml</strong>和<strong>注解</strong>的形式对spring进行配置.</p><p>再来思考几个问题?</p><ul><li>ApplicationContext是个什么东西?</li><li>如何自己去构建一个BeanFactory?</li></ul></blockquote><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><h4 id="继承体系"><a href="#继承体系" class="headerlink" title="继承体系"></a>继承体系</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201027001942.png" alt="20201027001942"></p><blockquote><p>Spring有两个核心接口：BeanFactory和ApplicationContext，其中ApplicationContext是BeanFactory的子接口。他们都可代表Spring容器，Spring容器是生成Bean实例的工厂，并且管理容器中的Bean。 </p></blockquote><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><blockquote><p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p></blockquote><h4 id="工厂模式演示"><a href="#工厂模式演示" class="headerlink" title="工厂模式演示"></a>工厂模式演示</h4><blockquote><p>场景分析 : </p><ul><li>使用传统new的方式创建五菱,宝马,奔驰汽车对象不满足面向对象偷懒的原则,从而设计工厂创建对象,调用者告诉工厂需要什么车就创建什么车.</li><li>普通的工厂if…else和需要创建的对象耦合度高,维护性极低,采用配置文件来配置需要创建的对象</li><li>单例工厂生产单例对象,并在程序加载时就生产了所有对象.</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.demo;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WuLin</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"五菱上山了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaoMa</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"宝马上山了"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"奔驰上山了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(name == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Car car = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"baoma"</span>.equalsIgnoreCase(name)) &#123;</span><br><span class="line">car = <span class="keyword">new</span> BaoMa();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"benz"</span>.equalsIgnoreCase(name)) &#123;</span><br><span class="line">car = <span class="keyword">new</span> Benz();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"wuling"</span>.equalsIgnoreCase(name)) &#123;</span><br><span class="line">car = <span class="keyword">new</span> WuLin();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"没有您想要的车型"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> car;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">Car car = CarFactory.getCar(<span class="string">"baoma"</span>);</span><br><span class="line">car.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点 :"></a>优缺点 :</h5><ul><li>优点<ul><li>一个调用者想创建一个对象，只要知道其名称就可以了。 </li><li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 </li><li>屏蔽产品的具体实现，调用者只关心产品的接口。 </li></ul></li><li>缺点<ul><li>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。</li><li>对象和工厂的耦合程度太高,当需要增加/删除创建的对象时,需要频繁修改工厂类的工厂方法.</li></ul></li></ul><h4 id="简单工厂修改"><a href="#简单工厂修改" class="headerlink" title="简单工厂修改"></a>简单工厂修改</h4><blockquote><p> 使用xml文件配置需要创建的对象的方式来降低对象和工厂之间的耦合度</p></blockquote><p><strong>beans.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"baoma"</span> <span class="attr">class</span>=<span class="string">"com.java.demo.BaoMa"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"wulin"</span> <span class="attr">class</span>=<span class="string">"com.java.demo.WuLin"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"benzi"</span> <span class="attr">class</span>=<span class="string">"com.java.demo.Benz"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>CarFactory.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(name == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Car car = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//读取xml文件</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Document document = Jsoup.parse(new File(CarFactory.class.getClassLoader().getResource("beans.xml").getPath()), "utf-8");</span><br><span class="line">Elements elements = document.getElementsByTag(<span class="string">"bean"</span>);</span><br><span class="line"><span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line"><span class="keyword">if</span>(name.equals(element.attr(<span class="string">"id"</span>))) &#123;</span><br><span class="line">String className = element.attr(<span class="string">"class"</span>);</span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">Object obj = clazz.newInstance();</span><br><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Car) &#123;</span><br><span class="line">car = (Car)obj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> car;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果需要创建的对象都是单例对象,可以继续修改</p></blockquote><p><strong>SingleCarFactory.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleCarFactory</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">/*类一加载实例化所有xml中的对象,并保存到Map中*/</span></span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Document document = Jsoup.parse(new File(CarFactory.class.getClassLoader().getResource("beans.xml").getPath()), "utf-8");</span><br><span class="line">            Elements elements = document.getElementsByTag(<span class="string">"bean"</span>);</span><br><span class="line">            <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">                String key = element.attr(<span class="string">"id"</span>);</span><br><span class="line">                String className = element.attr(<span class="string">"class"</span>);</span><br><span class="line">                Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">                Object obj = clazz.newInstance();</span><br><span class="line">                map.put(key, obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getCar</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">Car car2 = (Car) SingleCarFactory.getCar(<span class="string">"baoma"</span>);</span><br><span class="line">Car car1 = (Car) SingleCarFactory.getCar(<span class="string">"baoma"</span>);</span><br><span class="line">System.out.println(car1 == car2);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><blockquote><p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。</p><p>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p></blockquote><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><blockquote><p>场景分析 : </p><ul><li>电脑杀毒功能需要操作复杂的命令行操作</li><li>通过安装安全卫士调用安全卫士的杀毒功能来达到杀毒的目的.</li><li>在杀毒的同时还能帮助用户查找漏洞,安装极速浏览器和精美广告等功能.</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.pro;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> 功能</span>&#123;</span><br><span class="line"><span class="keyword">void</span> 杀毒();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 电脑 <span class="keyword">implements</span> 功能</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 杀毒() &#123;</span><br><span class="line">System.out.println(<span class="string">"电脑正在杀毒..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 安全卫士 <span class="keyword">implements</span> 功能</span>&#123;</span><br><span class="line"><span class="keyword">private</span> 电脑 com;</span><br><span class="line"><span class="keyword">public</span> 安全卫士(电脑 com) &#123;</span><br><span class="line"><span class="keyword">this</span>.com = com;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 杀毒() &#123;</span><br><span class="line">安装浏览器();</span><br><span class="line">com.杀毒();</span><br><span class="line">查找漏洞();</span><br><span class="line">弹窗广告();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 安装浏览器() &#123;</span><br><span class="line">System.out.println(<span class="string">"装上250浏览器..运行速度提升50倍"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 查找漏洞() &#123;</span><br><span class="line">System.out.println(<span class="string">"正在努力查询电脑中的漏洞"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 弹窗广告() &#123;</span><br><span class="line">System.out.println(<span class="string">"屠龙宝刀,点击就送"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 用户 </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">安全卫士 safe250 = <span class="keyword">new</span> 安全卫士(<span class="keyword">new</span> 电脑());</span><br><span class="line">safe250.杀毒();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点 :"></a>优缺点 :</h5><ul><li>优点 <ul><li>职责清晰,分工明确.</li><li>扩展性强,在不修改原有的基础功能上进行了扩展.</li><li>更加智能化,更加简便.</li></ul></li><li>缺点<ul><li>当需要在每个功能上进行相同的扩展,代码冗余.</li><li>每增加一个被代理类,就需要同步增加一个代理,代码量陡增.</li></ul></li></ul><h4 id="JDK中的动态代理"><a href="#JDK中的动态代理" class="headerlink" title="JDK中的动态代理"></a>JDK中的动态代理</h4><blockquote><p>场景分析 : 在原有的业务基础上拓展其他功能.</p><ul><li>准备计算器类和计算功能接口</li><li>在计算器中的加减乘除方法上添加测试功能和日志功能.</li></ul></blockquote><h5 id="使用静态代理"><a href="#使用静态代理" class="headerlink" title="使用静态代理"></a>使用静态代理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*计算接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ICalucator</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;<span class="comment">//加</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;<span class="comment">//减</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;<span class="comment">//乘</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;<span class="comment">//除</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要增加功能的计算器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calucator</span> <span class="keyword">implements</span> <span class="title">ICalucator</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalucatorProxy</span> <span class="keyword">implements</span> <span class="title">ICalucator</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Calucator calucator;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CalucatorProxy</span><span class="params">(Calucator calucator)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.calucator = calucator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">test(a, b);</span><br><span class="line"><span class="keyword">int</span> value = calucator.plus(a, b);</span><br><span class="line">log(a,b,value);</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">test(a, b);</span><br><span class="line"><span class="keyword">int</span> value = calucator.minus(a, b);</span><br><span class="line">log(a,b,value);</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">test(a, b);</span><br><span class="line"><span class="keyword">int</span> value = calucator.mult(a, b);</span><br><span class="line">log(a,b,value);</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">test(a, b);</span><br><span class="line"><span class="keyword">int</span> value = calucator.div(a, b);</span><br><span class="line">log(a,b,value);</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加日志功能</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(Object...objects)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"传入的参数为 : a = "</span> + objects[<span class="number">0</span>] + <span class="string">" , b = "</span> + objects[<span class="number">1</span>] + <span class="string">" , 结果value = "</span> + objects[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加测试功能</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"传入的数字不合法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Calucator calucator = <span class="keyword">new</span> Calucator();</span><br><span class="line">CalucatorProxy proxy = <span class="keyword">new</span> CalucatorProxy(calucator);</span><br><span class="line">proxy.plus(-<span class="number">5</span>, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个缺点太明显了,每一个被代理类中的业务都需要加上代理类中的日志功能和测试功能,极其繁琐.</p></blockquote><h5 id="使用动态代理"><a href="#使用动态代理" class="headerlink" title="使用动态代理"></a>使用动态代理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JDKProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line"><span class="comment">//需要增强的类</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JDKProxy</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//创建代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拦截代理接口中的方法,并统一处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        test(Integer.parseInt(args[<span class="number">0</span>].toString()),Integer.parseInt(args[<span class="number">1</span>].toString()));</span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        log(args[<span class="number">0</span>],args[<span class="number">1</span>],result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加日志功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(Object...objects)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"传入的参数为 : a = "</span> + objects[<span class="number">0</span>] + <span class="string">" , b = "</span> + objects[<span class="number">1</span>] + <span class="string">" , 结果value = "</span> + objects[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加测试功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"传入的数字不合法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calucator calucator = <span class="keyword">new</span> Calucator();</span><br><span class="line">        JDKProxy handler = <span class="keyword">new</span> JDKProxy(calucator);</span><br><span class="line">        ICalucator proxy = (ICalucator) handler.getProxy();</span><br><span class="line">        proxy.plus(-<span class="number">5</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用反射获取被代理类中的每个方法,然后在<code>Object result = method.invoke(calucator, args);</code>这句话的上下嵌入需要加入的功能.就等于给被代理类中的每个方法全部加上该功能.</p></blockquote><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul><li>JDK中的动态代理需要被代理类实现代理接口</li></ul><h4 id="动态代理核心对象"><a href="#动态代理核心对象" class="headerlink" title="动态代理核心对象"></a>动态代理核心对象</h4><h5 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h5><blockquote><p>代理类.使用静态方法<code>newProxyInstance()</code>方法动态创建代理对象.</p></blockquote><h5 id="InvocationHandler"><a href="#InvocationHandler" class="headerlink" title="InvocationHandler"></a>InvocationHandler</h5><blockquote><p>处理器,拦截器.通过接口中的<code>invoke()</code>方法对被代理类中的所有方法进行拦截,并统一处理.</p></blockquote><h4 id="Cglib动态代理"><a href="#Cglib动态代理" class="headerlink" title="Cglib动态代理"></a>Cglib动态代理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要增加功能的计算器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calucator1</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minus</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成代理对象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line"><span class="comment">//需要增强的类</span></span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CglibProxy</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">enhancer.setSuperclass(target.getClass());</span><br><span class="line">enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">return</span> enhancer.create();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拦截</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">Object result = method.invoke(target, args);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Calucator1 calucator1 = <span class="keyword">new</span> Calucator1();</span><br><span class="line">CglibProxy cglibProxy = <span class="keyword">new</span> CglibProxy(calucator1);</span><br><span class="line">Calucator1 proxy = (Calucator1) cglibProxy.getProxy();</span><br><span class="line">System.out.println(proxy.plus(-<span class="number">5</span>, <span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>和JDK不同的是,需要增强的类,及被代理类不需要实现任何接口.</li></ul><h3 id="装饰设计模式"><a href="#装饰设计模式" class="headerlink" title="装饰设计模式"></a>装饰设计模式</h3><blockquote><p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p><p>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p></blockquote><h4 id="装饰设计模式演示"><a href="#装饰设计模式演示" class="headerlink" title="装饰设计模式演示"></a>装饰设计模式演示</h4><blockquote><p>场景分析 : </p><ul><li>程序中已有读取功能接口<code>Reader</code>,接口中有<code>read()</code>方法</li><li>设计文本文件读取器<code>TextFileReader</code>,音乐文件读取器<code>MusicFileReader</code>.都实现Reader接口</li><li>对<code>TextFileReader</code>,<code>MusicFileReader</code>的<code>read</code>功能进行增强,实现高速读取.</li></ul></blockquote><h5 id="使用继承增强"><a href="#使用继承增强" class="headerlink" title="使用继承增强"></a>使用继承增强</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Reader</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextFileReader</span> <span class="keyword">implements</span> <span class="title">Reader</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"读取文本文件"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicFileReader</span> <span class="keyword">implements</span> <span class="title">Reader</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"读取音乐文件"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedTextFileReader</span> <span class="keyword">extends</span> <span class="title">TextFileReader</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"增加缓冲区"</span>);</span><br><span class="line">System.out.println(<span class="string">"高速读取"</span>);</span><br><span class="line"><span class="keyword">super</span>.read();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedMusicFileReader</span> <span class="keyword">extends</span> <span class="title">MusicFileReader</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"增加缓冲区"</span>);</span><br><span class="line">System.out.println(<span class="string">"高速读取"</span>);</span><br><span class="line"><span class="keyword">super</span>.read();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>缺点 : 每增加一个<code>Reader</code>接口的实现类,就需要增加一个该实现类的子类来增强其<code>read()</code>功能</li></ul><h5 id="使用装饰设计模式增强"><a href="#使用装饰设计模式增强" class="headerlink" title="使用装饰设计模式增强"></a>使用装饰设计模式增强</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Reader</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextFileReader</span> <span class="keyword">implements</span> <span class="title">Reader</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"读取文本文件"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicFileReader</span> <span class="keyword">implements</span> <span class="title">Reader</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"读取音乐文件"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedReader</span> <span class="keyword">implements</span> <span class="title">Reader</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Reader reader;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedReader</span><span class="params">(Reader reader)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.reader = reader;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"增加缓冲区"</span>);</span><br><span class="line">System.out.println(<span class="string">"高速读取"</span>);</span><br><span class="line">reader.read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点 : 增加的<code>Reader</code>接口的实现类,如果需要增强<code>read()</code>功能只需要通过<code>BufferedReader</code>对象对其增强即可</li></ul><h4 id="代理模式和装饰模式"><a href="#代理模式和装饰模式" class="headerlink" title="代理模式和装饰模式"></a>代理模式和装饰模式</h4><ul><li>代理强调功能的控制</li><li>装饰强调功能的增强</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030111805.png&quot; alt=&quot;20201030111805&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="spring" scheme="http://fightlee.fun/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>前端复习篇-html02</title>
    <link href="http://fightlee.fun/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E7%AF%87-html02.html"/>
    <id>http://fightlee.fun/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E7%AF%87-html02.html</id>
    <published>2020-10-25T08:30:42.000Z</published>
    <updated>2020-10-26T17:48:02.376Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201024230008.png" alt="20201024230008"></p><a id="more"></a><h1 id="HTML5-二"><a href="#HTML5-二" class="headerlink" title="HTML5(二)"></a>HTML5(二)</h1><h3 id="音视频"><a href="#音视频" class="headerlink" title="音视频"></a>音视频</h3><h4 id="video"><a href="#video" class="headerlink" title="video"></a>video</h4><blockquote><p>播放视频</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">"800"</span> <span class="attr">height</span>=<span class="string">"500"</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">当前浏览器不支持 video直接播放</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h4><blockquote><p>播放音频</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"asserts/tianti.mp3"</span> <span class="attr">controls</span> <span class="attr">loop</span> <span class="attr">autoplay</span> <span class="attr">muted</span> <span class="attr">preload</span>=<span class="string">"auto"</span>&gt;</span></span><br><span class="line">    当前浏览器不支持audio</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><blockquote><p>HTML 的 <code>canvas</code> 元素提供了一个空白绘图区域，可以使用 APIs 比如 Canvas 2D 或 WebGL）来绘制图形。</p></blockquote><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"mcanvas"</span> <span class="attr">width</span>=<span class="string">"250"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">height</span>=<span class="string">"250"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid red;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><em>note</em>:  如果CSS的尺寸与初始画布的比例不一致,它会出现扭曲. 如果你绘制出来的图像是扭曲的, 尝试用width和height属性为<code>canvas</code>明确规定宽高，而不是使用CSS。 </p></blockquote><h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'mcanvas'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (canvas.getContext)&#123;<span class="comment">//判断浏览器是否支持canvas</span></span><br><span class="line">  <span class="comment">//如果支持</span></span><br><span class="line">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//如果不支持</span></span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例-画几条线"><a href="#案例-画几条线" class="headerlink" title="案例 : 画几条线"></a>案例 : 画几条线</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">startDraw</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> mcanvas = <span class="built_in">document</span>.querySelector(<span class="string">'#mcanvas'</span>);</span></span><br><span class="line">if(mcanvas.getContext)&#123;</span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> ctx = mcanvas.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="actionscript">ctx.fillStyle = <span class="string">'red'</span>;</span></span><br><span class="line">ctx.fillRect(50,50,150,50);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">ctx.fillStyle = <span class="string">'black'</span>;</span></span><br><span class="line">ctx.fillRect(50,150,150,50);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"startDraw();"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"mcanvas"</span> <span class="attr">width</span>=<span class="string">"250px"</span> <span class="attr">height</span>=<span class="string">"250px"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h4><ul><li>fillRect(x, y, width, height) : 绘制一个填充矩形</li><li>strokeRect(x, y, width, height) : 绘制一个矩形边框</li><li>clearRect(x, y, width, height) : 清除矩形区域</li></ul><h4 id="绘制路径"><a href="#绘制路径" class="headerlink" title="绘制路径"></a>绘制路径</h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>beginPath()</td><td>创建路径起始点</td></tr><tr><td>moveTo(x,y)</td><td>移动</td></tr><tr><td>lineTo(x,y)</td><td>画线</td></tr><tr><td>closePath()</td><td>封闭路径</td></tr><tr><td>fill()</td><td>填充</td></tr><tr><td>stroke()</td><td>描边</td></tr></tbody></table><h5 id="案例-绘制三角形"><a href="#案例-绘制三角形" class="headerlink" title="案例 : 绘制三角形"></a>案例 : 绘制三角形</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">startDraw</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> mcanvas = <span class="built_in">document</span>.querySelector(<span class="string">'#mcanvas'</span>);</span></span><br><span class="line">        if(mcanvas.getContext)&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> c = mcanvas.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//创建起始点</span></span></span><br><span class="line">            c.beginPath();</span><br><span class="line"><span class="actionscript">            <span class="comment">//移动</span></span></span><br><span class="line">            c.moveTo(50,50);</span><br><span class="line"><span class="actionscript">            <span class="comment">//开始画线</span></span></span><br><span class="line">            c.lineTo(150,50);</span><br><span class="line">            c.lineTo(50,150);</span><br><span class="line"><span class="actionscript">            <span class="comment">//关闭路径</span></span></span><br><span class="line">            c.closePath();</span><br><span class="line"><span class="actionscript">            <span class="comment">//填充</span></span></span><br><span class="line">            c.fill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h4><blockquote><p>一般用来绘制复杂有规律的图形。 </p></blockquote><h5 id="二阶贝塞尔曲线和三阶贝塞尔曲线区别"><a href="#二阶贝塞尔曲线和三阶贝塞尔曲线区别" class="headerlink" title="二阶贝塞尔曲线和三阶贝塞尔曲线区别"></a>二阶贝塞尔曲线和三阶贝塞尔曲线区别</h5><p>线性公式 :</p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201026213336.png" alt="20201026213336"></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/1cifang.gif" alt="1cifang"></p><p>二次方公式 : </p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201026213407.png" alt="20201026213407"></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/2cifang.gif" alt="2cifang"></p><p>三次方公式 : </p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201026213419.png" alt="20201026213419"></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/3cifang.gif" alt="3cifang"></p><h5 id="简单贝塞尔案例"><a href="#简单贝塞尔案例" class="headerlink" title="简单贝塞尔案例"></a>简单贝塞尔案例</h5><h5 id="使用二阶贝塞尔曲线"><a href="#使用二阶贝塞尔曲线" class="headerlink" title="使用二阶贝塞尔曲线"></a><strong>使用二阶贝塞尔曲线</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startDraw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'mcanvas'</span>);</span><br><span class="line">  <span class="keyword">if</span> (canvas.getContext) &#123;</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二阶贝塞尔曲线</span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo(<span class="number">75</span>, <span class="number">25</span>);</span><br><span class="line">    ctx.quadraticCurveTo(<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">62.5</span>);</span><br><span class="line">    ctx.quadraticCurveTo(<span class="number">25</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">    ctx.quadraticCurveTo(<span class="number">50</span>, <span class="number">120</span>, <span class="number">30</span>, <span class="number">125</span>);</span><br><span class="line">    ctx.quadraticCurveTo(<span class="number">60</span>, <span class="number">120</span>, <span class="number">65</span>, <span class="number">100</span>);</span><br><span class="line">    ctx.quadraticCurveTo(<span class="number">125</span>, <span class="number">100</span>, <span class="number">125</span>, <span class="number">62.5</span>);</span><br><span class="line">    ctx.quadraticCurveTo(<span class="number">125</span>, <span class="number">25</span>, <span class="number">75</span>, <span class="number">25</span>);</span><br><span class="line">    ctx.stroke();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用三阶贝塞尔曲线</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startDraw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'mcanvas'</span>);</span><br><span class="line">    <span class="keyword">if</span> (canvas.getContext)&#123;</span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//三阶贝塞尔曲线</span></span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(<span class="number">75</span>, <span class="number">40</span>);</span><br><span class="line">        ctx.bezierCurveTo(<span class="number">75</span>, <span class="number">37</span>, <span class="number">70</span>, <span class="number">25</span>, <span class="number">50</span>, <span class="number">25</span>);</span><br><span class="line">        ctx.bezierCurveTo(<span class="number">20</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">62.5</span>, <span class="number">20</span>, <span class="number">62.5</span>);</span><br><span class="line">        ctx.bezierCurveTo(<span class="number">20</span>, <span class="number">80</span>, <span class="number">40</span>, <span class="number">102</span>, <span class="number">75</span>, <span class="number">120</span>);</span><br><span class="line">        ctx.bezierCurveTo(<span class="number">110</span>, <span class="number">102</span>, <span class="number">130</span>, <span class="number">80</span>, <span class="number">130</span>, <span class="number">62.5</span>);</span><br><span class="line">        ctx.bezierCurveTo(<span class="number">130</span>, <span class="number">62.5</span>, <span class="number">130</span>, <span class="number">25</span>, <span class="number">100</span>, <span class="number">25</span>);</span><br><span class="line">        ctx.bezierCurveTo(<span class="number">85</span>, <span class="number">25</span>, <span class="number">75</span>, <span class="number">37</span>, <span class="number">75</span>, <span class="number">40</span>);</span><br><span class="line">        ctx.fill();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绘制圆弧"><a href="#绘制圆弧" class="headerlink" title="绘制圆弧"></a>绘制圆弧</h4><ul><li>arc(x, y, radius, startAngle, endAngle, anticlockwise)</li><li>arcTo(x1, y1, x2, y2, radius)</li></ul><blockquote><p>这里详细介绍一下arc方法，该方法有六个参数：<code>x,y</code>为绘制圆弧所在圆上的圆心坐标。<code>radius</code>为半径。<code>startAngle</code>以及<code>endAngle</code>参数用弧度定义了开始以及结束的弧度。这些都是以x轴为基准。参数<code>anticlockwise</code>为一个布尔值。为true时，是逆时针方向，否则顺时针方向。 </p><p><strong>注意：<code>arc()</code>函数中表示角的单位是弧度，不是角度。角度与弧度的js表达式:</strong></p><p><strong>弧度=(Math.PI/180)*角度。</strong></p></blockquote><h5 id="案例-歪嘴战神"><a href="#案例-歪嘴战神" class="headerlink" title="案例 : 歪嘴战神"></a>案例 : 歪嘴战神</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startDraw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'mcanvas'</span>);</span><br><span class="line">    <span class="keyword">if</span> (canvas.getContext)&#123;</span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">        ctx.beginPath();<span class="comment">// 开始绘制</span></span><br><span class="line">        ctx.arc(<span class="number">75</span>, <span class="number">75</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>, <span class="literal">true</span>); <span class="comment">//画脸</span></span><br><span class="line">        ctx.moveTo(<span class="number">110</span>, <span class="number">75</span>);</span><br><span class="line">        ctx.arc(<span class="number">75</span>, <span class="number">75</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">2</span>, <span class="literal">false</span>);<span class="comment">//口(顺时针)</span></span><br><span class="line">        ctx.moveTo(<span class="number">65</span>, <span class="number">65</span>);</span><br><span class="line">        ctx.arc(<span class="number">60</span>, <span class="number">65</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>, <span class="literal">true</span>);  <span class="comment">// 左眼</span></span><br><span class="line">        ctx.moveTo(<span class="number">95</span>, <span class="number">65</span>);</span><br><span class="line">        ctx.arc(<span class="number">90</span>, <span class="number">65</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>, <span class="literal">true</span>);  <span class="comment">// 右眼</span></span><br><span class="line">        ctx.closePath();</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="样式属性"><a href="#样式属性" class="headerlink" title="样式属性"></a>样式属性</h4><h5 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h5><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>fillStyle</td><td>设置填充颜色</td></tr><tr><td>strokeStyle</td><td>设置轮廓颜色</td></tr></tbody></table><h5 id="线型"><a href="#线型" class="headerlink" title="线型"></a>线型</h5><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>lineWidth</td><td>线条宽度</td></tr><tr><td>lineCap</td><td>线条末端样式,<code>butt</code> <code>round</code> <code>square</code>,默认为<code>butt</code></td></tr><tr><td>lineJoin</td><td>线条交汇处样式 , <code>round</code> <code>bevel</code> <code>miter</code>,默认为<code>miter</code></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startDraw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'mcanvas'</span>);</span><br><span class="line">    <span class="keyword">if</span> (canvas.getContext) &#123;</span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lineJoin&amp;lineCap</span></span><br><span class="line">        ctx.beginPath(); <span class="comment">// 开始绘制</span></span><br><span class="line">        ctx.lineWidth = <span class="number">10</span>;</span><br><span class="line">        ctx.lineCap = <span class="string">'square'</span></span><br><span class="line">        ctx.lineJoin = <span class="string">'round'</span>;</span><br><span class="line">        ctx.moveTo(<span class="number">50</span>,<span class="number">120</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">120</span>,<span class="number">50</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">180</span>,<span class="number">120</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.closePath();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h4><ul><li>fillText(text, x, y [, maxWidth])  指定位置填充文本.</li><li>strokeText(text, x, y [, maxWidth]) 指定位置绘制文本边框</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startDraw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'mcanvas'</span>);</span><br><span class="line">    <span class="keyword">if</span> (canvas.getContext) &#123;</span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">        <span class="comment">//设置字体颜色</span></span><br><span class="line">        ctx.fillStyle = <span class="string">'red'</span>;</span><br><span class="line">        <span class="comment">//设置字体样式</span></span><br><span class="line">        ctx.font = <span class="string">'40px Arial'</span></span><br><span class="line">        <span class="comment">//填充字体</span></span><br><span class="line">        ctx.fillText(<span class="string">'Hello'</span>,<span class="number">20</span>,<span class="number">80</span>);</span><br><span class="line">        <span class="comment">//字体描边</span></span><br><span class="line">        ctx.strokeText(<span class="string">'Hello'</span>,<span class="number">20</span>,<span class="number">160</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h4><ul><li><p>drawImage(image, x, y) : 指定位置绘制image图片  —- 绘图</p></li><li><p>drawImage(image, x, y, width, height) : 指定缩放大小 —-缩放</p></li><li><p>drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) : </p><blockquote><p> 第一个参数和其它的是相同的，都是一个图像或者另一个 canvas 的引用.前4个是定义图像源的切片位置和大小，后4个则是定义切片的目标显示位置和大小。 </p></blockquote></li></ul><h5 id="创建图片"><a href="#创建图片" class="headerlink" title="创建图片"></a>创建图片</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();   <span class="comment">// 创建一个&lt;img&gt;元素</span></span><br><span class="line">img.src = <span class="string">'myImage.png'</span>; <span class="comment">// 设置图片源地址</span></span><br></pre></td></tr></table></figure><h5 id="绘制图片-1"><a href="#绘制图片-1" class="headerlink" title="绘制图片"></a>绘制图片</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ctx = document.getElementById(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.onload = function()&#123;</span><br><span class="line">        ctx.drawImage(img,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(<span class="number">30</span>,<span class="number">96</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">70</span>,<span class="number">66</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">103</span>,<span class="number">76</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">170</span>,<span class="number">15</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">    img.src = <span class="string">'images/backdrop.png'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="切图"><a href="#切图" class="headerlink" title="切图"></a>切图</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startDraw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//绘制图片</span></span><br><span class="line">        context.beginPath();</span><br><span class="line">        context.drawImage(img,<span class="number">27</span>,<span class="number">27</span>,<span class="number">64</span>,<span class="number">64</span>,<span class="number">27</span>,<span class="number">27</span>,<span class="number">64</span>,<span class="number">64</span>);</span><br><span class="line">        context.closePath();</span><br><span class="line">    &#125;</span><br><span class="line">    img.src = <span class="string">'img/bofangqi.png'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例-绘制马保国"><a href="#案例-绘制马保国" class="headerlink" title="案例 : 绘制马保国"></a>案例 : 绘制马保国</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//绘制图片</span></span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.drawImage(img,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">    context.closePath();</span><br><span class="line">    <span class="comment">//绘制文本</span></span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.fillStyle = <span class="string">'gold'</span>;</span><br><span class="line">    context.font = <span class="string">'18px 微软雅黑'</span>;</span><br><span class="line">    context.fillText(<span class="string">'年轻人要耗子喂汁!'</span>,<span class="number">100</span>,<span class="number">280</span>);</span><br><span class="line">    context.closePath();</span><br><span class="line">&#125;</span><br><span class="line">img.src = <span class="string">'img/mabaoguo.jpg'</span>;</span><br></pre></td></tr></table></figure><h5 id="案例-制作表情包"><a href="#案例-制作表情包" class="headerlink" title="案例 : 制作表情包"></a>案例 : 制作表情包</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入文字"</span> <span class="attr">id</span>=<span class="string">"imgText"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//绘制图片</span></span></span><br><span class="line">drawImg();</span><br><span class="line"><span class="actionscript"><span class="comment">//监听表单输入内容改变事件</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">'#imgText'</span>).onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">                drawText(<span class="keyword">this</span>.value);</span></span><br><span class="line">drawImg();</span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">//绘图</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">drawImg</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> context = <span class="built_in">document</span>.querySelector(<span class="string">'#canvas'</span>).getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="actionscript">img.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">context.drawImage(img,50,50);</span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript">img.src = <span class="string">'img/gaoxiao.png'</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">//绘制文字</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">drawText</span><span class="params">(text)</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> context = <span class="built_in">document</span>.querySelector(<span class="string">'#canvas'</span>).getContext(<span class="string">'2d'</span>);</span></span><br><span class="line">context.clearRect(0,0,500,500);</span><br><span class="line"><span class="actionscript">context.fillStyle = <span class="string">'red'</span>;</span></span><br><span class="line"><span class="actionscript">context.font = <span class="string">'30px 微软雅黑'</span>;</span></span><br><span class="line">context.fillText(text,100,330);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="save-amp-restore"><a href="#save-amp-restore" class="headerlink" title="save()&amp;restore()"></a>save()&amp;restore()</h4><ul><li>save() : 保存当前绘制状态</li><li>restore() : 恢复之前状态</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">  ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">150</span>);   <span class="comment">// 使用默认设置绘制一个矩形</span></span><br><span class="line">  ctx.save();                  <span class="comment">// 保存默认状态</span></span><br><span class="line"></span><br><span class="line">  ctx.fillStyle = <span class="string">'#09F'</span>       <span class="comment">// 在原有配置基础上对颜色做改变</span></span><br><span class="line">  ctx.fillRect(<span class="number">15</span>,<span class="number">15</span>,<span class="number">120</span>,<span class="number">120</span>); <span class="comment">// 使用新的设置绘制一个矩形</span></span><br><span class="line"></span><br><span class="line">  ctx.save();                  <span class="comment">// 保存当前状态</span></span><br><span class="line">  ctx.fillStyle = <span class="string">'#FFF'</span>       <span class="comment">// 再次改变颜色配置</span></span><br><span class="line">  ctx.globalAlpha = <span class="number">0.5</span>;    </span><br><span class="line">  ctx.fillRect(<span class="number">30</span>,<span class="number">30</span>,<span class="number">90</span>,<span class="number">90</span>);   <span class="comment">// 使用新的配置绘制一个矩形</span></span><br><span class="line"></span><br><span class="line">  ctx.restore();               <span class="comment">// 重新加载之前的颜色状态</span></span><br><span class="line">  ctx.fillRect(<span class="number">45</span>,<span class="number">45</span>,<span class="number">60</span>,<span class="number">60</span>);   <span class="comment">// 使用上一次的配置绘制一个矩形</span></span><br><span class="line"></span><br><span class="line">  ctx.restore();               <span class="comment">// 加载默认颜色配置</span></span><br><span class="line">  ctx.fillRect(<span class="number">60</span>,<span class="number">60</span>,<span class="number">30</span>,<span class="number">30</span>);   <span class="comment">// 使用加载的配置绘制一个矩形</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="小案例-绘制验证码"><a href="#小案例-绘制验证码" class="headerlink" title="小案例 : 绘制验证码"></a>小案例 : 绘制验证码</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"startDraw()"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"80"</span> <span class="attr">style</span>=<span class="string">"border:1px solid lightgray"</span> <span class="attr">onclick</span>=<span class="string">"startDraw()"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">startDraw</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//0.准备字体数组</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> texts = <span class="string">'1234567890abcdefghijlmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> textArray = texts.split(<span class="string">''</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//获取canvas</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//绘制前先清除内容</span></span></span><br><span class="line">                context.clearRect(0,0,200,80);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//1.绘制矩形背景</span></span></span><br><span class="line">                context.beginPath();</span><br><span class="line"><span class="actionscript">                context.fillStyle = <span class="string">'lightgray'</span>;</span></span><br><span class="line">                context.moveTo(0,0);</span><br><span class="line">                context.fillRect(0,0,200,80);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//2.绘制干扰线</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">15</span>;i++)&#123;</span></span><br><span class="line">                    context.beginPath();</span><br><span class="line">                    context.strokeStyle = getRandomColor();</span><br><span class="line">                    context.moveTo(getRandomNumber(200),getRandomNumber(80));</span><br><span class="line">                    context.lineTo(getRandomNumber(200),getRandomNumber(80));</span><br><span class="line">                    context.stroke();</span><br><span class="line">                    context.closePath();</span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">//3.绘制字体</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">6</span> ; i++)&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> text = textArray[getRandomNumber(textArray.length - <span class="number">1</span>)];</span></span><br><span class="line">                    context.beginPath();</span><br><span class="line"><span class="actionscript">                    <span class="comment">//保存当前状态</span></span></span><br><span class="line">                    context.save();</span><br><span class="line">                    context.fillStyle = getRandomColor();</span><br><span class="line"><span class="actionscript">                    context.font = <span class="string">'40px Arial'</span>;</span></span><br><span class="line"><span class="actionscript">                    context.textAlign = <span class="string">'center'</span>;</span></span><br><span class="line"><span class="javascript">                    context.rotate(getRandomNumber(<span class="number">10</span>) * <span class="built_in">Math</span>.PI / <span class="number">180</span>)</span></span><br><span class="line">                    context.fillText(text,(i + 1) * 27,50);</span><br><span class="line"><span class="actionscript">                    <span class="comment">//旋转一次后回到最初状态</span></span></span><br><span class="line">                    context.restore();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//获取随机颜色</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">getRandomColor</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">'rgb('</span>+getRandomNumber(<span class="number">255</span>)+<span class="string">','</span>+getRandomNumber(<span class="number">255</span>)+<span class="string">','</span>+getRandomNumber(<span class="number">255</span>)+<span class="string">')'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">//获取随机0~number数字</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">getRandomNumber</span><span class="params">(number)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (number + <span class="number">1</span>));</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201024230008.png&quot; alt=&quot;20201024230008&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://fightlee.fun/categories/web/"/>
    
    
      <category term="html5" scheme="http://fightlee.fun/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>前端复习篇-html01</title>
    <link href="http://fightlee.fun/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E7%AF%87-html01.html"/>
    <id>http://fightlee.fun/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E7%AF%87-html01.html</id>
    <published>2020-10-24T14:58:01.000Z</published>
    <updated>2020-10-28T05:33:16.951Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201024230008.png" alt="20201024230008"></p><a id="more"></a><h1 id="HTML5-一"><a href="#HTML5-一" class="headerlink" title="HTML5(一)"></a>HTML5(一)</h1><h4 id="html5兼容性"><a href="#html5兼容性" class="headerlink" title="html5兼容性"></a>html5兼容性</h4><blockquote><p>一些浏览器可能对Html5并不友好,所以我们需要一些特殊手段来保证Html5在低版本浏览器上的运行</p></blockquote><h5 id="方法1-使用CSS"><a href="#方法1-使用CSS" class="headerlink" title="方法1 : 使用CSS"></a>方法1 : 使用CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span>, <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">hgroup</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法2-使用script脚本"><a href="#方法2-使用script脚本" class="headerlink" title="方法2 : 使用script脚本"></a>方法2 : 使用script脚本</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">&lt;script src="http://apps.bdimg.com/libs/html5shiv/3.7/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><h5 id="方法3-添加noscript标签给与适当提示"><a href="#方法3-添加noscript标签给与适当提示" class="headerlink" title="方法3 : 添加noscript标签给与适当提示"></a>方法3 : 添加noscript标签给与适当提示</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment"> &lt;script src="http://apps.bdimg.com/libs/html5shiv/3.7/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">  &lt;noscript&gt;</span></span><br><span class="line"><span class="comment">     &lt;strong&gt;Warning !&lt;/strong&gt;</span></span><br><span class="line"><span class="comment">     Because your browser does not support HTML5, some elements are simulated using JScript.</span></span><br><span class="line"><span class="comment">     Unfortunately your browser has disabled scripting. Please enable it in order to display this page.</span></span><br><span class="line"><span class="comment">  &lt;/noscript&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="html5语义话标签"><a href="#html5语义话标签" class="headerlink" title="html5语义话标签"></a>html5语义话标签</h4><table><thead><tr><th>标签名</th><th>描述</th></tr></thead><tbody><tr><td><strong>header</strong></td><td>放在页面或布局的顶部，一般放置导航栏或标题.</td></tr><tr><td><strong>nav</strong></td><td>页面导航,一般在header或者aside中使用.</td></tr><tr><td><strong>aside</strong></td><td>放在网站侧边区域,比如侧边栏,广告,友情链接.</td></tr><tr><td><strong>footer</strong></td><td>底部信息,比如版权,联系方式等.</td></tr><tr><td>article</td><td>放在一个独立,完整的区域,比如一篇新闻,一个帖子,一条评论,可以认为是更强调独立性区域性的section.</td></tr><tr><td>hgroup</td><td>用来放置一组连续的标题.</td></tr><tr><td><strong>section</strong></td><td>表示一组或者一节内容,或者就是一块区域.</td></tr><tr><td><strong>main</strong></td><td>表示页面的主体内容区域,一个页面只能有一个main</td></tr><tr><td>mark</td><td>高亮文本</td></tr><tr><td>figure&amp;figcaption</td><td>规定独立的流内容(一些图片,图标,代码等)&amp;标题</td></tr><tr><td>address</td><td>个人邮箱地址信息</td></tr><tr><td>progress</td><td>进度,max最大值,value当前进度</td></tr></tbody></table><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201025000435.png" alt="20201025000435"></p><h4 id="html5中新属性"><a href="#html5中新属性" class="headerlink" title="html5中新属性"></a>html5中新属性</h4><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>contenteditable</td><td>内容是否可编辑</td></tr><tr><td>data-*</td><td>嵌入自定义数据</td></tr><tr><td>draggable</td><td>内容是否可拖拽</td></tr><tr><td>hidden</td><td>隐藏元素</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-name</span>=<span class="string">"zhangsan"</span> <span class="attr">id</span>=<span class="string">"labelDiv"</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"editDiv"</span> <span class="attr">contenteditable</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid red; width: 150px;height: 50px;overflow: scroll;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">hidden</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> labelDiv = <span class="built_in">document</span>.getElementById(<span class="string">"labelDiv"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> editDiv = <span class="built_in">document</span>.getElementById(<span class="string">"editDiv"</span>)</span></span><br><span class="line">    editDiv.innerHTML = labelDiv.dataset.name</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="html5中表单新特性"><a href="#html5中表单新特性" class="headerlink" title="html5中表单新特性"></a>html5中表单新特性</h4><ul><li>datalist</li></ul><blockquote><p><code>datalist</code>标签规定了 <code>input</code>元素可能的选项列表。</p><p><code>datalist</code>标签被用来在为<code>input</code>元素提供”自动完成”的特性。用户能看到一个下拉列表，里边的选项是预先定义好的，将作为用户的输入数据。</p><p>请使用<code>input</code>元素的 list 属性来绑定<code>datalist</code>元素。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"keywords"</span> <span class="attr">list</span>=<span class="string">"keywordsList"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"keywordsList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"java"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"python"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"html"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="html5中表单-amp-输入框新属性"><a href="#html5中表单-amp-输入框新属性" class="headerlink" title="html5中表单&amp;输入框新属性"></a>html5中表单&amp;输入框新属性</h4><blockquote><p>除了添加一些input中验证的新属性,如</p><ul><li>required</li><li>pattern</li><li>placeholder</li></ul><p>还有input中一些新的type类型</p><ul><li>email : 邮箱</li><li>color : 取色器</li><li>date : 日期</li><li>range : 范围选择框 , 进度调节器</li><li>tel : 电话</li><li>time : 时间</li><li>week : 周</li><li>month : 月</li><li>url : url地址</li></ul></blockquote><h5 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h5><table><thead><tr><th>form属性</th><th>描述</th></tr></thead><tbody><tr><td>autocomplete</td><td>自动补全,默认开启 autocomplete = “on”</td></tr><tr><td>novalidate</td><td>不需要验证.</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">autocomplete</span>=<span class="string">"on"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">    用户名 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    邮箱 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h5><table><thead><tr><th>input属性</th><th>描述</th></tr></thead><tbody><tr><td>formmethod</td><td>提交方式</td></tr><tr><td>formenctype</td><td>提交内容类型</td></tr><tr><td>formaction</td><td>提交路径</td></tr><tr><td>formnovalidate</td><td>提交不需要验证</td></tr><tr><td>formtarget</td><td>打开方式 , “_self”,”_blank”</td></tr><tr><td>autofocus</td><td>自动聚焦</td></tr></tbody></table><h4 id="html5中DOM操作"><a href="#html5中DOM操作" class="headerlink" title="html5中DOM操作"></a>html5中DOM操作</h4><blockquote><p>和jquery一样</p></blockquote><ul><li>querySelector(‘选择器’) : 获取单个元素</li><li>querySelectorAll(‘选择器’) : 获取多个元素</li></ul><h4 id="classList"><a href="#classList" class="headerlink" title="classList"></a>classList</h4><blockquote><p>classList 属性返回元素的类名，作为 DOMTokenList 对象。</p><p>该属性用于在元素中添加，移除及切换 CSS 类。</p><p>classList 属性是只读的，但你可以使用 add() 和 remove() 方法修改它。</p></blockquote><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>add(<em>class1, class2, …</em>)</td><td>添加一个或者多个类名</td></tr><tr><td>boolean contains(<em>class</em>)</td><td>判断是否存在指定类名</td></tr><tr><td>remove(<em>class1, class2, …</em>)</td><td>移除一个或者多个类名</td></tr><tr><td>toggle(<em>class,</em>boolean flag)</td><td>切换类名,第二个值代表是否强制添加或移除</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.active</span>&#123;</span></span><br><span class="line">background-color: lightblue;</span><br><span class="line">color: brown;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"testDiv"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>演示DIV<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"toggleClass();"</span>&gt;</span>切换样式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">toggleClass</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> testDiv = <span class="built_in">document</span>.querySelector(<span class="string">'#testDiv'</span>);</span></span><br><span class="line"><span class="actionscript">testDiv.classList.toggle(<span class="string">"active"</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="data"><a href="#data" class="headerlink" title="data-*"></a>data-*</h4><blockquote><p>data-* 属性用于存储页面或应用程序的私有自定义数据。</p><p>data-* 属性赋予我们在所有 HTML 元素上嵌入自定义 data 属性的能力。</p><p>存储的（自定义）数据能够被页面的 JavaScript 中利用，以创建更好的用户体验（不进行 Ajax 调用或服务器端数据库查询）。</p><p>data-* 属性包括两部分：</p><ul><li>属性名不应该包含任何大写字母，并且在前缀 “data-“ 之后必须有至少一个字符</li><li>属性值可以是任意字符串</li><li>data-*后接入了多个字符串,调用时需去除-,并改为驼峰进行使用.</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>获取data属性的值<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-user-name</span>=<span class="string">"zhangsan"</span> <span class="attr">id</span>=<span class="string">"divEle"</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"getData"</span>&gt;</span>GetData<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>根据button中的data的值切换图片显示<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">data-img-url</span> = <span class="string">"img/1.jpg"</span>&gt;</span>显示图片1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">data-img-url</span> = <span class="string">"img/2.jpg"</span>&gt;</span>显示图片2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">data-img-url</span> = <span class="string">"img/3.jpg"</span>&gt;</span>显示图片3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"bgImg"</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">"暂时没有图片信息"</span> <span class="attr">width</span>=<span class="string">"50px"</span> <span class="attr">height</span>=<span class="string">"50px"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>设置data属性值<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"setDate"</span>&gt;</span>SetData<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"testDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//取出div中的data值显示到p标签中</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">'#getData'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">'#p1'</span>).innerHTML = <span class="built_in">document</span>.querySelector(<span class="string">'#divEle'</span>).dataset.userName;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">//获取所有按钮添加点击事件,并动态切换img图片</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelectorAll(<span class="string">'.btn'</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">x.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">'#bgImg'</span>).src = x.dataset.imgUrl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">//设置testDiv的属性值</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">'#setDate'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">'#testDiv'</span>).dataset.url = <span class="string">'http://www.baidu.com'</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h4><h5 id="File-介绍"><a href="#File-介绍" class="headerlink" title="File 介绍"></a>File 介绍</h5><blockquote><p>文件<strong><code>File</code></strong>接口提供有关文件的信息，并允许网页中的 JavaScript 访问其内容</p></blockquote><h5 id="File-构造"><a href="#File-构造" class="headerlink" title="File 构造"></a>File 构造</h5><blockquote><p>File() 返回一个文件对象.</p></blockquote><h5 id="File-属性"><a href="#File-属性" class="headerlink" title="File 属性"></a>File 属性</h5><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>File.lastModified</td><td>返回当前File对象的最后修改时间,返回类型为毫秒值</td></tr><tr><td>File.lastModifiedDate</td><td>返回当前File对象的最后修改时间,返回类型为<code>Date</code></td></tr><tr><td>File.name</td><td>File对象引用文件的名称</td></tr><tr><td>File.size</td><td>文件大小</td></tr><tr><td>File.type</td><td>MIME类型</td></tr><tr><td>File.webkitRelativePath</td><td>File相关的path或者URL</td></tr></tbody></table><h5 id="FileReader-介绍"><a href="#FileReader-介绍" class="headerlink" title="FileReader 介绍"></a>FileReader 介绍</h5><blockquote><p>对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 <code>File</code>或 <code>Blob</code> 对象指定要读取的文件或数据。 </p></blockquote><h5 id="FileReader-构造"><a href="#FileReader-构造" class="headerlink" title="FileReader 构造"></a>FileReader 构造</h5><blockquote><p>FileReader() 返回一个文件读取对象</p></blockquote><h5 id="FileReader-属性"><a href="#FileReader-属性" class="headerlink" title="FileReader 属性"></a>FileReader 属性</h5><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>FileReader.error</td><td>读取文件时发生的错误</td></tr><tr><td>FileReader.readyState</td><td>状态值, <code>0</code>:没有加载任何数据 <code>1</code>:数据正在加载 <code>2</code>:加载完成 ,对应的常量名 : <code>EMPTY</code>,<code>LOADING</code>,<code>DONE</code></td></tr><tr><td>FileReader.result</td><td>文件的内容.<strong>该属性必须在读取完成后才有效</strong></td></tr></tbody></table><h5 id="FileReader中的事件"><a href="#FileReader中的事件" class="headerlink" title="FileReader中的事件"></a>FileReader中的事件</h5><table><thead><tr><th>事件名</th><th>描述</th></tr></thead><tbody><tr><td>FileReader.onabort</td><td>读取操作被中断时触发</td></tr><tr><td>FileReader.onerror</td><td>读取操作发生错误时触发</td></tr><tr><td>FileReader.onload</td><td>读取操作完成时触发</td></tr><tr><td>FileReader.onloadstart</td><td>读取操作开始时触发</td></tr><tr><td>FileReader.onloadend</td><td>读取操作结束时（要么成功，要么失败）触发</td></tr><tr><td>FileReader.onprogress</td><td>在读取<code>Blob</code>时触发</td></tr></tbody></table><h5 id="FileReader中的方法"><a href="#FileReader中的方法" class="headerlink" title="FileReader中的方法"></a>FileReader中的方法</h5><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>FileReader.abort()</td><td>中止操作,返回时,readyState属性为<code>DONE</code></td></tr><tr><td>FileReader.readAsArrayBuffer()</td><td>开始读取,读取完成后,result属性中<code>ArrayBuffer</code>对象.</td></tr><tr><td>FileReader.readAsBinaryString)</td><td>开始读取,读取完成后,result属性中为原始二进制数据内容.</td></tr><tr><td>FileReader.readAsDataURL()</td><td>开始读取,读取完成后,result属性中为一个<code>data</code>:URL格式的Base64字符串以表示所读取文件的内容</td></tr><tr><td>FileReader.readAsText()</td><td>开始读取,读取完成后,result属性中为字符串文本内容</td></tr></tbody></table><h5 id="通过input中type为file来读取文件"><a href="#通过input中type为file来读取文件" class="headerlink" title="通过input中type为file来读取文件"></a>通过input中type为file来读取文件</h5><blockquote><p>步骤 : </p><ol><li>监听上传文件框的<code>onchange</code>事件</li><li>调用输入框中的<code>files</code>属性获取文件列表(<strong>可以通过multiple属性设置上传多个文件</strong>)</li><li>遍历文件<code>FileList</code>获取上传的文件列表</li><li>创建<code>FileReader</code>,调用<code>readAsText</code>方法读取文本内容</li><li>监听<code>FileReader</code>的<code>onload</code>事件,当文件读取完成,调用<code>result</code>属性读取文件内容</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    上传文件 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload"</span> <span class="attr">id</span>=<span class="string">"upload"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'#upload'</span>).onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(<span class="keyword">this</span>.files.length &gt; <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="keyword">this</span>.files.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> file = <span class="keyword">this</span>.files[i];</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line"><span class="actionscript">                fileReader.readAsText(file,<span class="string">'gbk'</span>);</span></span><br><span class="line"><span class="actionscript">                fileReader.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.result);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="通过拖拽来读取文件"><a href="#通过拖拽来读取文件" class="headerlink" title="通过拖拽来读取文件"></a>通过拖拽来读取文件</h5><blockquote><p>步骤 : </p><ol><li>监听div拖拽事件<code>ondragover</code>和<code>ondrop</code><ul><li>ondragover : 当有被拖拽的元素在监听的元素上时</li><li>ondrop : 当被拖拽的元素放下时</li></ul></li><li>在<code>function</code>中的<code>event</code>参数中获取<code>DataTransfer</code>对象</li><li>通过<code>DataTransfer</code>对象中的<code>files</code>属性获取文件列表</li><li>同上</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">style</span>=<span class="string">"width: 150px;height: 150px; border: 1px solid red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> contentDiv = <span class="built_in">document</span>.querySelector(<span class="string">'#content'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    contentDiv.ondragover = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        e.preventDefault();<span class="comment">//阻止默认行为</span></span></span><br><span class="line"><span class="actionscript">        e.stopPropagation();<span class="comment">//停止事件冒泡</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//设置拖动后的操作效果的字符串</span></span></span><br><span class="line">        /*</span><br><span class="line">         cpoy : 在新位置生成源项的副本</span><br><span class="line">         move : 将项目移动到新位置</span><br><span class="line">         link : 在新位置建立源项目的链接</span><br><span class="line">        */</span><br><span class="line"><span class="actionscript">        e.dataTransfer.dropEffect = <span class="string">'copy'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    contentDiv.ondrop = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//获取文件</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> fileList = e.dataTransfer.files;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//遍历</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; fileList.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> file = fileList[i];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line"><span class="actionscript">            fileReader.readAsText(file,<span class="string">'gbk'</span>);</span></span><br><span class="line"><span class="actionscript">            fileReader.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.result);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="网络状态"><a href="#网络状态" class="headerlink" title="网络状态"></a>网络状态</h4><blockquote><p>监听用户浏览器的网络状态 : <code>window.navigator.onLine</code></p></blockquote><h4 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h4><h5 id="geolocation-对象获取"><a href="#geolocation-对象获取" class="headerlink" title="geolocation 对象获取"></a>geolocation 对象获取</h5><blockquote><p>通过 <code>window.navigator.geolocation</code> 返回</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断浏览器是否支持定位</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.navigator.geolocation)&#123;</span><br><span class="line">    <span class="comment">//如果支持,通过getCurrentPosition()函数获取地理位置</span></span><br><span class="line">    navigator.geolocation.getCurrentPosition(success)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'不支持'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pos : 当前位置, coords : 当前坐标</span></span><br><span class="line"><span class="comment">latitude : 纬度</span></span><br><span class="line"><span class="comment">longitude : 经度</span></span><br><span class="line"><span class="comment">accuracy : 精度</span></span><br><span class="line"><span class="comment">speed : 速度 , 以 米/秒 计算</span></span><br><span class="line"><span class="comment">altitude : 海拔 , 以 米 计算</span></span><br><span class="line"><span class="comment">altitudeAccuracy : 海拔精度</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params">pos</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    <span class="keyword">var</span> crd = pos.coords;</span><br><span class="line">    <span class="built_in">console</span>.log(crd.latitude);</span><br><span class="line">    <span class="built_in">console</span>.log(crd.longitude);</span><br><span class="line">    <span class="built_in">console</span>.log(crd.accuracy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="百度地图"><a href="#百度地图" class="headerlink" title="百度地图"></a>百度地图</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1.0, user-scalable=no"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span>, <span class="selector-tag">html</span>,<span class="selector-id">#allmap</span> &#123;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">overflow</span>: hidden;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">font-family</span>:<span class="string">"微软雅黑"</span>;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//api.map.baidu.com/api?v=2.0&amp;ak=bNF3YZLp4U3fe0tt8a8rZvoWYRWTtf0Y"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>浏览器定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"allmap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 百度地图API功能</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"allmap"</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> point = <span class="keyword">new</span> BMap.Point(<span class="number">116.331398</span>,<span class="number">39.897445</span>);</span></span><br><span class="line">map.centerAndZoom(point,12);</span><br><span class="line"><span class="actionscript">map.enableScrollWheelZoom(<span class="literal">true</span>); </span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> geolocation = <span class="keyword">new</span> BMap.Geolocation();</span></span><br><span class="line"><span class="actionscript">geolocation.getCurrentPosition(<span class="function"><span class="keyword">function</span><span class="params">(r)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span>(<span class="keyword">this</span>.getStatus() == BMAP_STATUS_SUCCESS)&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> mk = <span class="keyword">new</span> BMap.Marker(r.point);</span></span><br><span class="line">map.addOverlay(mk);</span><br><span class="line">map.panTo(r.point);</span><br><span class="line"><span class="actionscript">alert(<span class="string">'您的位置：'</span>+r.point.lng+<span class="string">','</span>+r.point.lat);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">'failed'</span>+<span class="keyword">this</span>.getStatus());</span></span><br><span class="line">&#125;        </span><br><span class="line"><span class="actionscript">&#125;,&#123;enableHighAccuracy: <span class="literal">true</span>&#125;)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h4><h5 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h5><blockquote><p>通过<code>window.localStorage</code>获取</p></blockquote><ul><li>存储的数据一直有效</li><li>多窗口共享</li><li>存储数据容量约为20M</li></ul><h5 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h5><blockquote><p>通过<code>window.sessionStorage</code>获取</p></blockquote><ul><li>关闭浏览器之前有效</li><li>同一窗口</li><li>存储数据容量约为5M</li></ul><h5 id="通用API"><a href="#通用API" class="headerlink" title="通用API"></a>通用API</h5><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>setItem(<em>key</em>,<em>value</em>)</td><td>存数据</td></tr><tr><td>getItem(<em>key</em>)</td><td>取数据</td></tr><tr><td>removeItem(<em>key</em>)</td><td>删除数据</td></tr><tr><td>clear()</td><td>清空数据</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">UserName : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">id</span>=<span class="string">"userName"</span>&gt;</span></span><br><span class="line">Password : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"login"</span> <span class="attr">id</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"logout"</span> <span class="attr">id</span>=<span class="string">"logout"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">showUserInfo();</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">'#login'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//获取用户名和密码</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> userName = <span class="built_in">document</span>.querySelector(<span class="string">'#userName'</span>).value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> password = <span class="built_in">document</span>.querySelector(<span class="string">'#password'</span>).value;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//封装成json对象并转成字符串</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> jsonString = <span class="built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line">userName:userName,</span><br><span class="line">password:password</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">//保存用户信息</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.localStorage.setItem(<span class="string">'userInfo'</span>,jsonString);</span></span><br><span class="line"><span class="actionscript"><span class="comment">//显示用户信息</span></span></span><br><span class="line">showUserInfo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">'#logout'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//清空用户数据</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.localStorage.clear();</span></span><br><span class="line">showUserInfo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">showUserInfo</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> userInfo = <span class="built_in">window</span>.localStorage.getItem(<span class="string">'userInfo'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> a_user = <span class="built_in">document</span>.querySelector(<span class="string">'#user'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> input_login = <span class="built_in">document</span>.querySelector(<span class="string">'#login'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(<span class="built_in">JSON</span>.parse(userInfo))&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//有用户信息</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'用户已登录'</span>);</span></span><br><span class="line"><span class="actionscript">a_user.style.display = <span class="string">'inline'</span>;</span></span><br><span class="line"><span class="javascript">a_user.innerHTML = <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(<span class="string">'userInfo'</span>)).userName;</span></span><br><span class="line"><span class="actionscript">input_login.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="actionscript">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//没有用户信息</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'用户未登陆'</span>);</span></span><br><span class="line"><span class="actionscript">a_user.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="actionscript">input_login.style.display = <span class="string">'inline'</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201024230008.png&quot; alt=&quot;20201024230008&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://fightlee.fun/categories/web/"/>
    
    
      <category term="html5" scheme="http://fightlee.fun/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>javaee-spring02</title>
    <link href="http://fightlee.fun/javaee-spring02.html"/>
    <id>http://fightlee.fun/javaee-spring02.html</id>
    <published>2020-10-22T03:44:39.000Z</published>
    <updated>2020-10-30T03:44:50.006Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030111805.png" alt="20201030111805"></p><a id="more"></a><h1 id="Javaee-Spring02"><a href="#Javaee-Spring02" class="headerlink" title="Javaee-Spring02"></a>Javaee-Spring02</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ul><li>在Idea中开始第一个Spring项目</li><li>依赖注入<ul><li>构造注入</li><li>setter注入</li></ul></li><li>自动装配</li><li>scope</li><li>parent&amp;depends-on</li><li>引用外部文件</li><li>@Component等注解</li><li>JavaConfig中的注解</li></ul><h2 id="在Java中使用Spring"><a href="#在Java中使用Spring" class="headerlink" title="在Java中使用Spring"></a>在Java中使用Spring</h2><blockquote><p>上篇文章主要阐述了为什么在Java中需要使用Spring,使用Spring涉及到的依赖倒置原则,和控制反转,依赖注入等原理.</p><p>这篇文章主要教大家如何在Java中使用和应用Spring来进行开发</p></blockquote><h3 id="使用Spring的几个步骤"><a href="#使用Spring的几个步骤" class="headerlink" title="使用Spring的几个步骤"></a>使用Spring的几个步骤</h3><ol><li>在pom.xml中添加Spring相关的依赖,没有maven的同学在项目中添加spring相关的Jar包即可.</li><li>创建spring的配置文件,使用spring的配置文件来管理在项目中使用到的对象.(IOC容器)</li><li>加载spring配置文件 , 获取spring的上下文对象.</li><li>通过ApplicationContext对象根据getBean()方法获取对象.</li></ol><p><strong>0 ) Student.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Integer id, String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1 ) 在pom.xml中导入相关依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2 ) 创建spring配置文件applicationContext.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3 ) 加载spring配置文件, 获取上下文对象,</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassPathXmlApplicationContext context = </span><br><span class="line">        <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationCotext.xml"</span>);</span><br></pre></td></tr></table></figure><p><strong>4 ) 通过ApplicationContext对象根据id获取IOC容器中的对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过id获取Bean对象</span></span><br><span class="line">Student stu = (Student) context.getBean(<span class="string">"student"</span>);</span><br><span class="line">System.out.println(stu);</span><br><span class="line"><span class="comment">//通过id和Bean的字节码文件获取Bean对象 , 好处不需要强转</span></span><br><span class="line">Student student = context.getBean(<span class="string">"student"</span>, Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出 : </span><br><span class="line">Student&#123;id=null, name='null', age=null&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><blockquote><p>从以上步骤中获取的Student对象是一个空对象,那么我们可以通过依赖注入的方式给Student对象的属性赋值.</p></blockquote><h4 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h4><blockquote><p>构造注入就是通过对象的构造函数来给属性赋值,有三种方式.</p></blockquote><h5 id="1-名称赋值-推荐"><a href="#1-名称赋值-推荐" class="headerlink" title="1 ) 名称赋值 (推荐)"></a>1 ) 名称赋值 (推荐)</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"12"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出 : </span><br><span class="line">Student&#123;id=1, name='zhangsan', age=12&#125;</span><br></pre></td></tr></table></figure><h5 id="2-下标赋值"><a href="#2-下标赋值" class="headerlink" title="2 ) 下标赋值"></a>2 ) 下标赋值</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"lisi"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出 : </span><br><span class="line">Student&#123;id=2, name='lisi', age=22&#125;</span><br></pre></td></tr></table></figure><h5 id="3-类型赋值"><a href="#3-类型赋值" class="headerlink" title="3 ) 类型赋值"></a>3 ) 类型赋值</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"lisi"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">value</span>=<span class="string">"33"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出 : </span><br><span class="line">Student&#123;id=3, name='lisi', age=33&#125;</span><br></pre></td></tr></table></figure><h5 id="4-ref属性"><a href="#4-ref属性" class="headerlink" title="4 ) ref属性"></a>4 ) ref属性</h5><p><strong>Student.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Grade grade;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Integer id, String name, Integer age, Grade grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Grade <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(Grade grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", grade="</span> + grade +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Grade.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer gradeId;</span><br><span class="line">    <span class="keyword">private</span> String gradeName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Grade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Grade</span><span class="params">(Integer gradeId, String gradeName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gradeId = gradeId;</span><br><span class="line">        <span class="keyword">this</span>.gradeName = gradeName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getGradeId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gradeId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGradeId</span><span class="params">(Integer gradeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gradeId = gradeId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGradeName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gradeName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGradeName</span><span class="params">(String gradeName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gradeName = gradeName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Grade&#123;"</span> +</span><br><span class="line">                <span class="string">"gradeId="</span> + gradeId +</span><br><span class="line">                <span class="string">", gradeName='"</span> + gradeName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用构造注入,注入Grade</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"grade"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Grade"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"gradeId"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"gradeName"</span> <span class="attr">value</span>=<span class="string">"一年级"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhaoliu"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"44"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"grade"</span> <span class="attr">ref</span>=<span class="string">"grade"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出 : </span><br><span class="line">Student&#123;id=4, name='zhaoliu', age=44, grade=Grade&#123;gradeId=1, gradeName='一年级'&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h4><blockquote><p>通过Bean中的set方法给属性注入值</p></blockquote><p><strong>Student.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Grade grade;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] booksArray = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; booksList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer,String&gt; booksMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; booksSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Grade <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(Grade grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getBooksArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> booksArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooksArray</span><span class="params">(String[] booksArray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.booksArray = booksArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getBooksList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> booksList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooksList</span><span class="params">(List&lt;String&gt; booksList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.booksList = booksList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Integer, String&gt; <span class="title">getBooksMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> booksMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooksMap</span><span class="params">(Map&lt;Integer, String&gt; booksMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.booksMap = booksMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getBooksSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> booksSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooksSet</span><span class="params">(Set&lt;String&gt; booksSet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.booksSet = booksSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">getProps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProps</span><span class="params">(Properties props)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.props = props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", grade="</span> + grade +</span><br><span class="line">                <span class="string">", address="</span> + address +</span><br><span class="line">                <span class="string">", booksArray="</span> + Arrays.toString(booksArray) +</span><br><span class="line">                <span class="string">", booksList="</span> + booksList +</span><br><span class="line">                <span class="string">", booksMap="</span> + booksMap +</span><br><span class="line">                <span class="string">", booksSet="</span> + booksSet +</span><br><span class="line">                <span class="string">", props="</span> + props +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="setter注入-重点"><a href="#setter注入-重点" class="headerlink" title="setter注入(重点)"></a>setter注入(重点)</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:utils</span>=<span class="string">"http://www.springframework.org/schema/util"</span> <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"grade"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Grade"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"gradeId"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"gradeName"</span> <span class="attr">value</span>=<span class="string">"一年级"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stu1"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--普通值注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--空字符串注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--空值注入--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="age" value=""&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引用类型注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"grade"</span> <span class="attr">ref</span>=<span class="string">"grade"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--内部Bean--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Address"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addrId"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addrName"</span> <span class="attr">value</span>=<span class="string">"长沙"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数组注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"booksArray"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java从入门到放弃<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Mysql从建库到删库到跑路<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Spring从春天到冬天<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--list集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"booksList"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Set集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"booksSet"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>母猪的产后护理<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>宠物心得<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>论家猫和主人的地位<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Map集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"booksMap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"语文"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"数学"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"3"</span> <span class="attr">value</span>=<span class="string">"英语"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Properties集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driverClassName"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"url"</span>&gt;</span>jdbc:mysql://localhost:3306/mydb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--p命名空间赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stu2"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span> <span class="attr">p:name</span>=<span class="string">"zhangsanfeng"</span> <span class="attr">p:age</span>=<span class="string">"82"</span> <span class="attr">p:id</span>=<span class="string">"9"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"booksList"</span> <span class="attr">ref</span>=<span class="string">"boosListUtils"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--c命名空间赋值 和p类似,p使用set注入,c使用构造注入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过名称赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address1"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Address"</span> <span class="attr">c:addrId</span>=<span class="string">"2"</span> <span class="attr">c:addrName</span>=<span class="string">"北京"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过下标赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address2"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Address"</span> <span class="attr">c:_0</span>=<span class="string">"3"</span> <span class="attr">c:_1</span>=<span class="string">"上海"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--util命名空间创建外部集合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">utils:list</span> <span class="attr">id</span>=<span class="string">"boosListUtils"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>十万个为什么<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">utils:list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><blockquote><p>给Bean在xml文件中注入属性属实麻烦,Spring给我们提供了其他几种方式来简化注入的操作.</p><ul><li>xml文件<ul><li>byName</li><li>byType</li><li>byConstructor</li></ul></li><li>注解<ul><li>@Autowired注解</li><li>@Resource注解</li></ul></li></ul></blockquote><p><strong>Customer.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line">    <span class="keyword">private</span> BuyCart cart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ByName"><a href="#ByName" class="headerlink" title="ByName"></a>ByName</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"order"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"orderId"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"orderName"</span> <span class="attr">value</span>=<span class="string">"00fefx"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cart"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.BuyCart"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proName"</span> <span class="attr">value</span>=<span class="string">"wahaha"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">byName : 根据名称来自动装配 属性的名称和对应的bean对象的id要一致</span></span><br><span class="line"><span class="comment">byType : 根据类型来自动装配 前提,确保当前配置文件中不会存在多个相同类型的bean对象</span></span><br><span class="line"><span class="comment">constructor : 根据构造器来自动装配(不推荐)</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Customer"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ByType"><a href="#ByType" class="headerlink" title="ByType"></a>ByType</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Customer"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Autowired注解注入-重点"><a href="#Autowired注解注入-重点" class="headerlink" title="@Autowired注解注入(重点)"></a>@Autowired注解注入(重点)</h4><blockquote><p>@Autowired 使用特点</p><ul><li>@Autowired注解为Spring中的注解,<strong>需要在spring配置文件中开启注解配置方可使用</strong>.</li><li>@Autowired注解优先使用byType注入</li><li>在容器中有多个相同类型bean时,如果此时有一个的bean id 和属性名称相等,则使用byName注入</li><li>如果又有多个相同类型bean,并且名称和属性不一致,则需要配合@Qualifier(value = “xxx”)注解一起使用</li><li>@Autowired注解中可以通过required属性配置此值能不能为null.</li></ul></blockquote><p><strong>一定要记住在xml文件中配置&lt;context:annotation-config /&gt;!!!</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  开启注解支持  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"order"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"orderId"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"orderName"</span> <span class="attr">value</span>=<span class="string">"00fefx"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cart"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.BuyCart"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proName"</span> <span class="attr">value</span>=<span class="string">"wahaha"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Customer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Customer.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//如果xml中的该类型的对象不唯一,且没有同名属性和id则需要配合@Qualifier(value="xxx")注解使用</span></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)<span class="comment">//通过required属性配置该值可不可以为null</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"order1"</span>)</span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BuyCart cart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resource注解-重点"><a href="#Resource注解-重点" class="headerlink" title="@Resource注解(重点)"></a>@Resource注解(重点)</h4><blockquote><p>@Resource使用特点 : </p><ul><li>为Java jdk中提供的注解.但仍需在配置文件中配置.</li><li>直接在注解参数中使用name来配置要注入的bean的id , @Resource(name = “xxx”)</li><li>@Resource优先使用byName的方式来装配,如果名称不匹配则使用byType.</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"order1"</span>)</span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"cart"</span>)</span><br><span class="line">    <span class="keyword">private</span> BuyCart cart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="scope-作用域"><a href="#scope-作用域" class="headerlink" title="scope(作用域)"></a>scope(作用域)</h3><blockquote><p>在bean标签中可以通过scope属性配置bean的初始化方式.</p><ul><li>singleton : 单例,在容器初始化时,对象就被创建了. <strong>为spring容器默认的初始化方式</strong></li><li>prototype : 原型,可以理解为普通对象创建(多个实例).在调用getBean()获取对象时,才创建对象.</li><li>request</li><li>session</li><li>application</li><li>websocket</li></ul></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stu1"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stu1"</span> <span class="attr">class</span>=<span class="string">"com.java.bean.Student"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Test.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ClassPathXmlApplicationContext context </span><br><span class="line">        = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="parent-amp-depends-on-继承-amp-依赖"><a href="#parent-amp-depends-on-继承-amp-依赖" class="headerlink" title="parent&amp;depends-on(继承&amp;依赖)"></a>parent&amp;depends-on(继承&amp;依赖)</h3><blockquote><p>使用<strong>parent</strong>属性和<strong>depends-on</strong>属性可以配置某些bean之间的关系</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 继承  parent属性</span></span><br><span class="line"><span class="comment"> 作用 : 一般用来配置一些模板类 , 父类一般使用abstract修饰</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"parentDog"</span> <span class="attr">class</span>=<span class="string">"com.java.spring.extend.Dog"</span> <span class="attr">abstract</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"旺财"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"com.java.spring.extend.Dog"</span> <span class="attr">parent</span>=<span class="string">"parentDog"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"公"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"weight"</span> <span class="attr">value</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 依赖 </span></span><br><span class="line"><span class="comment">depends-on属性</span></span><br><span class="line"><span class="comment">作用 : 当实例化的bean与bean之间并没有明显的相互依赖的关系,可以通过depends-on属性来决定bean初始化的顺序</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">bean : a</span></span><br><span class="line"><span class="comment">bean : b</span></span><br><span class="line"><span class="comment">要求 a 和 b 之间没有直接关系, 但是在实例化 b 之前 必须要先实例化 a.</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"settingsInit"</span> <span class="attr">class</span>=<span class="string">"com.java.spring.depends.SettingsInit"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testSystem"</span> <span class="attr">class</span>=<span class="string">"com.java.spring.depends.TestSystem"</span> <span class="attr">depends-on</span>=<span class="string">"settingsInit"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 程序中的一个设置类</span></span><br><span class="line"><span class="comment"> * 系统设置 : 比如说 系统更新的时间</span></span><br><span class="line"><span class="comment"> *  现在这个REFRESH_CYCLE这个参数比较死板,为了设计更为灵活,可以把参数设置到数据库中,</span></span><br><span class="line"><span class="comment"> *  每一次启动系统的时候,都去数据库中更新REFRESH_CYCLE中的值</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Settings</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> REFRESH_CYCLE = <span class="number">100</span>;<span class="comment">//s min day</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 对系统参数值进行一个数据库的更新</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SettingsInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SettingsInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"settingsInit初始化了"</span>);</span><br><span class="line"><span class="comment">//从数据库中加载值来对REFRESH_CYCLE进行更新</span></span><br><span class="line">Settings.REFRESH_CYCLE = <span class="number">2000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 定时任务类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 线程 Runnable接口  </span></span><br><span class="line"><span class="comment"> * new Thread(new MyRunnable()&#123;</span></span><br><span class="line"><span class="comment"> * @Override</span></span><br><span class="line"><span class="comment">public void run() &#123;</span></span><br><span class="line"><span class="comment">System.out.println("程序更新了.....");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> * &#125;)</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"程序更新了....."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSystem</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 最初 Settings中有变量 a , 任务调用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 现在 Settings中有变量a , 经过 SettingsInit类来更新变量a的值, 任务调用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.定义一个定时任务</span></span><br><span class="line">Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">TimerTask task = <span class="keyword">new</span> UpdateTask();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.周期性的执行定时任务</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * scheduleAtFixedRate(timerTask,delay,period);</span></span><br><span class="line"><span class="comment"> * timerTask : 要执行的定时任务 , 一般是继承了TimerTask类的对象</span></span><br><span class="line"><span class="comment"> * delay : 延迟时间</span></span><br><span class="line"><span class="comment"> * period : 运行周期</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">timer.scheduleAtFixedRate(task, <span class="number">0</span>, Settings.REFRESH_CYCLE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="context-placeholder-引用外部文件"><a href="#context-placeholder-引用外部文件" class="headerlink" title="context:placeholder(引用外部文件)"></a>context:placeholder(引用外部文件)</h3><blockquote><p>使用该标签可以读取其他配置文件的信息,比如xx.properties文件.通过${key}的方式给bean的属性赋值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用外部文件扫描来给类中的属性注入值 </span></span><br><span class="line"><span class="comment">作用 : 在ssh中或者ssm中 用它给hibernate或者mybatis中的数据源需要的参数赋值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db_server.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcUtils"</span> <span class="attr">class</span>=<span class="string">"com.java.spring.placeholder.JDBCUtils"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;driverClassName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Componet注解的使用"><a href="#Componet注解的使用" class="headerlink" title="@Componet注解的使用"></a>@Componet注解的使用</h3><blockquote><p>在上面的案例中,我们介绍了可以将IOC容器中的bean对象通过@Autowired注解或者@Resource注解自动注入注解所引用的对象中.这里我们介绍@Componet注解以及其他注解的使用</p><ul><li><p>前提 : 必须在xml中加入 <strong>context:component-scan</strong> 标签 , 开启扫描</p></li><li><p>@Component : 将Java中的类注入到IOC容器中</p><ul><li>@Service : 适用于MVC架构中的Service层实现类使用,例 : StudentServiceImp,ProductServiceImp</li><li>@Repository : Dao层实现类使用 , 例 :  StudentDaoImp,ProductDaoImp..</li><li>@Controller : Controller层使用 ,UserController等.</li></ul></li><li><p>@Value : 给对象注入属性值 , 可以在属性上或者其对应的setter方法上使用</p></li></ul></blockquote><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><strong>Student.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"zhangsan"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString()...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student student = context.getBean(<span class="string">"student"</span>, Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出 : </span><br><span class="line">Student&#123;id=null, name='zhangsan', age=1&#125;</span><br></pre></td></tr></table></figure><p><strong>StudentService &amp; StudentDao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"studentDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStu</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"addStu 成功执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"studentService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"studentDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentDao</span><span class="params">(StudentDao studentDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentDao = studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        studentDao.addStu(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StudentService studentService = context.getBean(<span class="string">"studentService"</span>, StudentService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">studentService.addStudent(<span class="keyword">new</span> Student());</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出 : </span><br><span class="line">addStu 成功执行</span><br></pre></td></tr></table></figure><h3 id="使用JavaConfig来配置Spring"><a href="#使用JavaConfig来配置Spring" class="headerlink" title="使用JavaConfig来配置Spring"></a>使用JavaConfig来配置Spring</h3><blockquote><p>Spring提供了一些新的注解,可以使用Java类来替代xml文件</p></blockquote><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h4><blockquote><p>指定当前类为配置类</p></blockquote><h4 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h4><blockquote><p>将注解配置的方法的返回值存入IOC容器中,当没有指定@Bean的name值时,默使用方法名来获取该对象.</p></blockquote><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><blockquote><p>和xml中的component-scan标签作用一致</p></blockquote><h4 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h4><blockquote><p>和xml中bean的scope属性作用一致</p></blockquote><h4 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h4><blockquote><p>和xml中的import标签作用一致</p></blockquote><h4 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h4><blockquote><p>和xml中的property-placeholder标签作用一致</p></blockquote><h3 id="idea控制台不输出错误具体信息"><a href="#idea控制台不输出错误具体信息" class="headerlink" title="idea控制台不输出错误具体信息"></a>idea控制台不输出错误具体信息</h3><blockquote><p>pom.xml中添加插件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030111805.png&quot; alt=&quot;20201030111805&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="spring" scheme="http://fightlee.fun/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>javaweb篇-反射(三)</title>
    <link href="http://fightlee.fun/javaweb%E7%AF%87-reflection3.html"/>
    <id>http://fightlee.fun/javaweb%E7%AF%87-reflection3.html</id>
    <published>2020-10-20T16:52:11.000Z</published>
    <updated>2020-10-30T03:26:21.111Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png" alt="20201030112614"></p><a id="more"></a><h1 id="JavaWeb-反射-三"><a href="#JavaWeb-反射-三" class="headerlink" title="JavaWeb-反射(三)"></a>JavaWeb-反射(三)</h1><h2 id="Java内省机制"><a href="#Java内省机制" class="headerlink" title="Java内省机制"></a>Java内省机制</h2><blockquote><p>维基百科解释 :  在计算机科学中，内省是指计算机程序在运行时（Runtime）检查对象（Object）类型的一种能力，通常也可以称作“运行时类型检查”。一些编程语言如C++、Java、Ruby、PHP、Objective-C、Perl等等具有这种特性。</p><p>不应该将内省和反射混淆。相对于内省，反射更进一步，是指计算机程序在运行时（Runtime）可以访问、检测和修改它本身状态或行为的一种能力。</p></blockquote><blockquote><p>Java内省机制和反射其实差不多,反射是在运行状态中动态的对任意已知路径的字节码文件中的信息进行获取,比如属性,构造,注解,方法等.而内省主要针对Java项目中比较特殊的一种类,JavaBean类的信息的获取.</p><p>JavaBean是些什么类?这些类又有一些什么特征?</p><ul><li>在JavaBean中会提供一个默认的无参构造函数</li><li>需要被序列化所以应实现<strong>Serializable</strong>接口</li><li>应当有一系列的可读写的属性</li><li>与其中属性对应的<strong>getter</strong>/<strong>setter</strong>方法</li></ul><p>例如 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.smbms.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="内省机制中相关的类-接口"><a href="#内省机制中相关的类-接口" class="headerlink" title="内省机制中相关的类/接口"></a>内省机制中相关的类/接口</h2><blockquote><p>跟内省机制相关的类都存放在<strong>java.beans</strong>包中,主要有以下几个类/接口 : </p><ul><li>Introspector类</li><li>BeanInfo接口</li><li>PropertyDescriptor类</li></ul></blockquote><h3 id="Introspector类"><a href="#Introspector类" class="headerlink" title="Introspector类"></a>Introspector类</h3><blockquote><p>The Introspector class provides a standard way for tools to learn about the properties, events, and methods supported by a target Java Bean.</p><p>Introspector类提供了一种标准方法来了解目标javabean中的属性、事件和方法。</p></blockquote><table><thead><tr><th>方法</th><th align="center">描述</th></tr></thead><tbody><tr><td>static BeanInfo <strong>getBeanInfo</strong>(beanClass)</td><td align="center">获取beanClass,以及其父类的字节码文件的基本信息</td></tr><tr><td>static BeanInfo <strong>getBeanInfo</strong>(beanClass,stopClass)</td><td align="center">获取beanClass到stopClass截止的字节码文件的基本信息,包含beanClass不包含stopClass</td></tr></tbody></table><h3 id="BeanInfo接口"><a href="#BeanInfo接口" class="headerlink" title="BeanInfo接口"></a>BeanInfo接口</h3><blockquote><p>Use the <code>BeanInfo</code> interface to create a <code>BeanInfo</code> class and provide explicit information about the methods, properties, events, and other features of your beans. </p><p>使用BeanInfo接口创建BeanInfo类，并提供对应JavaBean中的方法、属性、事件和其他特征的明确信息。</p></blockquote><table><thead><tr><th align="left">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">PropertyDescriptor[] getPropertyDescriptors()</td><td align="center">获取属性描述器数组</td></tr></tbody></table><h3 id="PropertyDescriptor类"><a href="#PropertyDescriptor类" class="headerlink" title="PropertyDescriptor类"></a>PropertyDescriptor类</h3><blockquote><p>A PropertyDescriptor describes one property that a Java Bean exports via a pair of accessor methods.</p><p>一个PropertyDescriptor描述一个属性，一个javabean的出口通过一对访问方法</p></blockquote><table><thead><tr><th>方法</th><th align="center">描述</th></tr></thead><tbody><tr><td>Method getWriteMethod()</td><td align="center">获取这个属性可访问的setter方法</td></tr><tr><td>Method getReadMethod()</td><td align="center">获取这个属性可访问的getter方法</td></tr><tr><td>String getDisplayName() / String getName()</td><td align="center">获取这个属性的名称</td></tr><tr><td>Class&lt;?&gt; getPropertyType()</td><td align="center">获取这个属性的类型</td></tr></tbody></table><blockquote><p>总的归纳  : </p><ol><li>我们可以通过<code>Introspector</code>类中的<strong>getBeanInfo</strong>()方法来获取当前bean的基本信息<code>BeanInfo</code>对象</li><li>通过<code>BeanInfo</code>对象中的<strong>getPropertyDescriptors</strong>()方法来获取当前bean中的<strong>每个属性</strong>的描述器<code>PropertyDescriptor</code></li><li>通过<code>PropertyDescriptor</code>获取其属性所对应的<strong>getter</strong>/<strong>setter</strong>方法,来对属性进行赋值的操作.</li><li>尤其注意通过<strong>getBeanInfo(Class beanClass)</strong>不仅能获取这个<strong>beanClass</strong>中的信息还有其父类的信息.如果只需要获取当前这个<strong>beanClass</strong>中的信息,应当使用<strong>getBeanInfo(Class beanClass,Class stopClass)</strong>,stopClass为其父类的字节码文件.</li></ol></blockquote><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><h4 id="获取Student类中的所有属性以及其类型和其getter-setter方法"><a href="#获取Student类中的所有属性以及其类型和其getter-setter方法" class="headerlink" title="获取Student类中的所有属性以及其类型和其getter/setter方法"></a>获取Student类中的所有属性以及其类型和其getter/setter方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> IntrospectionException </span>&#123;</span><br><span class="line">    Class beanClass = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    BeanInfo beanInfo = Introspector.getBeanInfo(beanClass,beanClass.getSuperclass());</span><br><span class="line">    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">    <span class="comment">//输出Student.class中所有的属性及其类型</span></span><br><span class="line">    Arrays.asList(propertyDescriptors).forEach(x -&gt; System.out.println(x.getName() + <span class="string">" : "</span> + x.getPropertyType()));</span><br><span class="line">    <span class="comment">//输出Student.class中所有的属性对应的getter/setter方法</span></span><br><span class="line">    Arrays.asList(propertyDescriptors).forEach(x -&gt; &#123;</span><br><span class="line">        System.out.println(x.getReadMethod());</span><br><span class="line">        System.out.println(x.getWriteMethod());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出</strong>:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">email : class java.lang.String</span><br><span class="line">id : class java.lang.Integer</span><br><span class="line">name : class java.lang.String</span><br><span class="line"></span><br><span class="line">public java.lang.String com.java.refleciton.Student.getEmail()</span><br><span class="line">public void com.java.refleciton.Student.setEmail(java.lang.String)</span><br><span class="line">public java.lang.Integer com.java.refleciton.Student.getId()</span><br><span class="line">public void com.java.refleciton.Student.setId(java.lang.Integer)</span><br><span class="line">public java.lang.String com.java.refleciton.Student.getName()</span><br><span class="line">public void com.java.refleciton.Student.setName(java.lang.String)</span><br></pre></td></tr></table></figure><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><h4 id="1-使用Java内省机制将Student中的属性和其属性值存入到map中"><a href="#1-使用Java内省机制将Student中的属性和其属性值存入到map中" class="headerlink" title="1) 使用Java内省机制将Student中的属性和其属性值存入到map中"></a>1) 使用Java内省机制将Student中的属性和其属性值存入到map中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    student.setId(<span class="number">1</span>);</span><br><span class="line">    student.setName(<span class="string">"zhangsan"</span>);</span><br><span class="line">    student.setEmail(<span class="string">"zhangsan@qq.com"</span>);</span><br><span class="line">    Map&lt;String,Object&gt; map = bean2Map(student);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">bean2Map</span><span class="params">(Student stu)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前对象的字节码文件</span></span><br><span class="line">    Class&lt;? extends Student&gt; clazz = stu.getClass();</span><br><span class="line">    <span class="comment">//1.获取当前字节码文件的BeanInfo对象</span></span><br><span class="line">    BeanInfo beanInfo = Introspector.getBeanInfo(clazz,clazz.getSuperclass());</span><br><span class="line">    <span class="comment">//2.获取beanInfo中的所有属性的描述器</span></span><br><span class="line">    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">    <span class="comment">//3.遍历&amp;创建Map对象</span></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    Arrays.asList(propertyDescriptors).forEach(pd -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取属性的getter方法并调用得到属性的值</span></span><br><span class="line">            Method readMethod = pd.getReadMethod();</span><br><span class="line">            Object value = readMethod.invoke(stu);</span><br><span class="line">            <span class="comment">//获取属性的名称</span></span><br><span class="line">            String key = pd.getName();</span><br><span class="line">            <span class="comment">//map的key为 : 属性的名称, value为属性的值</span></span><br><span class="line">            map.put(key,value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-使用Java内省机制将map中的值保存到Student的属性中"><a href="#2-使用Java内省机制将map中的值保存到Student的属性中" class="headerlink" title="2)  使用Java内省机制将map中的值保存到Student的属性中"></a>2)  使用Java内省机制将map中的值保存到Student的属性中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"id"</span>, <span class="number">2</span>);</span><br><span class="line">    map.put(<span class="string">"name"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">    map.put(<span class="string">"email"</span>, <span class="string">"zhangsan@qq.com"</span>);</span><br><span class="line">    Student stu = map2Bean(Student<span class="class">.<span class="keyword">class</span>,<span class="title">map</span>)</span>;</span><br><span class="line">    System.out.println(stu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">map2Bean</span><span class="params">(Class&lt;T&gt; clazz, Map&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    T t = clazz.newInstance();</span><br><span class="line">    <span class="comment">//1.获取当前字节码文件的BeanInfo对象</span></span><br><span class="line">    BeanInfo beanInfo = Introspector.getBeanInfo(clazz, clazz.getSuperclass());</span><br><span class="line">    <span class="comment">//2.获取beanInfo中的所有属性的描述器</span></span><br><span class="line">    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">    <span class="comment">//3.遍历</span></span><br><span class="line">    Arrays.asList(propertyDescriptors).forEach(pd -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取每一个属性的setter方法</span></span><br><span class="line">            Method writeMethod = pd.getWriteMethod();</span><br><span class="line">            <span class="comment">//根据属性的名称获取值</span></span><br><span class="line">            Object value = map.get(pd.getName());</span><br><span class="line">            <span class="comment">//调用方法给t对象赋值</span></span><br><span class="line">            writeMethod.invoke(t, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-案例2-2的改造"><a href="#3-案例2-2的改造" class="headerlink" title="3) 案例2.2的改造"></a>3) 案例2.2的改造</h4><blockquote><p>思考 : 在Map转Bean的过程中,我们Map中的对应key/属性的值的类型是一致,如果不一致,在调用对应的setter方法赋值时传入的参数类型不匹配就会有异常的出现,我们可以针对一些常见的类型进行显示的判断,再赋值</p></blockquote><p><strong>修改后的map2Bean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"id"</span>, <span class="string">"2"</span>);</span><br><span class="line">    map.put(<span class="string">"name"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">    map.put(<span class="string">"email"</span>, <span class="string">"zhangsan@qq.com"</span>);</span><br><span class="line">    Student stu = map2Bean(Student<span class="class">.<span class="keyword">class</span>,<span class="title">map</span>)</span>;</span><br><span class="line">    System.out.println(stu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">map2Bean</span><span class="params">(Class&lt;T&gt; clazz, Map&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    T t = clazz.newInstance();</span><br><span class="line">    <span class="comment">//1.获取当前字节码文件的BeanInfo对象</span></span><br><span class="line">    BeanInfo beanInfo = Introspector.getBeanInfo(clazz, clazz.getSuperclass());</span><br><span class="line">    <span class="comment">//2.获取beanInfo中的所有属性的描述器</span></span><br><span class="line">    PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class="line">    <span class="comment">//3.遍历</span></span><br><span class="line">    Arrays.asList(propertyDescriptors).forEach(pd -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取每一个属性的setter方法</span></span><br><span class="line">            Method writeMethod = pd.getWriteMethod();</span><br><span class="line">            <span class="comment">//根据属性的名称获取值</span></span><br><span class="line">            Object value = map.get(pd.getName());</span><br><span class="line">            <span class="keyword">if</span>(value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//先获取属性的类型</span></span><br><span class="line">                Class&lt;?&gt; type = pd.getPropertyType();</span><br><span class="line">                <span class="comment">//判断属性是什么类型,再将value转换成对应类型</span></span><br><span class="line">                <span class="keyword">if</span>(type.isAssignableFrom(String<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="comment">//如果是字符串,转换成字符串赋值</span></span><br><span class="line">                    writeMethod.invoke(t, value.toString());</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.isAssignableFrom(<span class="keyword">int</span><span class="class">.<span class="keyword">class</span>) || <span class="title">type</span>.<span class="title">isAssignableFrom</span>(<span class="title">Integer</span>.<span class="title">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="comment">//如果是int或者Integer,则转换后赋值</span></span><br><span class="line">                    writeMethod.invoke(t, Integer.parseInt(value.toString()));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.isAssignableFrom(<span class="keyword">double</span><span class="class">.<span class="keyword">class</span>) || <span class="title">type</span>.<span class="title">isAssignableFrom</span>(<span class="title">Double</span>.<span class="title">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="comment">//如果是double或者Double,则转换后赋值</span></span><br><span class="line">                    writeMethod.invoke(t, Double.parseDouble(value.toString()));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.isAssignableFrom(<span class="keyword">boolean</span><span class="class">.<span class="keyword">class</span>) || <span class="title">type</span>.<span class="title">isAssignableFrom</span>(<span class="title">Boolean</span>.<span class="title">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="comment">//如果是Boolean或者boolean,则转换后赋值</span></span><br><span class="line">                    writeMethod.invoke(t, Boolean.parseBoolean(value.toString()));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.isAssignableFrom(Date<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="comment">//如果是Date类型,则转换后赋值</span></span><br><span class="line">                    Date date = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).parse(value.toString());</span><br><span class="line">                    writeMethod.invoke(t,date);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里特地在map中的id处,将int的值修改成String,运行后没有问题.</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>通过Introspector获取BeanInfo对象</li><li>通过BeanInfo获取Bean中所有属性的属性描述器PropertyDescriptor[]</li><li>遍历PropertyDescriptor数组,通过PropertyDescriptor对象获取属性的getter/setter方法,或者属性的类型和名称.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png&quot; alt=&quot;20201030112614&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="反射" scheme="http://fightlee.fun/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>java基础增强篇01</title>
    <link href="http://fightlee.fun/java%E5%9F%BA%E7%A1%80%E5%A2%9E%E5%BC%BA%E7%AF%8701.html"/>
    <id>http://fightlee.fun/java%E5%9F%BA%E7%A1%80%E5%A2%9E%E5%BC%BA%E7%AF%8701.html</id>
    <published>2020-10-17T02:02:55.000Z</published>
    <updated>2020-10-30T03:26:17.786Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png" alt="20201030112614"></p><a id="more"></a><h1 id="Java基础增强"><a href="#Java基础增强" class="headerlink" title="Java基础增强"></a>Java基础增强</h1><h2 id="前文概述"><a href="#前文概述" class="headerlink" title="前文概述"></a>前文概述</h2><blockquote><p>本文主要针对于Java8的新特性进行部分讲解,在大部分大学和一些机构的教学过程中发现Java8的新特性很少有老师提起,但是现阶段的实际开发中Java8的新特性是必不可少的一部分,尤其是本文要提到的<strong>Lambda表达式</strong>以及<strong>函数式接口</strong>和一些其他内容.</p></blockquote><h2 id="内容概览"><a href="#内容概览" class="headerlink" title="内容概览"></a>内容概览</h2><ol><li>函数式接口&amp;Lambda表达式</li><li>default关键字</li><li>Stream流</li><li>Optional</li></ol><h2 id="1-函数式接口-amp-Lambda表达式"><a href="#1-函数式接口-amp-Lambda表达式" class="headerlink" title="1) 函数式接口 &amp; Lambda表达式"></a>1) 函数式接口 &amp; Lambda表达式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p><strong>函数式接口</strong> : 在Java8中,一个接口中只有一个需要被实现的方法,我们就可以认为其是一个函数式接口 . 比如一些常见的 线程中的 <strong>Runnable</strong> , 比较排序使用的<strong>Comparator</strong> 等接口.</p><p>当我们在自定义函数式接口时,为了避免自己或者其他人以后在此接口中加上其他接口方法,导致此接口变为<strong>非函数式接口</strong>,我们可以在此接口上加上<strong>@FunctionalInterface</strong>注解,加上后如果再向此接口中添加新的接口函数,编译会出错.</p><p><strong>Runnable接口的定义</strong> : </p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201017135620.png" alt="20201017135620"></p><p><strong>Comparator接口的定义</strong> : </p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201017135635.png" alt="20201017135635"></p><p>Java8之前,我们经常对Runnable或者Comparator这种单方法实现的接口使用匿名内部类的形式来使用,这种使用方式相对而言比较繁琐,从Java8之后,我们可以使用Lambda表达式来对这些操作进行简化.</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用匿名内部类的形式创建Runnable</span></span><br><span class="line">    Runnable r = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"线程要执行的任务"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//使用Lambda表达式创建Runnable</span></span><br><span class="line">    Runnable r1 = () -&gt; System.out.println(<span class="string">"线程要执行的任务"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda表达式的演化过程"><a href="#Lambda表达式的演化过程" class="headerlink" title="Lambda表达式的演化过程"></a>Lambda表达式的演化过程</h3><blockquote><p> 我们可以从JavaScript中的声明式函数来推演出Java中的函数式接口的Lambda语法,JavaScript同理.</p></blockquote><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201017150802.png" alt="20201017150802"></p><h3 id="Lambda表达式的使用方式"><a href="#Lambda表达式的使用方式" class="headerlink" title="Lambda表达式的使用方式"></a>Lambda表达式的使用方式</h3><blockquote><p>Lambda表达式的使用方式主要从这几点考虑,接口的实现方法有没有形参?形参有几个?方法体中有几行代码?有没有返回值?不需要考虑返回值类型和参数类型</p><ul><li><p>只有1个或者没有形参,没有返回值,方法体中只有1行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//没有形参</span></span><br><span class="line">Runnable r1 = () -&gt; System.out.println(<span class="string">"线程要执行的任务"</span>);</span><br><span class="line"><span class="comment">//只有1个形参,小括号可以省略</span></span><br><span class="line">TestInterface ti = x -&gt; System.out.println(x);</span><br></pre></td></tr></table></figure></li><li><p>有多个形参,有返回值,方法体中有多行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TestInterface ti = (x,y) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>有返回值,方法提中只有一个return的话可以省略return.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TestInterface ti = (x,y) -&gt; x + y;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h3><p><strong>现有若干个Student(int age , String name)保存在集合中,使用Collections对集合Student进行排序</strong></p><p><strong>案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Student stu1 = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>, <span class="number">12</span>);</span><br><span class="line">    Student stu2 = <span class="keyword">new</span> Student(<span class="string">"lisi"</span>, <span class="number">13</span>);</span><br><span class="line">    Student stu3 = <span class="keyword">new</span> Student(<span class="string">"wangwu"</span>, <span class="number">14</span>);</span><br><span class="line">    Student stu4 = <span class="keyword">new</span> Student(<span class="string">"wangba"</span>, <span class="number">14</span>);</span><br><span class="line">    List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(stu1);</span><br><span class="line">    list.add(stu2);</span><br><span class="line">    list.add(stu3);</span><br><span class="line">    list.add(stu4);</span><br><span class="line">    <span class="comment">//使用匿名内部类</span></span><br><span class="line">    Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = o1.getAge() - o2.getAge();</span><br><span class="line">            <span class="keyword">return</span> temp == <span class="number">0</span> ? o1.getName().compareTo(o2.getName()) : temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用lambda表达式</span></span><br><span class="line">Collections.sort(list,(o1,o2) -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> temp = o1.getAge() - o2.getAge();</span><br><span class="line">    <span class="keyword">return</span> temp == <span class="number">0</span> ? o1.getName().compareTo(o2.getName()) : temp;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Java8的函数式接口"><a href="#Java8的函数式接口" class="headerlink" title="Java8的函数式接口"></a>Java8的函数式接口</h3><blockquote><p>在lambda的表达式的实际使用中,我们不可能仅仅只对Java中的Comparator或者Runnable等现有函数式接口进行简化操作,我们还需要操作一些自定义的函数式接口,但是每一次使用时我们完成某一个逻辑实现时都需要自己定义一个函数式接口来操作,未免显得不太方便,如以下</p><p><strong>自定义函数式接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TestFunctionInterface</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果要使用的方法需要传参</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TestFunctionInterface</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果有返回值....等等</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>所以Java8中给我们提供了大量的函数式接口给我们在各种场景配合使用.</strong></p><table><thead><tr><th>序号</th><th>接口</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><strong>Consumer&lt; T &gt;</strong></td><td>代表了接受一个输入参数并且无返回的操作</td></tr><tr><td>2</td><td><strong>Predicate&lt; T &gt;</strong></td><td>接受一个输入参数，返回一个布尔值结果。</td></tr><tr><td>3</td><td><strong>Function&lt; T, R &gt;</strong></td><td>接受一个输入参数，返回一个结果。</td></tr><tr><td>4</td><td><strong>Supplier&lt; T &gt;</strong></td><td>无参数，返回一个结果。</td></tr></tbody></table><p>…剩下还有39个,我们先讲这4个.</p><h4 id="Consumer-lt-T-gt"><a href="#Consumer-lt-T-gt" class="headerlink" title="Consumer&lt; T &gt;"></a>Consumer&lt; T &gt;</h4><blockquote><p>Consumer : 消费者,顾客 . 代表了接受一个输入参数并且无返回的操作.</p><p>接口定义 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> Consumer&lt;T&gt; <span class="title">andThen</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; after)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里接口中还有方法体是不是很神奇?这个和default这个关键字我们放到后面讲解.</p><p>使用场景 : 当我们需要使用Lambda表达式来操作一个传入一个参数但不需要返回值的方法,这里一般使用在forEach中对集合内部迭代对传入的参数做一些操作.后面会介绍.</p></blockquote><p><strong>使用小案例</strong> : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Consumer&lt;Integer&gt; consumer = x -&gt; &#123;</span><br><span class="line">        x = x + <span class="number">10</span>;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer.accept(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Predicate-lt-T-gt"><a href="#Predicate-lt-T-gt" class="headerlink" title="Predicate&lt; T &gt;"></a>Predicate&lt; T &gt;</h4><blockquote><p>Predicate :  表明,阐明,断言,判断 . 接受一个输入参数，返回一个布尔值结果.</p><p>接口定义 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">and</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; !test(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">or</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">isEqual</span><span class="params">(Object targetRef)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">null</span> == targetRef)</span><br><span class="line">                ? Objects::isNull</span><br><span class="line">                : object -&gt; targetRef.equals(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用场景 : 当我们需要使用Lambda表达式来操作一个传入一个参数但需要返回布尔类型值的方法.</p></blockquote><p><strong>使用小案例</strong> : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Predicate&lt;Integer&gt; predicate = x -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(predicate.test(<span class="number">30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用Predicate来完成一些判断的功能</strong></p><p>1.判断传入的字符串的长度是不是大于5?</p><p>2.判断传入的数值是不是偶数?</p><p>3.判断传入的字符串是不是包含‘@’符号?</p><p><strong>传统做法</strong> : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">testStringLength</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.length() &gt; <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">testValueisEven</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.parseInt(value) % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">testValueisContains</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.contains(<span class="string">"@"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(testStringLength(<span class="string">"asd"</span>));;</span><br><span class="line">    System.out.println(testValueisEven(<span class="string">"122"</span>));;</span><br><span class="line">    System.out.println(testValueisContains(<span class="string">"asd"</span>));;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用Lambda表达式</strong> : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">testMethod</span><span class="params">(String value,Predicate&lt;String&gt; predicate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> predicate.test(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(testMethod(<span class="string">"asd"</span>,value -&gt; value.length() &gt; <span class="number">5</span>));</span><br><span class="line">    System.out.println(testMethod(<span class="string">"122"</span>,value -&gt; Integer.parseInt(value) % <span class="number">2</span> == <span class="number">0</span>));</span><br><span class="line">    System.out.println(testMethod(<span class="string">"asd@"</span>,value -&gt; value.contains(<span class="string">"@"</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Function-lt-T-R-gt"><a href="#Function-lt-T-R-gt" class="headerlink" title="Function&lt; T, R &gt;"></a>Function&lt; T, R &gt;</h4><blockquote><p>Function : 这个顾名思义 函数 , 接受一个输入参数，返回一个结果.</p><p>接口定义 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;V, R&gt; <span class="title">compose</span><span class="params">(Function&lt;? <span class="keyword">super</span> V, ? extends T&gt; before)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(before);</span><br><span class="line">        <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;T, V&gt; <span class="title">andThen</span><span class="params">(Function&lt;? <span class="keyword">super</span> R, ? extends V&gt; after)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Function&lt;T, T&gt; <span class="title">identity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用场景 : 当我们需要使用Lambda表达式来操作一个传入一个参数但需要返回一个特定类型值的方法.</p></blockquote><p><strong>使用小案例</strong> : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Function&lt;String, String[]&gt; function = value -&gt; value.split(<span class="string">"-"</span>);</span><br><span class="line">    System.out.println(Arrays.asList(function.apply(<span class="string">"123-456-789"</span>)));;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用Function来完成一些字符串处理的操作</strong></p><p>1.将传入的字符串首字母大写然后在字符串前加上”set”返回</p><p>2.将传入的字符串从 “:” 切割后再去除两端空格返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMethod1</span><span class="params">(String value,Function&lt;String, String&gt; function)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> function.apply(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.将传入的字符串首字母大写然后在字符串前加上"set"返回</span></span><br><span class="line">    System.out.println(testMethod1(<span class="string">"age"</span>,value -&gt; &#123;</span><br><span class="line">        <span class="keyword">char</span>[] charArray = value.toCharArray();</span><br><span class="line">        charArray[<span class="number">0</span>] = (<span class="keyword">char</span>) (charArray[<span class="number">0</span>] - <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"set"</span> + <span class="keyword">new</span> String(charArray);</span><br><span class="line">    &#125;));</span><br><span class="line">    </span><br><span class="line"><span class="comment">//2.将传入的字符串从 ":" 切割后再去除两端空格返回</span></span><br><span class="line">    System.out.println(testMethod1(<span class="string">"redirect:login.jsp"</span>, value -&gt; &#123;</span><br><span class="line">        <span class="keyword">int</span> index = value.indexOf(<span class="string">":"</span>);</span><br><span class="line">        <span class="keyword">return</span> value.substring(index + <span class="number">1</span>);</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Supplier-lt-T-gt"><a href="#Supplier-lt-T-gt" class="headerlink" title="Supplier&lt; T &gt;"></a>Supplier&lt; T &gt;</h4><blockquote><p>Supplier :  供应者; 供货商; 供货方; 无参数,返回一个结果。</p><p>接口定义  : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用场景 :  当我们需要使用Lambda表达式来操作不需要传入参数但能返回一个特定类型值的方法.</p></blockquote><p><strong>使用小案例</strong> : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Supplier&lt;Double&gt; supplier = () -&gt; Math.PI; </span><br><span class="line">    System.out.println(supplier.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用Supplier来完成获取一些值的操作</strong></p><p>1.获取一个UUID随机字符串值,只获取最后一个 “-“ 后的字符串.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test09</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(testMethod2(() -&gt; &#123;</span><br><span class="line">        String uuidStr = UUID.randomUUID().toString();</span><br><span class="line">        <span class="keyword">return</span> uuidStr.substring(uuidStr.lastIndexOf(<span class="string">"-"</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;));</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMethod2</span><span class="params">(Supplier&lt;String&gt; supplier)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> supplier.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后再来提几个</p><h4 id="BiConsumer-lt-T-R-gt"><a href="#BiConsumer-lt-T-R-gt" class="headerlink" title="BiConsumer&lt;T,R&gt;"></a>BiConsumer&lt;T,R&gt;</h4><blockquote><p>和<strong>Consumer</strong>类似,唯一不同就是 Consumer 传入一个参数,BiConsumer传入2个参数</p><p>使用场景 : 迭代Map</p></blockquote><p><strong>这里补充一下Consumer的迭代操作</strong></p><p>1.使用Consumer迭代List集合</p><p>2.使用BiConsumer迭代Map集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">"aaa"</span>);</span><br><span class="line">    list.add(<span class="string">"bbb"</span>);</span><br><span class="line">    list.add(<span class="string">"ccc"</span>);</span><br><span class="line">    list.add(<span class="string">"ddd"</span>);</span><br><span class="line">    list.forEach(x -&gt; System.out.print(x + <span class="string">" "</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(<span class="string">"----------"</span>);</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"username"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">    map.put(<span class="string">"password"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    map.put(<span class="string">"gender"</span>, <span class="string">"male"</span>);</span><br><span class="line">    map.put(<span class="string">"email"</span>, <span class="string">"zhangsan@qq.com"</span>);</span><br><span class="line">    map.forEach((key,value) -&gt; System.out.println(key + <span class="string">" : "</span> + value));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aaa bbb ccc ddd </span><br><span class="line">----------</span><br><span class="line">password : 123456</span><br><span class="line">gender : male</span><br><span class="line">email : zhangsan@qq.com</span><br><span class="line">username : zhangsan</span><br></pre></td></tr></table></figure><p><strong>从这里可以看出使用Lambda表达式迭代集合不要太爽好不好?</strong></p><h4 id="UnaryOperator-lt-T-gt"><a href="#UnaryOperator-lt-T-gt" class="headerlink" title="UnaryOperator&lt; T &gt;"></a>UnaryOperator&lt; T &gt;</h4><blockquote><p>此接口继承了<strong>Function</strong>接口 , 与其不同的就是,Function是传入一个T类型,返回R类型.而UnaryOperator则是传入T类型返回T类型</p></blockquote><p><strong>案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test11</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(testMethod3(<span class="number">100</span>,x -&gt; x * <span class="number">2</span>));</span><br><span class="line">    System.out.println(testMethod3(<span class="number">100</span>,x -&gt; x + <span class="number">1</span>));</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">testMethod3</span><span class="params">(Integer value,UnaryOperator&lt;Integer&gt; unaryOperator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unaryOperator.apply(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>剩下还有很多函数式接口不一一列举,可以自行在表格中查看用法</strong></p><table><thead><tr><th>接口</th><th align="center">描述</th></tr></thead><tbody><tr><td>ToDoubleBiFunction&amp;ToIntBiFunction&amp;ToLongBiFunction</td><td align="center">接收2个输入参数,返回double,int,long类型结果</td></tr><tr><td>ToDoubleFunction&amp;ToIntFunction&amp;ToLongFunction</td><td align="center">接受1个输入参数,返回double,int,long类型结果</td></tr><tr><td>ObjDoubleConsumer&amp;ObjIntConsumer&amp;ObjLongConsumer</td><td align="center">接受1个object类型和一个doube,int,long的输入参数，无返回值。</td></tr><tr><td>BiFunction&lt;T,U,R&gt;</td><td align="center">代表了一个接受两个输入参数的方法，并且返回一个结果</td></tr><tr><td>BinaryOperator&lt; T &gt;</td><td align="center">代表了一个作用于于两个同类型操作符的操作，并且返回了操作符同类型的结果</td></tr><tr><td>BiPredicate&lt;T,U&gt;</td><td align="center">代表了一个两个参数的boolean值方法</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>带Bi的就多一个参数.</li><li>带Function接收一个输入参数,返回一个特定类型.</li><li>带Consumer接收一个输入参数,无返回值.</li><li>带Predicate接收一个输入参数,返回boolean类型值.</li><li>带Supplier无输入参数,返回一个特定类型.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png&quot; alt=&quot;20201030112614&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="java8新特性" scheme="http://fightlee.fun/tags/java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>javaee-spring01</title>
    <link href="http://fightlee.fun/javaee-spring01.html"/>
    <id>http://fightlee.fun/javaee-spring01.html</id>
    <published>2020-10-17T01:18:00.000Z</published>
    <updated>2020-10-30T03:42:23.300Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030111805.png" alt="20201030111805"></p><a id="more"></a><h1 id="Javaee-Spring01"><a href="#Javaee-Spring01" class="headerlink" title="Javaee-Spring01"></a>Javaee-Spring01</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ul><li>What is Spring FrameWork?</li><li>Why We Need Spring ?</li><li><strong>DIP</strong>, <strong>IOC</strong> and <strong>DI</strong></li></ul><h2 id="概念阐述"><a href="#概念阐述" class="headerlink" title="概念阐述"></a>概念阐述</h2><h3 id="什么是Spring框架"><a href="#什么是Spring框架" class="headerlink" title="什么是Spring框架?"></a>什么是Spring框架?</h3><blockquote><p>来自维基百科的解释 : <strong>Spring框架</strong>是Java平台的一个开源的全栈(Full-stack)应用程序框架和控制反转容器实现,一般被直接称为 Spring,是针对bean的生命周期进行管理的轻量级容器(lightweight container).</p><p>那么简单来说 : <strong>Spring就是一个管理bean的容器,作为控制反转的容器实现</strong></p></blockquote><h3 id="为什么要使用Spring-Spring解决了什么问题"><a href="#为什么要使用Spring-Spring解决了什么问题" class="headerlink" title="为什么要使用Spring?Spring解决了什么问题?"></a>为什么要使用Spring?Spring解决了什么问题?</h3><blockquote><p>在解释为什么要使用Spring之前,我们不妨先来了解一种设计模式原则 : <strong>依赖倒置原则(Dependency Inversion Principle)</strong>.</p><p>那什么是<strong>依赖倒置原则</strong>呢?该原则包含如下2个原则 : </p><ul><li>上层模块不应该依赖底层模块，两者都应依赖于抽象</li><li>抽象不应该依赖细节,细节应该依赖抽象</li></ul><p>厚礼蟹!听起来有点厉害的样子,那么在Java中我们如何来描述这些含义呢?</p><p><strong>上层和底层</strong> : </p><p>无论哪一个实现逻辑下都是由表现层(上层)到底层,比如我们已经学过的JavaWeb的小案例中,在传统的MVC架构模式里,上层我们可以认为是Controller层,也就是我们的Servlet,在Servlet我们获取客户端中用户的输入对数据进行处理,通常我们处理的方式都是调用下层的代码来对该业务进行实现.比如在Servlet中调用Service层的实现,而在Service层中调用Dao层的实现.</p><p><strong>细节和抽象</strong> : </p><p>在Java中抽象代表抽象类或者接口,那么细节就代表抽象类或者接口对应的实现类,那么对应第二个含义的解释就为,抽象类和接口不应该依赖于其实现类,而实现类应该依赖其接口或抽象类.</p><p><strong>依赖倒置原则的中心思想为 : 面向接口编程</strong></p><p>瓦特法克?面向对象已经够难了?那么什么是面向接口呢?我们通过一个小案例来进行阐述.</p></blockquote><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>三年二班有位小周同学沉迷于电脑游戏,最近迷上了一款网游,于是迫不及待的登录游戏,创建角色开始游戏.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*网络游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetGame</span></span>&#123;</span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"单机游戏开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//玩网络游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(NetGame game)</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">xiaoZhou.playGame(<span class="keyword">new</span> NetGame());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小周经过同学的介绍又迷上了另一款单机游戏,于是又连忙找到资源down下来开始玩耍,从此从早到晚玩的不亦乐乎.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*单机游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleGame</span></span>&#123;</span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"单机游戏开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*网络游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetGame</span></span>&#123;</span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"网络游戏开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//玩网络游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(NetGame game)</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//玩单机游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(SingleGame game)</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">xiaoZhou.playGame(<span class="keyword">new</span> NetGame());</span><br><span class="line">xiaoZhou.playGame(<span class="keyword">new</span> SingleGame());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好家伙,每当小周同学找到一款新类型的游戏,我们的程序将会越来越臃肿,那么问题在哪呢?我们看人物类Person是一个上层模块,并且是一个细节实现类,而Person类中的代码实现又依赖于NetGame&amp;SingleGame2个细节实现类,因此导致小周同学每一次开始玩新类型游戏都需要修改上层模块Person类的代码.很明显这有悖于我们上文提到的依赖倒置的原则.那么如何去修改呢?</p><h5 id="细节转抽象"><a href="#细节转抽象" class="headerlink" title="细节转抽象"></a>细节转抽象</h5><p>我们发现在NetGame和SingleGame中都具备开始游戏(startGame)的功能,那么我们可以将该功能抽取至接口IGame中,让NetGame和SingleGame实现该接口,在Person中的playGame方法中修改参数类型为该接口类型.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*游戏接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*单机游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleGame</span> <span class="keyword">implements</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"单机游戏开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*网络游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetGame</span> <span class="keyword">implements</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"网络游戏开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//玩游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(IGame game)</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">xiaoZhou.playGame(<span class="keyword">new</span> NetGame());</span><br><span class="line">xiaoZhou.playGame(<span class="keyword">new</span> SingleGame());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过细节转抽象后,即时小周同学下次再发现了新游戏,我们上层模块(Person类)也不再需要修改.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*游戏接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*手机游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MobileGame</span> <span class="keyword">implements</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"手机游戏开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*单机游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleGame</span> <span class="keyword">implements</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"单机游戏开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*网络游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetGame</span> <span class="keyword">implements</span> <span class="title">IGame</span></span>&#123;</span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"网络游戏开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//玩游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(IGame game)</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">xiaoZhou.playGame(<span class="keyword">new</span> NetGame());</span><br><span class="line">xiaoZhou.playGame(<span class="keyword">new</span> SingleGame());</span><br><span class="line">xiaoZhou.playGame(<span class="keyword">new</span> MobileGame());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在依赖倒置原则中,依赖关系的传递有三种方式 : </p><ul><li>通过接口传递关系(就如上面的例子)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">(IGame game)</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">    xiaoZhou.playGame(<span class="keyword">new</span> NetGame());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过构造函数传递关系</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> IGame game;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(IGame game)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.game = game; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person xiaoZhou = <span class="keyword">new</span> Person(<span class="keyword">new</span> NetGame());</span><br><span class="line">    xiaoZhou.playGame();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过Setter方法传递关系</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> IGame game;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGame</span><span class="params">(IGame game)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.game = game;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">    xiaoZhou.setGame(<span class="keyword">new</span> NetGame());</span><br><span class="line">    xiaoZhou.playGame();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="上层不依赖底层"><a href="#上层不依赖底层" class="headerlink" title="上层不依赖底层"></a>上层不依赖底层</h5><p>解决了细节转抽象后,那么依赖倒置呢?我们继续修改代码.</p><p>小周同学接触了网络游戏后,创建游戏角色,然后操作游戏角色拿起武器攻击怪物,怪物的掉血量根据武器的攻击来决定.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*武器类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weapon</span></span>&#123;</span><br><span class="line"><span class="comment">//武器攻击</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ad = <span class="number">30</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"怪物掉"</span> + ad + <span class="string">"滴血!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*英雄类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Weapon weapon;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span> </span>&#123;</span><br><span class="line">weapon = <span class="keyword">new</span> Weapon();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">weapon.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*网络游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetGame</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Hero hero;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NetGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">hero = <span class="keyword">new</span> Hero();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">hero.attack();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> NetGame game;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">game = <span class="keyword">new</span> NetGame();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//玩游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*测试类*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person xiaoZhou = <span class="keyword">new</span> Person();</span><br><span class="line">xiaoZhou.playGame();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上面的代码我用图片来给大家解释</strong></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201019021441.png" alt="20201019021441"></p><p>这类型的代码结构就是典型的上层依赖下层,那么这种结构有什么问题呢?假设我们将Weapon类修改一下,由原先的默认ad = 30攻击,改为通过构造函数的形式传入具体的攻击力.</p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201019023211.png" alt="20201019023211"></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201019023348.png" alt="20201019023348"></p><p>从上图可以看出,当仅仅修改了底层Weapon类的结构时,上层的每一层的构造函数都需要重新编写,这种设计在后期维护中简直就是灾难.如果在实际开发中,这样的类结构可能是成百上千个,如果每次为了修改一个类而导致依赖他的每个类都要进行修改,维护的成本未免太大.</p><p><strong>那么如何进行修改呢?</strong></p><p>既然我们不能上层依赖下层,那么将依赖的关系反转过来,由下层依赖上层,换种说法就是让上层控制下层.这里我们用<strong>依赖注入</strong>来实现控制反转.<strong>所谓的依赖注入,就是将下层类作为参数传入到上层类,从而实现上层对下层的控制</strong>.重新编写各层级代码.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*武器类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weapon</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ad;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Weapon</span><span class="params">(<span class="keyword">int</span> ad)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ad = ad;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"怪物掉"</span> + ad + <span class="string">"滴血!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*英雄类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Weapon weapon;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(Weapon weapon)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">weapon.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*网络游戏*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetGame</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Hero hero;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NetGame</span><span class="params">(Hero hero)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hero = hero;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">hero.attack();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*人*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> NetGame game;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(NetGame game)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.game = game;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">game.startGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*测试类*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Weapon weapon = <span class="keyword">new</span> Weapon(<span class="number">50</span>);</span><br><span class="line">Hero hero = <span class="keyword">new</span> Hero(weapon);</span><br><span class="line">NetGame game = <span class="keyword">new</span> NetGame(hero);</span><br><span class="line">Person xiaoZhou = <span class="keyword">new</span> Person(game);</span><br><span class="line">xiaoZhou.playGame();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>看图</strong></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201019025713.png" alt="20201019025713"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><blockquote><p>案例来到这里我们来进行简单的总结,其实由以上的案例我们不仅解释了什么是<strong>依赖倒置原则</strong>,还顺带讲解了2个概念.</p><ul><li><p><strong>控制反转</strong>:  <strong>Inversion of Control</strong>   , 我们可以通过控制反转的思路来实现依赖倒置.</p></li><li><p><strong>依赖注入</strong>:  <strong>Dependency Injection</strong>  , 要想实现控制反转,可以通过依赖注入的形式将低层的对象注入到上层,由上层管理下层.</p></li></ul><p>那么这些又和Spring有什么关系呢?接着往下看咯</p></blockquote><h4 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h4><blockquote><p>从上个案例中我们使用控制反转的思路,利用依赖注入的方式实现了依赖倒置.但是在测试类中我们在方法体内创建了大量的对象.看测试类代码</p></blockquote><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Weapon weapon = <span class="keyword">new</span> Weapon(<span class="number">50</span>);</span><br><span class="line">Hero hero = <span class="keyword">new</span> Hero(weapon);</span><br><span class="line">NetGame game = <span class="keyword">new</span> NetGame(hero);</span><br><span class="line">Person xiaoZhou = <span class="keyword">new</span> Person(game);</span><br><span class="line">xiaoZhou.playGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个测试类中的体现就是 , 小周同学为了玩这个网络游戏,不仅要自己创建网络游戏,还得创建英雄,还得创建一把武器.</p><p>再好比,今天客户(Customer)想要买条内裤,结果首先跑去市场(Market)然后去了店铺(Store),接着找到店员(Salesman),最后买了一条内裤(Underware).</p><p>但是在现在的信息化和互联网时代,这种操作是不是很费时间的操作?如果我们找一个”可靠”的<strong>第三方平台</strong>(TaoBao),在平台上搜索想要购买的商品,点击购买,最后内裤(Underware)邮寄到手上,尽管可能在<strong>第三方平台</strong>中会产生很多其他的对象,比如也有商铺(Store),客服(CustomerService),快递公司(Express)…等等对象,但Customer根本不需要操心这些对象是如何运行和操作的,只要内裤到手就OK!</p><p>那么这个管理这些对象的<strong>第三方平台</strong>是什么?对了,就是今天要讲的Spring.</p><p>再来回顾<strong>Spring</strong>的概念 : <strong>Spring就是一个管理bean的容器,作为控制反转的容器实现.</strong>也就是说Spring就是一个大的容器帮助我们管理一些bean对象,而这些bean对象一般都是为了实现控制反转所创建的.也就是这些.    </p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201019214510.png" alt="20201019214510" style="zoom: 80%;" /><p><strong>有了这个容器后,就可以自动对我们代码里的对象进行初始化</strong>,当然我们需要通过<strong>配置</strong>来对这些对象进行自动化处理,不再需要我们手动的在代码中去写大量的new来实现,<strong>并且我们在使用最上层的实例时也不需要去关心其实现细节</strong>.这就是<strong>控制反转容器</strong>,而其实现就是我们大名鼎鼎的<strong>Spring</strong>了.</p><h4 id="最终总结"><a href="#最终总结" class="headerlink" title="最终总结"></a>最终总结</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201019220631.png" alt="20201019220631"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030111805.png&quot; alt=&quot;20201030111805&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="spring" scheme="http://fightlee.fun/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>javaweb篇-反射(二)</title>
    <link href="http://fightlee.fun/javaweb%E7%AF%87-reflection2.html"/>
    <id>http://fightlee.fun/javaweb%E7%AF%87-reflection2.html</id>
    <published>2020-10-10T06:47:26.000Z</published>
    <updated>2020-10-30T03:26:25.180Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png" alt="20201030112614"></p><a id="more"></a><h1 id="JavaWeb-反射-二"><a href="#JavaWeb-反射-二" class="headerlink" title="JavaWeb-反射(二)"></a>JavaWeb-反射(二)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文继续深入学习反射&amp;使用反射改造之前Servlet案例中的代码结构</p></blockquote><h3 id="回顾前文"><a href="#回顾前文" class="headerlink" title="回顾前文"></a>回顾前文</h3><ul><li><p>从前文已经了解想要创建一个类的对象,并不是只有通过<strong>new</strong>关键字才能创建.</p></li><li><p>想要调用一个类的属性和其方法,只需先拿到该类的字节码文件即可.</p></li><li><p>获取Class对象的三种方式中其中一种只需要直到该Class所在的路径名即可.</p></li></ul><h3 id="问题解析"><a href="#问题解析" class="headerlink" title="问题解析"></a>问题解析</h3><blockquote><p>前文一开始抛出了3个Servlet相关的问题,我们按照之前的学习一个一个解答</p></blockquote><ol><li><p>Servlet中的service()方法怎么调用的?</p><p>答 : service()方法能够成功运行,即证明在Servlet被访问时,该Servlet对象被创建,并调用了service()方法</p></li><li><p>service()方法能调用的话?Servlet对象在哪里创建的?</p><p>答 : Servlet的创建很明显不是由我们当前Web应用手动通过new来创建的,是装载Servlet的容器Tomcat帮助我们创建了该Servlet对象.</p></li><li><p>为什么需要在web.xml中配置Servlet?</p><p>答 : Tomcat要想创建当前访问的Servlet对象,就需要知道该Servlet的字节码文件路径,通过路径名就可以获取该Servlet的字节码文件对象,然后通过反射中的newInstance()方法创建其对象,并获取Servlet中的service()方法对应的Method对象,再执行,所以我们需要在web.xml中对Servlet路径进行配置.</p></li></ol><h3 id="问题模拟"><a href="#问题模拟" class="headerlink" title="问题模拟"></a>问题模拟</h3><p><strong>模拟Tomcat容器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.refleciton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 模拟Tomcat容器</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWeb</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1.通过解析web.xml文件得到Servlet的路径(这里采用jsoup框架解析)</span></span><br><span class="line"><span class="comment">//a.通过pares方法得到文档document对象</span></span><br><span class="line">Document document = Jsoup.parse(<span class="keyword">new</span> File(<span class="string">"web.xml"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="comment">//b.通过document对象获取标签中的内容---和js类似</span></span><br><span class="line">Elements elements = document.getElementsByTag(<span class="string">"servlet-name"</span>);</span><br><span class="line">String className = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line"><span class="comment">//找到匹配的servlet-name标签</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"ServletDemo"</span>.equals(element.html())) &#123;</span><br><span class="line"><span class="comment">//该元素的下一个元素标签中的html内容即为全路径.</span></span><br><span class="line">className = element.nextElementSibling().html();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(className != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//2.根据路径名获取对应Servlet的Class对象</span></span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line"><span class="comment">//3.使用Class对象创建Servlet的实例</span></span><br><span class="line">Object obj = clazz.newInstance();</span><br><span class="line"><span class="comment">//4.获取Servlet中的service方法</span></span><br><span class="line">Method method = clazz.getMethod(<span class="string">"service"</span>, Object<span class="class">.<span class="keyword">class</span>,<span class="title">Object</span>.<span class="title">class</span>)</span>;</span><br><span class="line"><span class="comment">//5.调用service , 使用1 和 2 模拟request和response对象</span></span><br><span class="line">method.invoke(obj, <span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模拟Servlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.refleciton.other;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 模拟Web应用中的Servlet</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(Object request,Object response)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"service run .... "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模拟web.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.java.refleciton.other.ServletDemo<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>aaa.bbb.ccc<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service run ....</span><br></pre></td></tr></table></figure><p><strong>结论</strong></p><ol><li>模拟时解析使用的是jsoup爬虫框架,使用方式参考JS&amp;JQuery</li><li>Tomcat容器中的代码只有一处需要改动,就是if判断中的Servlet的名称,实际上Tomcat容器可以根据web.xml中的url-parttern中的虚拟路径上的servlet-mapping标签获取servlet-name.这里简化了操作.</li><li>只是Java环境,所以使用了Object对象代替了HttpServletRequest&amp;HttpServletResponse对象</li></ol><p><strong>有图有真相</strong></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201010160719.png" alt="20201010160719"></p><h2 id="案例改造"><a href="#案例改造" class="headerlink" title="案例改造"></a>案例改造</h2><blockquote><p>之前在servlet4中我们实现了一个登录注册的小案例,本篇文章中我们来对此案例利用反射进行优化改造.</p><p>优化内容 : </p><ol><li>对于Servlet的优化</li><li>应用程序中的对象的创建优化</li><li>数据库查询的优化</li></ol></blockquote><h3 id="1-Servlet的优化"><a href="#1-Servlet的优化" class="headerlink" title="1)Servlet的优化"></a>1)Servlet的优化</h3><h4 id="优化背景"><a href="#优化背景" class="headerlink" title="优化背景"></a>优化背景</h4><blockquote><p>在案例中,我们仅仅完成了一些用户相关的需求就创建了多个Servlet,开发后期用户相关的业务增加的同时,会导致Servlet也同时对比增加,会导致项目越来越庞大,后期的可维护性也非常差,当对业务进行增删时,同时需要对项目中的Servlet进行频繁的修改,比如</p><ol><li>登录业务–LoginServlet</li><li>注册业务–RegisterServlet</li><li>修改用户信息业务–UpdateUserServlet</li><li>删除用户信息业务–DeleteUserByIdServlet</li><li>等等..</li></ol><p>所以在此背景下,我们需要思考如何将所有业务相关的Servlet整合到一个Servlet中,比如用户相关的就封装为UserServlet,商品相关的就封装为ProductServlet,等等.</p></blockquote><h4 id="优化步骤"><a href="#优化步骤" class="headerlink" title="优化步骤"></a>优化步骤</h4><ol><li>将多个相关的业务Servlet整合到一个Servlet中,如将LoginServlet&amp;RegisterServlet整合为UserServlet</li></ol><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201015221102.png" alt="20201015221102"></p><p><strong>初步改造后的UserServlet.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.java.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.java.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.java.service.imp.UserServiceImp;</span><br><span class="line"><span class="keyword">import</span> com.java.utils.ResponseData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//将2个业务中都有的设置字符集代码抽取出来</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.获取请求参数中的方法名</span></span><br><span class="line">String methodName = request.getParameter(<span class="string">"method"</span>);</span><br><span class="line"><span class="comment">//2.根据methodName决定要执行的方法</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"doLogin"</span>.equals(methodName)) &#123;</span><br><span class="line">doLogin(request, response);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"doRegister"</span>.equals(methodName)) &#123;</span><br><span class="line">doRegister(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...等等其他业务</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doLogin</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//2.获取请求中的表单参数</span></span><br><span class="line">String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line"><span class="comment">//3.调用业务层UserService实现登录业务</span></span><br><span class="line">UserService us = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line"><span class="comment">//4.准备回传参数对象</span></span><br><span class="line">ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">User user = us.loginByUserNameAndPassword(userName, password);</span><br><span class="line"><span class="keyword">if</span>(user != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//登录成功</span></span><br><span class="line">responseData = responseData.success(<span class="string">"登陆成功"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//登录失败</span></span><br><span class="line">responseData = responseData.fail(<span class="string">"用户名密码不正确..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用response的getWriter将其写回</span></span><br><span class="line"><span class="comment">//使用第三方工具fastjson将对象转换成Json字符串</span></span><br><span class="line">String jsonString = JSON.toJSONString(responseData);</span><br><span class="line"><span class="comment">//写回字符串</span></span><br><span class="line">response.getWriter().write(jsonString);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doRegister</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//2.获取请求中的表单参数</span></span><br><span class="line">String userEmail = request.getParameter(<span class="string">"userEmail"</span>);</span><br><span class="line">String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line"><span class="comment">//3.调用业务层UserService实现注册业务</span></span><br><span class="line">UserService us = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line"><span class="comment">//4.准备回传参数对象</span></span><br><span class="line">ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> result = us.registerWithUserInfo(userName,password,userEmail);</span><br><span class="line"><span class="keyword">if</span>(result) &#123;</span><br><span class="line">responseData = responseData.success(<span class="string">"注册成功,请重新登陆.."</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">responseData = responseData.success(<span class="string">"注册失败,请稍后再试!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用第三方工具fastjson将对象转换成Json字符串</span></span><br><span class="line">String jsonString = JSON.toJSONString(responseData);</span><br><span class="line"><span class="comment">//写回字符串</span></span><br><span class="line">response.getWriter().write(jsonString);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>经过1步骤的优化后,项目开发中涉及到用户相关的业务操作全都可以封装在一个UserServlet中,并且通过不同方法名称就能调用对应的业务逻辑.</p></blockquote><ol start="2"><li>如果在项目中有很多的Servlet,那我们可以对所有的Servlet中的代码继续进行抽取,比如doGet()和doPost()方法.</li></ol><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201015223414.png" alt="20201015223414" style="zoom: 67%;" /><p><strong>抽取出的BaseServlet.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//将2个业务中都有的设置字符集代码抽取出来</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.获取请求参数中的方法名</span></span><br><span class="line">String methodName = request.getParameter(<span class="string">"method"</span>);</span><br><span class="line"><span class="comment">//2.使用反射根据methodName决定要执行的方法</span></span><br><span class="line">Class&lt;? extends BaseServlet&gt; clazz = <span class="keyword">this</span>.getClass();</span><br><span class="line">Method method = clazz.getMethod(methodName, HttpServletRequest<span class="class">.<span class="keyword">class</span>,<span class="title">HttpServletResponse</span>.<span class="title">class</span>)</span>;</span><br><span class="line"><span class="comment">//3.方法调用</span></span><br><span class="line">method.invoke(<span class="keyword">this</span>, request,response);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有了BaseServlet后,UserServlet或者其他的Servlet中就不需要再去重写doGet或者doPost方法,但要注意的是请求参数中的<strong>method的值必须和方法名一一对应</strong></p></blockquote><ol start="3"><li>在前2步的基础上,我们可以对UserServlet下的doLogin方法或者其他业务逻辑方法的返回值进行相关的封装</li></ol><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201015225718.png" alt="20201015225718" style="zoom:80%;" /><p><strong>优化后的BaseServlet.java和UserServlet.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//将2个业务中都有的设置字符集代码抽取出来</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.获取请求参数中的方法名</span></span><br><span class="line">String methodName = request.getParameter(<span class="string">"method"</span>);</span><br><span class="line"><span class="comment">//2.使用反射根据methodName决定要执行的方法</span></span><br><span class="line">Class&lt;? extends BaseServlet&gt; clazz = <span class="keyword">this</span>.getClass();</span><br><span class="line">Method method = clazz.getMethod(methodName, HttpServletRequest<span class="class">.<span class="keyword">class</span>,<span class="title">HttpServletResponse</span>.<span class="title">class</span>)</span>;</span><br><span class="line"><span class="comment">//3.方法调用</span></span><br><span class="line">Object result = method.invoke(<span class="keyword">this</span>, request,response);</span><br><span class="line"><span class="keyword">if</span>(result != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//返回值内容是对象还是字符串?</span></span><br><span class="line"><span class="keyword">if</span>(result <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line"><span class="comment">//如果是字符串---&gt;做路径的跳转,一种是重定向,一种请求转发</span></span><br><span class="line">String contextPath = request.getContextPath();</span><br><span class="line">String path = result.toString();</span><br><span class="line">String viewName = <span class="keyword">null</span>;<span class="comment">//需要重新定下的视图名称</span></span><br><span class="line"><span class="keyword">if</span>(path.contains(<span class="string">"redirect"</span>)) &#123;</span><br><span class="line"><span class="comment">//重定向</span></span><br><span class="line">viewName = path.substring(<span class="number">9</span>) + <span class="string">".jsp"</span>;</span><br><span class="line">response.sendRedirect(contextPath + viewName);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//请求转发</span></span><br><span class="line">viewName = path + <span class="string">".jsp"</span>;</span><br><span class="line">request.getRequestDispatcher(viewName).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果是对象---&gt;做Ajax请求,利用response对象写json字符串回去</span></span><br><span class="line">response.getWriter().write(JSON.toJSONString(result));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.java.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.java.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.java.service.imp.UserServiceImp;</span><br><span class="line"><span class="keyword">import</span> com.java.utils.ResponseData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseData <span class="title">doLogin</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//2.获取请求中的表单参数</span></span><br><span class="line">String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line"><span class="comment">//3.调用业务层UserService实现登录业务</span></span><br><span class="line">UserService us = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line"><span class="comment">//4.准备回传参数对象</span></span><br><span class="line">ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">User user = us.loginByUserNameAndPassword(userName, password);</span><br><span class="line"><span class="keyword">if</span>(user != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//登录成功,返回成功状态对象</span></span><br><span class="line"><span class="keyword">return</span> responseData.success(<span class="string">"登陆成功"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//登录失败,返回失败状态对象</span></span><br><span class="line"><span class="keyword">return</span> responseData.fail(<span class="string">"用户名密码不正确..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> responseData.fail(<span class="string">"服务器操作失败...请稍候再试!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseData <span class="title">doRegister</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//2.获取请求中的表单参数</span></span><br><span class="line">String userEmail = request.getParameter(<span class="string">"userEmail"</span>);</span><br><span class="line">String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line"><span class="comment">//3.调用业务层UserService实现注册业务</span></span><br><span class="line">UserService us = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line"><span class="comment">//4.准备回传参数对象</span></span><br><span class="line">ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> result = us.registerWithUserInfo(userName,password,userEmail);</span><br><span class="line"><span class="keyword">if</span>(result) &#123;</span><br><span class="line"><span class="keyword">return</span> responseData.success(<span class="string">"注册成功,请重新登陆.."</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> responseData.fail(<span class="string">"注册失败,请稍后再试!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> responseData.fail(<span class="string">"服务器操作失败...请稍候再试!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>经过最终的优化,在Servlet中只需要通过对应的返回值就能决定当前是需要<strong>请求转发</strong>/<strong>重定向</strong>至某个路径,还是返回<strong>Json对象</strong>给前台使用.</p></blockquote><h3 id="2-数据库查询优化"><a href="#2-数据库查询优化" class="headerlink" title="2)数据库查询优化"></a>2)数据库查询优化</h3><blockquote><p>我们先来分析下原有的UserDao中的查询的实现,分析存在的问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 根据用户名密码查询用户</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="function">User <span class="title">getUserByUserNameAndPassword</span><span class="params">(String userName,String password)</span><span class="keyword">throws</span> SQLException</span>;</span><br></pre></td></tr></table></figure><h4 id="优化背景-1"><a href="#优化背景-1" class="headerlink" title="优化背景"></a>优化背景</h4><blockquote><p>   <strong>存在问题</strong> : </p><ol><li><p>如果在原有的接口中继续添加相关查询方法,比如根据邮箱密码查询用户,或者其他条件查询用户,需要增加其他方法.</p></li><li><p>在User相关dao操作中需要做查询返回对应User对象,其他比如Product,Order的相关dao操作中,也需要返回对应的Product或者Order对象,在业务逻辑中封装对象的操作非常繁琐.</p></li></ol></blockquote><h4 id="优化步骤-1"><a href="#优化步骤-1" class="headerlink" title="优化步骤"></a>优化步骤</h4><ol><li>修改方法的参数为可变参数</li></ol><p><strong>JDBCUtils.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取连接...</span></span><br><span class="line"><span class="comment">//释放资源...</span></span><br><span class="line"><span class="comment">//封装查询方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserByClause</span><span class="params">(Object... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果有Product</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">getProductByClause</span><span class="params">(Object... args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果有Order...</span></span><br></pre></td></tr></table></figure><ol start="2"><li>通过在参数中指定对应的字节码文件返回其对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装查询方法</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String sql, Class&lt;T&gt; clazz , Object... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1.声明T对象</span></span><br><span class="line">    T t = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//2.根据参数中传入的字节码文件 创建其对象</span></span><br><span class="line">    t = clazz.newInstance();</span><br><span class="line">    Connection conn = getConnection();</span><br><span class="line">    PreparedStatement pstmt = conn.prepareStatement(sql);</span><br><span class="line">    <span class="comment">//3.遍历传入的参数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">        pstmt.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.执行查询</span></span><br><span class="line">    ResultSet rs = pstmt.executeQuery();</span><br><span class="line">    <span class="comment">//5.获取结果集中的元数据对象</span></span><br><span class="line">    ResultSetMetaData metaData = rs.getMetaData();</span><br><span class="line">    <span class="keyword">if</span>(rs.next()) &#123;<span class="comment">//如果有数据</span></span><br><span class="line">        <span class="comment">//6.创建Map封装数据库中的字段名以及对应的值</span></span><br><span class="line">        Map&lt;String, Object&gt; map = getMapFromResultSet(rs, metaData);</span><br><span class="line">        <span class="comment">//7.遍历map,并将class字节码文件中的每个字段赋值</span></span><br><span class="line">        populateBean(clazz, t, map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">selectList</span><span class="params">(String sql, Class&lt;T&gt; clazz , Object... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1.声明集合对象</span></span><br><span class="line">    List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">    <span class="comment">//2.准备Connection&amp;Statement对象</span></span><br><span class="line">    Connection conn = getConnection();</span><br><span class="line">    PreparedStatement pstmt = conn.prepareStatement(sql);</span><br><span class="line">    <span class="comment">//3.判断&amp;遍历传入的参数</span></span><br><span class="line">    <span class="keyword">if</span>(args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            pstmt.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.执行查询</span></span><br><span class="line">    ResultSet rs = pstmt.executeQuery();</span><br><span class="line">    <span class="comment">//5.获取结果集中的元数据对象</span></span><br><span class="line">    ResultSetMetaData metaData = rs.getMetaData();</span><br><span class="line">    <span class="keyword">while</span>(rs.next()) &#123;<span class="comment">//如果有一行数据</span></span><br><span class="line">        <span class="comment">//6.创建一个对象</span></span><br><span class="line">        T t = clazz.newInstance();</span><br><span class="line">        <span class="comment">//7.使用Map封装表中字段和值</span></span><br><span class="line">        Map&lt;String, Object&gt; map = getMapFromResultSet(rs, metaData);</span><br><span class="line">        <span class="comment">//8.遍历Map给class中的字段赋值</span></span><br><span class="line">        populateBean(clazz, t, map);</span><br><span class="line">        <span class="comment">//9.集合保存对象</span></span><br><span class="line">        list.add(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*封装Bean*/</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">populateBean</span><span class="params">(Class&lt;T&gt; clazz, T t, Map&lt;String, Object&gt; map)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;String, Object&gt; entry : map.entrySet()) &#123;</span><br><span class="line">        Field field = clazz.getDeclaredField(entry.getKey());</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(t, entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*使用Map封装表中的字段名&amp;值,并返回*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">getMapFromResultSet</span><span class="params">(ResultSet rs, ResultSetMetaData metaData)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; metaData.getColumnCount(); i++) &#123;</span><br><span class="line">        String labelName = metaData.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line">        Object value = rs.getObject(labelName);</span><br><span class="line">        map.put(labelName, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>优化后,涉及到查询的单个对象查询的操作可以使用selectOne,多个对象查询的操作可以使用selectList.在查询到对象的同时会根据表中和Bean中的字段自动封装并返回对象,是不是更为方便呢?</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>本篇文章继续使用反射对前文的问题进行解析,并对之前案例进行改造.</p></blockquote><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><div style="position: relative; width: 100%; height: 0;padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=669879000&bvid=BV1Na4y1L7jT&cid=246463513&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png&quot; alt=&quot;20201030112614&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="反射" scheme="http://fightlee.fun/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>javaweb篇-反射(一)</title>
    <link href="http://fightlee.fun/javaweb%E7%AF%87-reflection.html"/>
    <id>http://fightlee.fun/javaweb%E7%AF%87-reflection.html</id>
    <published>2020-10-10T00:49:50.000Z</published>
    <updated>2020-10-30T03:26:27.924Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png" alt="20201030112614"></p><a id="more"></a><h1 id="JavaWeb-反射-一"><a href="#JavaWeb-反射-一" class="headerlink" title="JavaWeb-反射(一)"></a>JavaWeb-反射(一)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="学习反射之前的几个小反思"><a href="#学习反射之前的几个小反思" class="headerlink" title="学习反射之前的几个小反思"></a>学习反射之前的几个小反思</h4><ol><li>Servlet中的service()方法怎么调用的?</li><li>service()方法能调用的话?Servlet对象在哪里创建的?</li><li>为什么需要在web.xml中配置Servlet?</li></ol><h4 id="什么是反射？"><a href="#什么是反射？" class="headerlink" title="什么是反射？"></a>什么是反射？</h4><blockquote><p>在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。 (摘自其他.)</p><p><strong>简单来说就是在当前应用中只要给我某个类的名称,就相当于我已经知道了当前类中的所有属性和方法,并且还能创建其类的对象(不管该类有没有私有化构造函数.),还能随意调用其属性和方法.</strong>光这么一说是不是就觉得反射很霸道?嗯?还是不懂?继续往下看吧.</p></blockquote><h4 id="为什么要使用反射"><a href="#为什么要使用反射" class="headerlink" title="为什么要使用反射?"></a>为什么要使用反射?</h4><blockquote><p>在上面提到反射时,是不是就觉得反射有悖于面向对象的原则.学习面向对象时,面向对象的特征之一就是封装,而封装的好处就是隐藏类中某些方法的实现和属性,不直接暴露给外界调用,增强程序的安全性.但是一旦有了反射,类中的私有化设置将是一滩笑话,无论你是私有还是非私有,这个类就像一个摆在你面前被捆缚的小绵羊,任你宰割.</p><p>那么我们为什么还要去使用他呢?因为我们可以利用这些霸道的设定来完成很多我们之前完成不了的事情,让我们的程序更加智能化和自动化,是动态语言框架的关键&amp;基础.比如最开始上面的3个小问题,都是由反射来解决的.那么反射是如何做到这些的呢?继续往下分解</p></blockquote><h2 id="反射中的几个重要对象"><a href="#反射中的几个重要对象" class="headerlink" title="反射中的几个重要对象"></a>反射中的几个重要对象</h2><blockquote><p>反射的具体使用要从下面几个对象开始.</p></blockquote><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><blockquote><p>Class 和 class , class是关键字,代表字节码文件,而Class则为描述class字节码文件的类,这个字节码文件既可以是类也可以是接口.</p></blockquote><h4 id="Class中的重要方法"><a href="#Class中的重要方法" class="headerlink" title="Class中的重要方法"></a>Class中的重要方法</h4><blockquote><p>Class类中有很多方法,挑几个我们学习时需要的.</p></blockquote><table><thead><tr><th>方法</th><th>方法描述</th></tr></thead><tbody><tr><td>static Class&lt;?&gt; <strong>forName</strong>(String className)</td><td>根据类或者接口的全名返回相关的类对象</td></tr><tr><td>String <strong>getName</strong>()</td><td>获取类的全名(包名 + 类名)</td></tr><tr><td>T <strong>newInstance</strong>()</td><td>创建该字节码文件的对象</td></tr><tr><td>Class&lt;?&gt;[] <strong>getInterfaces</strong>()</td><td>获取该类上的所有接口字节码文件</td></tr><tr><td>ClassLoader <strong>getClassLoader</strong>()</td><td>获取类加载器</td></tr></tbody></table><blockquote><p>知道一些常用的方法后,如何去获取Class对象呢?</p></blockquote><ul><li>根据该类对象获取其Class字节码文件对象</li><li>根据类名.class直接返回Class字节码文件对象</li><li>使用Class.forName(String className)根据名称获取字节码文件对象</li></ul><p><strong>Student.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.refleciton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Student对象初始化了..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ReflectionDemo01.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.refleciton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取字节码文件对象,调用方法</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionDemo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1.根据该类对象获取其Class字节码文件对象</span></span><br><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">Class clazz1 = student.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.根据类名.class直接返回Class字节码文件对象</span></span><br><span class="line">Class clazz2 = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.使用Class.forName(String className)根据名称获取字节码文件对象</span></span><br><span class="line">Class clazz3 = Class.forName(<span class="string">"com.java.refleciton.Student"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.判断3个Class对象是否相等</span></span><br><span class="line">System.out.println(clazz1 == clazz2 &amp;&amp; clazz2 == clazz3);<span class="comment">//true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5.调用newInstance()方法创建该类对象,类的空参构造运行则成功创建</span></span><br><span class="line">Object obj = clazz1.newInstance();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student对象初始化了...</span><br><span class="line">true</span><br><span class="line">Student对象初始化了...</span><br></pre></td></tr></table></figure><p><strong>结论</strong></p><ol><li>前3步分别通过不同方式获取的是同一个字节码文件</li><li>第3步中的forName()参数名称必须是该类的 完整路径名 = 包名 + 类名</li><li>第5步中的newInstance()方法和new Student()一样都是走的该类的空参构造函数</li></ol><h3 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h3><blockquote><p>在上文中提到获取了Class对象后,我们可以获取该Class对象中的任意方法和属性.</p></blockquote><h4 id="Class中获取Constructor涉及的方法"><a href="#Class中获取Constructor涉及的方法" class="headerlink" title="Class中获取Constructor涉及的方法"></a>Class中获取Constructor涉及的方法</h4><table><thead><tr><th>方法</th><th>方法描述</th></tr></thead><tbody><tr><td>Constructor <strong>getConstructor</strong>(Class… parameterTypes)</td><td>获取该字节码文件中对应参数公有构造器</td></tr><tr><td>Constructor[] <strong>getConstructors</strong>()</td><td>获取该字节码文件中所有公有构造器</td></tr><tr><td>Constructor <strong>getDeclaredConstructor</strong>(Class… parameterTypes)</td><td>获取该字节码文件中对应参数的构造器(无论私有公有)</td></tr><tr><td>Constructor[] <strong>getDeclaredConstructors</strong>()</td><td>获取该字节码文件中所有的构造器</td></tr></tbody></table><h4 id="Constructor中常用方法"><a href="#Constructor中常用方法" class="headerlink" title="Constructor中常用方法"></a>Constructor中常用方法</h4><table><thead><tr><th>方法</th><th>方法描述</th></tr></thead><tbody><tr><td>T <strong>newInstance</strong>(Object… initargs)</td><td>通过参数返回该字节码文件对象,并初始化</td></tr><tr><td><strong>setAccessible</strong>(boolean flag)</td><td>设置访问权限</td></tr></tbody></table><p><strong>Student.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.refleciton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"空参构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age,String sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Student [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">", sex="</span> + sex + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*空参无返回值方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">noReturnsWithoutArgs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"noReturnsWithoutArgs method run...."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*带参有返回值方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">returnStringWithArgs</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> msg + <span class="string">" run"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ReflectionDemo02.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.refleciton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionDemo02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1.获取字节码文件对象</span></span><br><span class="line">Class clazz = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">//2.获取该字节码文件对象中对应参数列表的公有构造器 --这里调用2个参数的</span></span><br><span class="line">Constructor constructor = clazz.getConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line"><span class="comment">//3.通过构造器创建其对象并强转</span></span><br><span class="line">Student stu = (Student) constructor.newInstance(<span class="string">"张三"</span>,<span class="number">11</span>);</span><br><span class="line"><span class="comment">//4.输出stu</span></span><br><span class="line">System.out.println(stu);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.重新调用3个参数的私有构造器</span></span><br><span class="line">Constructor constructor2 = clazz.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>,<span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line"><span class="comment">//6.访问私有的构造器必须先设置访问权限为可访问</span></span><br><span class="line">constructor2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//7.继续调用</span></span><br><span class="line">Student stu1 = (Student) constructor2.newInstance(<span class="string">"王五"</span>,<span class="number">22</span>,<span class="string">"女"</span>);</span><br><span class="line"><span class="comment">//8.查看输出</span></span><br><span class="line">System.out.println(stu1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//9.获取公有构造器数组</span></span><br><span class="line">Constructor[] constructors = clazz.getConstructors();</span><br><span class="line">System.out.println(Arrays.asList(constructors));</span><br><span class="line"><span class="comment">//10.获取所有类中定义的构造器数组</span></span><br><span class="line">Constructor[] declaredConstructors = clazz.getDeclaredConstructors();</span><br><span class="line">System.out.println(Arrays.asList(declaredConstructors));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student [name=张三, age=11, sex=null]</span><br><span class="line">Student [name=王五, age=22, sex=女]</span><br><span class="line">[public com.java.refleciton.Student(java.lang.String,int), public com.java.refleciton.Student()]</span><br><span class="line">[private com.java.refleciton.Student(java.lang.String,int,java.lang.String), public com.java.refleciton.Student(java.lang.String,int), public com.java.refleciton.Student()]</span><br></pre></td></tr></table></figure><p><strong>结论</strong></p><ol><li>调用getConstructor()/getDeclaredConstructor()的参数为对应参数类型的字节码文件类型,如String.class,int.class等</li><li>调用newInstance()方法时,需传入对应参数类型的值</li><li>调用私有构造器需使用getDeclaredConstructor()方法</li><li>拿到私有构造器后,如需要使用该构造器对象必须先设置其访问权限为可访问,即setAccessible(true);</li></ol><h3 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h3><h4 id="Class中获取Field涉及的方法"><a href="#Class中获取Field涉及的方法" class="headerlink" title="Class中获取Field涉及的方法"></a>Class中获取Field涉及的方法</h4><table><thead><tr><th>方法</th><th>方法描述</th></tr></thead><tbody><tr><td>Field <strong>getField</strong>(String name)</td><td>根据字段名返回公有Field对象</td></tr><tr><td>Field[] <strong>getFields</strong>()</td><td>获取所有的公有Field对象</td></tr><tr><td>Field <strong>getDeclaredField</strong>(String name)</td><td>根据字段名返回<strong>任意</strong>Field对象</td></tr><tr><td>Field[] <strong>getDeclaredFields</strong>()</td><td>获取<strong>所有</strong>Field对象</td></tr></tbody></table><h4 id="Field中常用方法"><a href="#Field中常用方法" class="headerlink" title="Field中常用方法"></a>Field中常用方法</h4><table><thead><tr><th>方法</th><th>方法描述</th></tr></thead><tbody><tr><td>Object <strong>get</strong>(Object obj)</td><td>获取obj对象中对应字段的值</td></tr><tr><td><strong>set</strong>(Object obj, Object value)</td><td>给obj对象的当前字段赋值</td></tr><tr><td><strong>setAccessible</strong>(boolean flag)</td><td>设置访问权限</td></tr></tbody></table><p><strong>ReflectionDemo03.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.refleciton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionDemo03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1.获取字节码文件对象</span></span><br><span class="line">Class clazz = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">//2.获取Student对象中私有的字段name,并赋值</span></span><br><span class="line">Field field = clazz.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line"><span class="comment">//3.创建对象</span></span><br><span class="line">Object obj = clazz.newInstance();</span><br><span class="line"><span class="comment">//4.设置访问权限</span></span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//5.赋值</span></span><br><span class="line">field.set(obj, <span class="string">"李四"</span>);</span><br><span class="line"><span class="comment">//6.查看输出</span></span><br><span class="line">System.out.println((Student)obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student [name=李四, age=0, sex=null]</span><br></pre></td></tr></table></figure><p><strong>结论</strong></p><ol><li>和Constructor一样,获取私有的字段需要使用getDeclaredField()/getDeclaredFields()方法</li><li>使用私有Field时时需要先<strong>设置访问权限</strong></li></ol><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><h4 id="Class中获取Method涉及的方法"><a href="#Class中获取Method涉及的方法" class="headerlink" title="Class中获取Method涉及的方法"></a>Class中获取Method涉及的方法</h4><table><thead><tr><th>方法</th><th>方法描述</th></tr></thead><tbody><tr><td>Method <strong>getMethod</strong>(String name, Class… parameterTypes)</td><td>根据对应方法的参数类型和名称获取公有Method对象</td></tr><tr><td>Method[] <strong>getMethods</strong>()</td><td>获取所有公有Method对象</td></tr><tr><td>Method <strong>getDeclaredMethod</strong>(String name, Class… parameterTypes)</td><td>根据对应方法的参数类型和名称获取<strong>任意</strong>Method对象</td></tr><tr><td>Method[] <strong>getDeclaredMethods</strong>()</td><td>获取<strong>所有</strong>Method对象</td></tr></tbody></table><h4 id="Method中常用方法"><a href="#Method中常用方法" class="headerlink" title="Method中常用方法"></a>Method中常用方法</h4><table><thead><tr><th>方法</th><th>方法描述</th></tr></thead><tbody><tr><td>Object <strong>invoke</strong>(Object obj,Object… args)</td><td>执行Method对象所对应的的方法,并返回其结果</td></tr><tr><td><strong>setAccessible</strong>(boolean flag)</td><td>设置访问权限</td></tr></tbody></table><p><strong>ReflectionDemo04.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.refleciton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionDemo04</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1.获取字节码文件对象</span></span><br><span class="line">Class clazz = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">//2.获取noReturnsWithoutArgs方法对象</span></span><br><span class="line">Method method = clazz.getMethod(<span class="string">"noReturnsWithoutArgs"</span>);</span><br><span class="line"><span class="comment">//3.创建对象</span></span><br><span class="line">Object obj = clazz.newInstance();</span><br><span class="line"><span class="comment">//4.执行方法</span></span><br><span class="line">Object returnValue = method.invoke(obj);</span><br><span class="line"><span class="comment">//5.打印返回值</span></span><br><span class="line">System.out.println(<span class="string">"returnValue : "</span> + returnValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.获取</span></span><br><span class="line">Method method2 = clazz.getDeclaredMethod(<span class="string">"returnStringWithArgs"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//7.设置访问权限</span></span><br><span class="line">method2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//8.调用方法</span></span><br><span class="line">Object returnValue2 = method2.invoke(obj,<span class="string">"This is another method"</span>);</span><br><span class="line"><span class="comment">//9.查看返回值并输出</span></span><br><span class="line">System.out.println(<span class="string">"returnValue2 : "</span> + returnValue2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">noReturnsWithoutArgs method run....</span><br><span class="line">returnValue : null</span><br><span class="line">returnValue2 : This is another method run</span><br></pre></td></tr></table></figure><p><strong>结论</strong></p><ol><li>和Constructor和Field一样,访问私有需使用getDeclaredMethod()/getDeclaredMethods()方法</li><li>使用私有Method前需要<strong>先设置访问权限</strong></li><li>和Constructor一样,想要调用对应的方法,不仅要给出正确的方法名称,还需要正确的参数列表(参数和参数类型).</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Class对象的三种获取方式 &amp; 和Class对象中的一些常用方法</li><li>Constructor的获取 &amp; Constructor的使用</li><li>Field的获取 &amp; Field的使用</li><li>Method的获取 &amp; Method的使用</li><li>注意私有&amp;非私有对象的获取方式&amp;使用时访问权限的设置</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png&quot; alt=&quot;20201030112614&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="反射" scheme="http://fightlee.fun/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>javaweb篇-servlet4</title>
    <link href="http://fightlee.fun/javaweb%E7%AF%87-servlet4.html"/>
    <id>http://fightlee.fun/javaweb%E7%AF%87-servlet4.html</id>
    <published>2020-10-06T09:11:02.000Z</published>
    <updated>2020-10-30T03:26:42.302Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png" alt="20201030112614"></p><a id="more"></a><h1 id="JavaWeb-Servlet-四"><a href="#JavaWeb-Servlet-四" class="headerlink" title="JavaWeb-Servlet(四)"></a>JavaWeb-Servlet(四)</h1><h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><blockquote><p>在前3篇文章中,我们应该已经掌握了Servlet和其中的Request和Response等对象的用法,这篇文章我们使用这些对象完成一个小案例.</p></blockquote><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><blockquote><p>完成简单登录注册.</p><p>使用技术 :</p><ul><li>前端 : html + css + js + jQuery(Ajax)</li><li>后台 : Servlet + JDBC</li></ul><p>工具&amp;环境 : jdk1.8 + tomcat8.0 + Eclipse</p></blockquote><h4 id="看图说话"><a href="#看图说话" class="headerlink" title="看图说话"></a>看图说话</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201007005949.png" alt="20201007005949"></p><p><strong>根据图片的逻辑我们1步1步来完成</strong>..</p><h3 id="一-创建工程-amp-前期准备"><a href="#一-创建工程-amp-前期准备" class="headerlink" title="一 . 创建工程&amp;前期准备"></a>一 . 创建工程&amp;前期准备</h3><blockquote><p>步骤如下 :</p><ol><li>创建工程ServletTest</li><li>创建对应包, 如 dao,service,utils,bean,web等常用包</li><li>在<strong>WebContent</strong>目录下的<strong>WEB-INF</strong>文件中导入所需的jar包,数据库连接包,fastjson包等.</li><li>导入数据库的数据文件和db.properties等文件.</li></ol></blockquote><h4 id="数据库SQL"><a href="#数据库SQL" class="headerlink" title="数据库SQL"></a><strong>数据库SQL</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for users</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`users`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span>  (</span><br><span class="line">  <span class="string">`userId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`userName`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`userEmail`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`userId`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">6</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = <span class="keyword">Compact</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of users</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`users`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'zhangsan'</span>, <span class="string">'zhangsan@qq.com'</span>, <span class="string">'123456'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`users`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'wangwu'</span>, <span class="string">'wangwu@qq.com'</span>, <span class="string">'666666'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`users`</span> <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'lisi'</span>, <span class="string">'lisi@qq.com'</span>, <span class="string">'666666'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`users`</span> <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'赵四'</span>, <span class="string">'zhaosi@qq.com'</span>, <span class="string">'999999'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`users`</span> <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">'老王'</span>, <span class="string">'laowang@qq.com'</span>, <span class="string">'laowang6666'</span>);</span><br></pre></td></tr></table></figure><p><strong>将以上代码在sqlyog或者navicat等工具中直接运行即可,记住选中自己的数据库哦..</strong></p><h4 id="数据库配置文件—-db-properties"><a href="#数据库配置文件—-db-properties" class="headerlink" title="数据库配置文件—-db.properties"></a>数据库配置文件—-db.properties</h4><p><strong>注意此文件放置在src文件夹目录下</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/自己的数据库名</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">数据库用户名</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">数据库密码</span></span><br></pre></td></tr></table></figure><h4 id="数据库工具类—-JDBCUtils"><a href="#数据库工具类—-JDBCUtils" class="headerlink" title="数据库工具类—-JDBCUtils"></a>数据库工具类—-JDBCUtils</h4><p><strong>此文件放置在utils包下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  简单的数据库连接工具类.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> String driverClassName = <span class="keyword">null</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="keyword">null</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> String username = <span class="keyword">null</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123; </span><br><span class="line">   <span class="comment">//使用类加载器来读取src文件夹路径</span></span><br><span class="line">   String path = JDBCUtils.class.getClassLoader().getResource("").getPath();</span><br><span class="line">   <span class="comment">//使用Properties对象读取db.properties文件</span></span><br><span class="line">   Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">   properties.load(<span class="keyword">new</span> FileReader(path + File.separator + <span class="string">"db.properties"</span>));</span><br><span class="line">   <span class="comment">//读取后给参数名赋值</span></span><br><span class="line">   driverClassName = properties.getProperty(<span class="string">"driverClassName"</span>);</span><br><span class="line">   url = properties.getProperty(<span class="string">"url"</span>);</span><br><span class="line">   username = properties.getProperty(<span class="string">"username"</span>);</span><br><span class="line">   password = properties.getProperty(<span class="string">"password"</span>);</span><br><span class="line">   <span class="comment">//加载数据库驱动</span></span><br><span class="line">   Class.forName(driverClassName);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">   <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//获取连接对象...</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//释放资源省略...</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里主要注意(类加载器获取路径&amp;Properties对象的使用)</strong></p><h4 id="测试数据库是否可用"><a href="#测试数据库是否可用" class="headerlink" title="测试数据库是否可用"></a>测试数据库是否可用</h4><p><strong>在web.servlet包下创建TestServlet,在doGet方法中对数据库连接进行测试…</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   Connection connection = JDBCUtils.getConnection();</span><br><span class="line">   System.out.println(connection);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> doPost(...)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>web.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>TestServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.java.web.servlet.TestServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>测试结果 : 对TestServlet进行访问,查看结果 . no problem!</strong></p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201007014150.png" alt="20201007014150" style="zoom:80%;" /><h4 id="定制回传参数工具类"><a href="#定制回传参数工具类" class="headerlink" title="定制回传参数工具类"></a>定制回传参数工具类</h4><p><strong>用于后台Servlet传回结果&amp;前端页面Ajax接收.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseData</span> </span>&#123;</span><br><span class="line"> <span class="comment">//1.返回的状态码 code status 1 2 3 4</span></span><br><span class="line"> <span class="comment">//2.返回的具体内容 单个对象/集合</span></span><br><span class="line"> <span class="comment">//3.返回的具体消息 登录成功/注册失败...</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line"> <span class="keyword">private</span> Object data;</span><br><span class="line"> <span class="keyword">private</span> String message;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> status;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.status = status;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.data = data;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.message = message;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ResponseData</span><span class="params">(<span class="keyword">int</span> status, Object data, String message)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>();</span><br><span class="line">  <span class="keyword">this</span>.status = status;</span><br><span class="line">  <span class="keyword">this</span>.data = data;</span><br><span class="line">  <span class="keyword">this</span>.message = message;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ResponseData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>();</span><br><span class="line">  <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//1.普通的方法 返回默认的成功信息 不携带对象只携带状态码</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> ResponseData <span class="title">success</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.status = GlobleConstants.SUCCESS;<span class="comment">//代表操作成功</span></span><br><span class="line">  <span class="keyword">this</span>.message = message;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//2.携带对象和具体的信息</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> ResponseData <span class="title">success</span><span class="params">(Object data,String message)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.data = data;</span><br><span class="line">  <span class="keyword">this</span>.message = message;</span><br><span class="line">  <span class="keyword">this</span>.status = GlobleConstants.SUCCESS;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//3.失败的具体信息</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> ResponseData <span class="title">fail</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.status = GlobleConstants.FAIL;</span><br><span class="line">  <span class="keyword">this</span>.message = message;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>GlobleConstants.java</strong></p><p><strong>用于封装静态常量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobleConstants</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SUCCESS = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FAIL = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用MVC设计模式编写Dao层-amp-Service层"><a href="#使用MVC设计模式编写Dao层-amp-Service层" class="headerlink" title="使用MVC设计模式编写Dao层&amp;Service层"></a>使用MVC设计模式编写Dao层&amp;Service层</h4><p><strong>Dao层</strong></p><p><strong>UserDao&amp;UserDaoImp</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">User <span class="title">getUserByUserNameAndPassword</span><span class="params">(String userName,String password)</span><span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">addUser</span><span class="params">(String userName, String password, String userEmail)</span><span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImp</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 根据用户名密码查询用户</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserByUserNameAndPassword</span><span class="params">(String userName, String password)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql = <span class="string">"select * from users where userName = ? and password = ?"</span>;</span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">PreparedStatement pstmt = conn.prepareStatement(sql);</span><br><span class="line">pstmt.setString(<span class="number">1</span>, userName);</span><br><span class="line">pstmt.setString(<span class="number">2</span>, password);</span><br><span class="line">ResultSet rs = pstmt.executeQuery();</span><br><span class="line"><span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserId(rs.getInt(<span class="number">1</span>));</span><br><span class="line">user.setUserName(rs.getString(<span class="number">2</span>));</span><br><span class="line">user.setUserEmail(rs.getString(<span class="number">3</span>));</span><br><span class="line">user.setPassword(rs.getString(<span class="number">4</span>));</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 添加用户信息</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addUser</span><span class="params">(String userName, String password, String userEmail)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql = <span class="string">"insert into users(userName,userEmail,password) values(?,?,?)"</span>;</span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">PreparedStatement pstmt = conn.prepareStatement(sql);</span><br><span class="line">pstmt.setString(<span class="number">1</span>, userName);</span><br><span class="line">pstmt.setString(<span class="number">2</span>, userEmail);</span><br><span class="line">pstmt.setString(<span class="number">3</span>, password);</span><br><span class="line"><span class="keyword">int</span> rows = pstmt.executeUpdate();</span><br><span class="line"><span class="keyword">return</span> rows &gt; <span class="number">0</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Service层</strong></p><p><strong>UserService&amp;UserServiceImp</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">User <span class="title">loginByUserNameAndPassword</span><span class="params">(String userName,String password)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">registerWithUserInfo</span><span class="params">(String userName, String password, String userEmail)</span><span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImp</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> UserDao udao = <span class="keyword">new</span> UserDaoImp();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">loginByUserNameAndPassword</span><span class="params">(String userName, String password)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> udao.getUserByUserNameAndPassword(userName, password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">registerWithUserInfo</span><span class="params">(String userName, String password, String userEmail)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> udao.addUser(userName,password,userEmail);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试Dao-amp-Service是否可用"><a href="#测试Dao-amp-Service是否可用" class="headerlink" title="测试Dao&amp;Service是否可用"></a>测试Dao&amp;Service是否可用</h4><p><strong>修改TestServlet代码,测试UserService.</strong></p><p><strong>TestServlet.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   UserService us = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line">   User user = us.loginByUserNameAndPassword(<span class="string">"zhangsan"</span>, <span class="string">"123456"</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> doPost(...);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试结果 : no problem!</strong></p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201008112137.png" alt="20201008112137" style="zoom:67%;" /><h4 id="工程前期准备此时截图"><a href="#工程前期准备此时截图" class="headerlink" title="工程前期准备此时截图"></a>工程前期准备此时截图</h4><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201008113914.png" alt="20201008113914" style="zoom:80%;" /><h3 id="二-制作登录页面-amp-注册页面"><a href="#二-制作登录页面-amp-注册页面" class="headerlink" title="二. 制作登录页面&amp;注册页面"></a>二. 制作登录页面&amp;注册页面</h3><blockquote><p>登录页面主要使用html + css + js完成,页面的制作不是我们的重点,直接上代码,同学们熟练的话直接copy即可</p></blockquote><p><strong>在WebContent中创建登录页面&amp;注册页面</strong></p><p><strong>custom.css</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="comment">/* 背景图片自己选一张</span></span><br><span class="line"><span class="comment"> background: url("img/bg.jpg");</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">/*使用背景颜色*/</span></span><br><span class="line"> <span class="attribute">background-color</span>: pink;</span><br><span class="line"> <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line"> <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"> <span class="attribute">position</span>: absolute;</span><br><span class="line"> <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"> <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"> <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line"> <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"> <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">6</span>);</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line"> <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">30px</span>;</span><br><span class="line"> <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.inputBox</span> &#123;</span><br><span class="line"> <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.inputBox</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">border</span>: none;</span><br><span class="line"> <span class="attribute">outline</span>: none;</span><br><span class="line"> <span class="attribute">background-color</span>: transparent;</span><br><span class="line"> <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line"> <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.inputBox</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line"> <span class="attribute">position</span>: absolute;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"> <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line"> <span class="attribute">pointer-events</span>: none;</span><br><span class="line"> <span class="attribute">transition</span>: .<span class="number">4s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.inputBox</span> <span class="selector-tag">input</span><span class="selector-pseudo">:valid</span> ~ <span class="selector-tag">label</span>, <span class="selector-class">.box</span> <span class="selector-class">.inputBox</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> ~ <span class="selector-tag">label</span> &#123;</span><br><span class="line"> <span class="attribute">top</span>: -<span class="number">18px</span>;</span><br><span class="line"> <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#6AC653</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-id">#submit</span> &#123;</span><br><span class="line"> <span class="attribute">background-color</span>: transparent;</span><br><span class="line"> <span class="attribute">border</span>: none;</span><br><span class="line"> <span class="attribute">outline</span>: none;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"> <span class="attribute">background-color</span>: <span class="number">#6AC653</span>;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line"> <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>login.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入css --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/custom.css"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Log In<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputBox"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span>&gt;</span>UserName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputBox"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Log In"</span> <span class="attr">id</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>register.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入css --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/custom.css"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sign Up<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputBox"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span>&gt;</span>UserName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputBox"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputBox"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"userEmail"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Sign Up"</span> <span class="attr">id</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>↓ <strong>WebContent目录</strong> : ↓</p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201008120929.png" alt="20201008120929" style="zoom:80%;" /><p>↓ <strong>页面效果 :</strong>↓</p><p><strong>登录 :</strong></p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201008120821.png" alt="20201008120821" style="zoom:80%;" /><p><strong>注册 :</strong></p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201008120843.png" alt="20201008120843" style="zoom:80%;" /><h3 id="三-后台Servlet编写"><a href="#三-后台Servlet编写" class="headerlink" title="三. 后台Servlet编写"></a>三. 后台Servlet编写</h3><h4 id="登录前后台修改"><a href="#登录前后台修改" class="headerlink" title="登录前后台修改"></a>登录前后台修改</h4><p><strong>在web.servlet包下创建LoginServlet&amp;RegsiterServlet</strong></p><p><strong>LoginServlet.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.java.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.java.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.java.service.imp.UserServiceImp;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 登录后台逻辑处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  <span class="comment">//1.设置字符集</span></span><br><span class="line">  request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">  response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">  <span class="comment">//2.获取请求中的表单参数</span></span><br><span class="line">  String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">  String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">  <span class="comment">//3.调用业务层UserService实现登录业务</span></span><br><span class="line">  UserService us = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line">  <span class="comment">//4.准备回传参数对象</span></span><br><span class="line">  ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   User user = us.loginByUserNameAndPassword(userName, password);</span><br><span class="line">   <span class="keyword">if</span>(user != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//登录成功</span></span><br><span class="line">    responseData = responseData.success(<span class="string">"登陆成功"</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//登录失败</span></span><br><span class="line">    responseData = responseData.fail(<span class="string">"用户名密码不正确..."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//使用response的getWriter将其写回</span></span><br><span class="line">   <span class="comment">//使用第三方工具fastjson将对象转换成Json字符串</span></span><br><span class="line">   String jsonString = JSON.toJSONString(responseData);</span><br><span class="line">   <span class="comment">//写回字符串</span></span><br><span class="line">   response.getWriter().write(jsonString);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> doPost(...)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>login.html</strong></p><p><strong>主要添加Ajax解析Servlet传回的Json字符串</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//给submit按钮添加登陆的点击事件</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//获取用户名和密码</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> userName = $(<span class="string">"#userName"</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> password = $(<span class="string">"#password"</span>).val();</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//实现Ajax的Post请求</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//定义请求地址</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> url = <span class="string">"/TestServlet/login"</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//请求参数</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> data = &#123;<span class="string">"userName"</span> : userName,<span class="string">"password"</span> : password&#125;;</span></span><br><span class="line"><span class="javascript">            $.post(url,data,<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//使用jquery解析回传的json字符串,转换成json对象</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> result = $.parseJSON(response);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//弹出窗口,显示提示消息</span></span></span><br><span class="line">                alert(result.message);</span><br><span class="line">                if(result.status == 0)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">//如果登陆失败,提醒用户是否前往注册页面</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> flag = confirm(<span class="string">"是否前往注册?"</span>);</span></span><br><span class="line">                    if(flag)&#123;</span><br><span class="line"><span class="actionscript">                        <span class="comment">//点击确定跳转注册页面</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">window</span>.location.href = <span class="string">"/TestServlet/register.html"</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Log In"</span> <span class="attr">id</span>=<span class="string">"submit"</span> <span class="attr">onclick</span>=<span class="string">"login();"</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="登录测试"><a href="#登录测试" class="headerlink" title="登录测试"></a>登录测试</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/logintestaaa.gif" alt="logintestaaa"></p><h4 id="注册前后台修改"><a href="#注册前后台修改" class="headerlink" title="注册前后台修改"></a>注册前后台修改</h4><p><strong>注册前后台逻辑和登陆极其类似.</strong></p><p><strong>RegsiterServlet.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//1.设置字符集</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="comment">//2.获取请求中的表单参数</span></span><br><span class="line">String userEmail = request.getParameter(<span class="string">"userEmail"</span>);</span><br><span class="line">String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line"><span class="comment">//3.调用业务层UserService实现注册业务</span></span><br><span class="line">UserService us = <span class="keyword">new</span> UserServiceImp();</span><br><span class="line"><span class="comment">//4.准备回传参数对象</span></span><br><span class="line">ResponseData responseData = <span class="keyword">new</span> ResponseData();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> result = us.registerWithUserInfo(userName,password,userEmail);</span><br><span class="line"><span class="keyword">if</span>(result) &#123;</span><br><span class="line">responseData = responseData.success(<span class="string">"注册成功,请重新登陆.."</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">responseData = responseData.fail(<span class="string">"注册失败,请稍后再试!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用第三方工具fastjson将对象转换成Json字符串</span></span><br><span class="line">String jsonString = JSON.toJSONString(responseData);</span><br><span class="line"><span class="comment">//写回字符串</span></span><br><span class="line">response.getWriter().write(jsonString);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doPost(...)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>register.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//获取表单中的所有参数,如果参数值过多,可以使用jquery中的serialize()方法</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//值的形式为 : userName=aaaaaaaa&amp;password=bbbbbbb&amp;userEmail=ccc%40qq.com</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> params = $(<span class="string">"#myForm"</span>).serialize();</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> url = <span class="string">"/TestServlet/register?"</span> + params;</span></span><br><span class="line"><span class="javascript">            $.post(url,&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//使用jquery解析回传的json字符串,转换成json对象</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> result = $.parseJSON(response);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//弹出窗口,显示提示消息</span></span></span><br><span class="line">                alert(result.message);</span><br><span class="line">                if(result.status == 1)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">//如果注册成功,重新进入登陆页面</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">window</span>.location.href = <span class="string">"/TestServlet/login.html"</span>; </span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Sign Up"</span> <span class="attr">id</span>=<span class="string">"submit"</span> <span class="attr">onclick</span>=<span class="string">"register();"</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="注册测试"><a href="#注册测试" class="headerlink" title="注册测试"></a>注册测试</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/registertestaaa.gif" alt="registertestaaa"></p><h3 id="四-案例总结"><a href="#四-案例总结" class="headerlink" title="四. 案例总结"></a>四. 案例总结</h3><ol><li>项目前期准备和JDBC一定要测试好才开始编写后台</li><li>后台Servlet中使用了<strong>fastjson</strong>来解析&amp;转换json对象</li><li>前台使用了<strong>Ajax</strong>来接受后台返回数据.</li><li>项目中没有使用到<strong>请求转发和重定向</strong>,再后面的案例中再体现.</li><li><strong>细心细心再细心</strong>.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png&quot; alt=&quot;20201030112614&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="Servlet" scheme="http://fightlee.fun/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>javaweb篇-servlet3</title>
    <link href="http://fightlee.fun/javaweb%E7%AF%87-servlet3.html"/>
    <id>http://fightlee.fun/javaweb%E7%AF%87-servlet3.html</id>
    <published>2020-10-04T08:40:07.000Z</published>
    <updated>2020-10-30T03:26:39.357Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png" alt="20201030112614"></p><a id="more"></a><h1 id="JavaWeb-Servlet-三"><a href="#JavaWeb-Servlet-三" class="headerlink" title="JavaWeb-Servlet(三)"></a>JavaWeb-Servlet(三)</h1><h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><blockquote><p>在前2篇文章中,我们基本掌握了服务器的简单配置,Servlet的创建和其基本使用,在这篇文章中我们继续对Servlet中涉及到的一些核心对象进行剖析.</p></blockquote><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><blockquote><p>在前文中提到过在Servlet的声明周期的init方法中,可以通过ServletConfig对象中的方法获取ServletContext对象.那么ServletContext是什么呢?</p><p>ServletContext : 从字面意思就是当前Servlet的环境上下文对象,但是尤其要注意的是,<strong>ServletContext代表的是当前整个Web应用,并不是当前Servlet.</strong></p><p>ServletContext的作用 : </p><ol><li>可以通过ServletContext获取当前Web应用的初始化参数.</li><li>ServletContext可以用来存储数据,在Web中我们可以称之为域对象.</li><li>可以通过ServletContext对象来获取Web应用中资源的真实路径</li></ol><p>ServletContext对象如何获取?</p><ul><li><p>在前文中我们已经提过通过ServletConfig对象获取,但是其实更多的是通过当前Servlet对象就可以获取,</p><p>如 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//通过this获取即可.</span></span><br><span class="line">    ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    <span class="comment">//还可以通过参数中的request对象获取</span></span><br><span class="line">    ServletContext servletContext2 = request.getServletContext();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>ServletContext对象的生命周期 : </p><ul><li>因为ServletContext代表Web对象本身,所以在Web应用部署到服务器经启动后,ServletContext对象就被创建了,此时,tomcat服务器没有关闭,ServletContext对象就一直在,当服务器被关闭时,ServletContext就会被销毁.</li></ul><p>下面我们来具体来学习ServletContext的作用</p></blockquote><h3 id="获取Web的初始化参数"><a href="#获取Web的初始化参数" class="headerlink" title="获取Web的初始化参数"></a>获取Web的初始化参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    <span class="comment">//获取web.xml中配置的对应的参数</span></span><br><span class="line">    String initParameter = context.getInitParameter(<span class="string">"user"</span>);</span><br><span class="line">    <span class="comment">//获取web.xml中所有配置的参数</span></span><br><span class="line">    Enumeration&lt;String&gt; attributeNames = context.getAttributeNames();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">&lt;!-- 这里要注意 context-param 和 init-param 配置和其作用的区别 </span></span><br><span class="line"><span class="comment"> context-param配置在整个Web应用中,所有Servlet都能访问.</span></span><br><span class="line"><span class="comment"> init-param配置在单独的Servlet中,能被当前所在的Servlet访问.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="域对象"><a href="#域对象" class="headerlink" title="域对象"></a>域对象</h3><blockquote><p>在Web中的核心对象中,能够存储数据的对象都可以称之为域对象,ServletContext就是其中作用范围最大的一个,由于其代表整个Web应用,所以所有的当前Web应用下的Servlet都可以往ServletContext存取数据.</p><p>核心方法 :</p><ul><li><p>存 : setAttribute(String name,Object value);</p></li><li><p>取 : <strong>Object</strong> getAttribute(String name); </p></li><li><p>移除 : removeAttribute(String name);</p></li></ul></blockquote><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926165810.png" alt="20200926165810" style="zoom:67%;" /><p>FirstServlet.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">//向ServletContext中存储数据</span></span><br><span class="line">        context.setAttribute(<span class="string">"userName"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    doPost(...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SecondServlet.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//从ServletContext对象中提取数据</span></span><br><span class="line">Object value = <span class="keyword">this</span>.getServletContext().getAttribute(<span class="string">"userName"</span>);</span><br><span class="line">System.out.println(<span class="string">"value : "</span> + value);</span><br><span class="line">&#125;</span><br><span class="line">doPost(...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置好2个Servlet后,只需要先访问FirstServlet,然后再访问SecondServlet即可在控制台上观察value的输出</strong></p><h3 id="路径获取"><a href="#路径获取" class="headerlink" title="路径获取"></a>路径获取</h3><blockquote><p>getRealPath(String path) : 在此方法中传入虚拟地址,返回此地址的服务器下的绝对路径.</p><p>getContextPath() : 获取当前Web应用的根目录.</p><p>getResourceAsStream(String path) : 获取指定路径的输入流.</p></blockquote><h4 id="getContextPath-amp-getRealPath"><a href="#getContextPath-amp-getRealPath" class="headerlink" title="getContextPath&amp;getRealPath"></a>getContextPath&amp;getRealPath</h4><p>FirstServlet.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    <span class="comment">//getContextPath();</span></span><br><span class="line">    String contextPath = context.getContextPath();</span><br><span class="line">    System.out.println(<span class="string">"contextPath : "</span> + contextPath);</span><br><span class="line">    <span class="comment">//getRealPath(String path);</span></span><br><span class="line">    String realPath = context.getRealPath(<span class="string">"a.txt"</span>);</span><br><span class="line">    System.out.println(<span class="string">"realPath : "</span> + realPath);</span><br><span class="line">    String realPath2 = context.getRealPath(<span class="string">"/a.txt"</span>);</span><br><span class="line">    System.out.println(<span class="string">"realPath2 : "</span> + realPath2);</span><br><span class="line">    String realPath3 = context.getRealPath(<span class="string">"/WEB-INF/b.txt"</span>);</span><br><span class="line">    System.out.println(<span class="string">"realPath3 : "</span> + realPath3);</span><br><span class="line">    String realPath4 = context.getRealPath(<span class="string">"/WEB-INF/classes/com/web/servlet/a.txt"</span>);</span><br><span class="line">    System.out.println(<span class="string">"realPath4 : "</span> + realPath4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台输出 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">contextPath : /<span class="number">01</span>_Servlet</span><br><span class="line">realPath : H:\apache-tomcat-<span class="number">8.0</span><span class="number">.53</span>-windows-x64\apache-tomcat-<span class="number">8.0</span><span class="number">.53</span>\webapps\<span class="number">01</span>_Servlet\a.txt</span><br><span class="line">realPath2 : H:\apache-tomcat-<span class="number">8.0</span><span class="number">.53</span>-windows-x64\apache-tomcat-<span class="number">8.0</span><span class="number">.53</span>\webapps\<span class="number">01</span>_Servlet\a.txt</span><br><span class="line">realPath3 : H:\apache-tomcat-<span class="number">8.0</span><span class="number">.53</span>-windows-x64\apache-tomcat-<span class="number">8.0</span><span class="number">.53</span>\webapps\<span class="number">01</span>_Servlet\WEB-INF\b.txt</span><br><span class="line">realPath4 : H:\apache-tomcat-<span class="number">8.0</span><span class="number">.53</span>-windows-x64\apache-tomcat-<span class="number">8.0</span><span class="number">.53</span>\webapps\<span class="number">01</span>_Servlet\WEB-INF\classes\com\web\servlet\a.txt</span><br></pre></td></tr></table></figure><p><strong>可以看出从getRealPath中提取的地址都是服务器中的绝对地址</strong></p><h4 id="getResourceAsStream"><a href="#getResourceAsStream" class="headerlink" title="getResourceAsStream"></a>getResourceAsStream</h4><blockquote><p>在com.web.servlet包下创建a.txt文件,并随意输入一行文字.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    InputStream is = context.getResourceAsStream(<span class="string">"/WEB-INF/classes/com/web/servlet/a.txt"</span>);</span><br><span class="line">    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">    String line = reader.readLine();</span><br><span class="line">    System.out.println(line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>getResourceAsStream(String path)也是相对的服务器中的地址,即WebContent中的资源</strong></p><h2 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h2><blockquote><p>ServletContext学完后,我们接着来看一下Request.</p><p>HttpServletRequest : 故名思意,代表客户端的请求,也就是说当用户通过Http协议访问服务器时,用户的请求信息就会封装在Request对象中,在Servlet中通过Request对象中对应的方法就可以获得对应数据.</p><p>HttpServletRequset对象中有很多方法,这里我挑几个常用并且需要大家牢记的方法说一下 : </p><ol><li>获取请求的地址&amp;请求的方式</li><li>获取客户端请求参数 . 如 : 表单中的数据.</li><li>request和servletContext对象类似,都可以作为存储数据的容器,所以也可以称之为域对象,用法也和其相同.</li><li>请求转发</li></ol></blockquote><h3 id="获取地址-amp-方式"><a href="#获取地址-amp-方式" class="headerlink" title="获取地址&amp;方式"></a>获取地址&amp;方式</h3><blockquote><p>getMethod() : 获取当前请求的方式</p><p>getRequestURI() : 获取请求的资源路径(相对于当前工程)</p><p>getRequestURL() : 获取请求的完整URL </p><p>getContextPath() : 获取当前应用根路径</p></blockquote><p><strong>DemoServlet.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">String requestURI = request.getRequestURI();</span><br><span class="line">System.out.println(<span class="string">"requestURI : "</span> + requestURI);</span><br><span class="line"></span><br><span class="line">StringBuffer requestURL = request.getRequestURL();</span><br><span class="line">System.out.println(<span class="string">"requestURL : "</span> + requestURL);</span><br><span class="line"></span><br><span class="line">String contextPath = request.getContextPath();</span><br><span class="line">System.out.println(<span class="string">"contextPath : "</span> + contextPath);</span><br><span class="line"></span><br><span class="line">String method = request.getMethod();</span><br><span class="line">System.out.println(<span class="string">"method : "</span> + method);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doPost(...);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>随便准备个前端页面</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"DemoServlet"</span>&gt;</span>DemoServlet<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005140246.png" alt="20201005140246"></p><p><strong>点击超链接查看控制台输出…</strong></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005140353.png" alt="20201005140353"></p><h3 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h3><blockquote><p>getParameter(String name) : 根据input输入框中的name对应进行获取其中的值</p><p>getParameterValues(String name) : 根据input输入框中的name对应获取值,一般用来获取checkbox中的多个值.</p><p>getParameterMap() : 获取表单中所有的输入框对应的name和value , 一般配合框架使用.</p></blockquote><h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h4><p><strong>在WebContent目录下创建一个form.html页面,任意添加一个表单即可.</strong></p><p>form.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- form表单中的action指向的路径为对应的Servlet的虚拟路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/01_Servlet/form"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">UserName : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Password : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Hobby : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>吃饭 </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>睡觉</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>打豆豆</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>FormServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取input中的值</span></span><br><span class="line">String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">System.out.println(<span class="string">"userName : "</span> + userName);</span><br><span class="line"><span class="comment">//获取checkbox中的值</span></span><br><span class="line">String[] values = request.getParameterValues(<span class="string">"hobby"</span>);</span><br><span class="line">System.out.println(<span class="string">"checkBox values : "</span> + Arrays.asList(values));</span><br><span class="line"><span class="comment">//获取表单中的name和其对应的value</span></span><br><span class="line">Map&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class="line">System.out.println(<span class="string">"----所有表单中的输入框name&amp;value"</span>);</span><br><span class="line"><span class="keyword">for</span> (String name : map.keySet()) &#123;</span><br><span class="line">System.out.println(<span class="string">"name : "</span> + name + <span class="string">" , value : "</span> + Arrays.asList(map.get(name)));</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    doPost(...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005012758.png" alt="20201005012758"></p><p><strong>点击Submit提交数据后,Servlet中的输出</strong> : </p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005013015.png" alt="20201005013015" style="zoom:67%;" /><p><strong>这个例子中要注意的是form表单中的input内的name属性的值必须和getParameter等方法中的参数的名称一致,这里在获取输入框中的值的时候可能还会有乱码问题,这个问题我们等会详细介绍.</strong></p><h3 id="域对象-1"><a href="#域对象-1" class="headerlink" title="域对象"></a>域对象</h3><blockquote><p>request和servletContext类似,都可以作为域对象使用,但是request的作用范围要比servletContext要小的多,也就是说,只有在同一请求中,才能在request中存取数据.</p><p>存取数据的方法还是那么几个,参考上面ServletContext</p></blockquote><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><blockquote><p>请求转发是使用request时一个非常重要的知识点,请求转发是<strong>服务器内部</strong>跳转页面的一种方式.比如,当用户请求访问到ServletA时,我们可以对请求后的访问结果进行判断来选择跳转方式或者需要前往的页面,那么这些跳转方式的其中一种就是请求转发.</p><p>核心方法 : </p><p>request.getRequestDispatcher(String path).forward(ServletRequest request,ServletResponse response);</p></blockquote><h4 id="看图说话"><a href="#看图说话" class="headerlink" title="看图说话"></a>看图说话</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005015002.png" alt="20201005015002"></p><p><strong>在上图中,要注意的是当前的跳转只发生在服务器内部,跳转到home.html时可以认为是同一个request对象在进行请求.</strong></p><h4 id="举个栗子-1"><a href="#举个栗子-1" class="headerlink" title="举个栗子"></a>举个栗子</h4><blockquote><p>依然是用上图的小案例写一段代码来实现</p></blockquote><p><strong>准备一个ServletA.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在doGet方法中做请求转发</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletA</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"进入ServletA...."</span>);</span><br><span class="line"><span class="comment">//获取参数</span></span><br><span class="line">System.out.println(<span class="string">"获取参数...."</span>);</span><br><span class="line"><span class="comment">//逻辑处理</span></span><br><span class="line">System.out.println(<span class="string">"逻辑处理...."</span>);</span><br><span class="line"><span class="comment">//转发之前使用request与对象存数据,转发后的页面如果是Servlet/JSP中可以从request中取出数据</span></span><br><span class="line">request.setAttribute(<span class="string">"password"</span>, <span class="string">"123456"</span>);</span><br><span class="line"><span class="comment">//处理完后,请求转发</span></span><br><span class="line">System.out.println(<span class="string">"处理完毕,准备跳转首页...."</span>);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"home.html"</span>).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doPost(...)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在WebContent目录下随意准备一个home.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是首页,雷霆嘎巴<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>操作截图 : </p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005020339.png" alt="20201005020339"></p><p>控制台输出 : </p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005020405.png" alt="20201005020405"></p><h3 id="解决乱码"><a href="#解决乱码" class="headerlink" title="解决乱码"></a>解决乱码</h3><blockquote><p>由于客户端请求方式的不同,解决的方案也不相同.</p><p>核心解决方案 : </p><p>setCharacterEncoding(String env);</p></blockquote><h4 id="一-POST请求乱码"><a href="#一-POST请求乱码" class="headerlink" title="一 . POST请求乱码"></a>一 . POST请求乱码</h4><blockquote><p>当用户表单中的请求方式为POST提交时,在service(doGet/doPost)方法的首行加上<strong>setCharacterEncoding(String env)</strong>即可 , 如 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//解决乱码</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="comment">//获取input中的值</span></span><br><span class="line">String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="二-GET请求乱码"><a href="#二-GET请求乱码" class="headerlink" title="二 . GET请求乱码"></a>二 . GET请求乱码</h4><blockquote><p>如果使用的时Tomcat8以上的版本,则同POST请求一样,如果时Tomcat8以下的版本则需要对参数中的值重新编码.如 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//获取input中的值</span></span><br><span class="line">String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line"><span class="comment">//对userName进行重新编解码</span></span><br><span class="line">userName = <span class="keyword">new</span> String(userName.getBytes(<span class="string">"ISO-8859-1"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><ul><li>请求转发是当前应用内部发生的跳转,用户地址栏上的地址没有发生改变,是服务器内部的行为.</li><li>不能转发到当前Web应用外的页面</li><li>转发的同时可以使用request域对象来存取数据 , request.getAttribute(String name);</li></ul></blockquote><h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h2><blockquote><p>Requset代表请求,Response则代表响应,HttpServletResponse对象也是Servlet中一个十分重要的对象,我们将要传递给客户端的数据封装在response对象中.</p><p>response对象中常用方法不多,以下几个必须熟练使用</p><ol><li>利用response对象向页面输出内容</li><li>重定向</li></ol></blockquote><h3 id="输出内容"><a href="#输出内容" class="headerlink" title="输出内容"></a>输出内容</h3><blockquote><p>getWriter().write() : 通过getWriter方法返回PrintWriter对象向页面写内容.</p></blockquote><h4 id="举个栗子-2"><a href="#举个栗子-2" class="headerlink" title="举个栗子"></a>举个栗子</h4><p><strong>修改DemoServlet中的代码,如下</strong> : </p><p><strong>DemoServlet.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.getWriter().write(<span class="string">"HelloWorld"</span>);</span><br><span class="line">response.getWriter().write(<span class="string">"&lt;h1&gt;HelloWorld&lt;/h1&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doPost(...)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>点击超链接重新进行访问</strong></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005141302.png" alt="20201005141302"></p><p><strong>向页面输出内容和获取客户端参数一样都会有乱码问题,在输出内容之前修改response中的编码格式即可</strong></p><blockquote><p>setContentType(“text/html;charset=utf-8”)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">response.getWriter().write(<span class="string">"你好,世界"</span>);</span><br><span class="line">response.getWriter().write(<span class="string">"&lt;h1&gt;你好,世界&lt;/h1&gt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重新访问</strong></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005141535.png" alt="20201005141535"></p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><blockquote><p>sendRedirect(String location) : location路径可以是当前Web应用内的其他页面或者Web应用外的页面.</p></blockquote><h4 id="看图说话-1"><a href="#看图说话-1" class="headerlink" title="看图说话"></a>看图说话</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005144531.png" alt="20201005144531"></p><p><strong>上图主要阐述了这么几点</strong> : </p><ol><li>用户输入地址对ServletA进行访问</li><li>ServletA访问后通知页面重新定向到其他地址</li><li>用户客户端重新访问新地址</li></ol><h4 id="举个栗子-3"><a href="#举个栗子-3" class="headerlink" title="举个栗子"></a>举个栗子</h4><p><strong>修改ServletA中的代码</strong></p><p><strong>ServletA.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletA</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"进入ServletA...."</span>);</span><br><span class="line"><span class="comment">//获取参数</span></span><br><span class="line">System.out.println(<span class="string">"获取参数...."</span>);</span><br><span class="line"><span class="comment">//逻辑处理</span></span><br><span class="line">System.out.println(<span class="string">"逻辑处理...."</span>);</span><br><span class="line"><span class="comment">//处理完后,请求转发</span></span><br><span class="line">System.out.println(<span class="string">"处理完毕,准备跳转首页...."</span>);</span><br><span class="line"><span class="comment">//通过request获取当前应用根目录</span></span><br><span class="line">String contextPath = request.getContextPath();</span><br><span class="line"><span class="comment">//重定向到首页</span></span><br><span class="line">response.sendRedirect(contextPath + <span class="string">"/home.html"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doPost(...)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>操作截图 : </p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005145222.png" alt="20201005145222"></p><p>控制台输出 : </p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201005145205.png" alt="20201005145205"></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><blockquote><ul><li>重定向可以是当前应用中页面的跳转,也可以跳转站外页面 (<strong>location中的路径最好要完整</strong>) , 是客户端的行为</li><li>重定向后用户地址栏的地址发生改变.变为重定向后的地址</li><li>从图上可以看到,重定向最起码是2次请求,所以不能使用request域来存取数据.</li></ul></blockquote><blockquote><p><strong>重定向和请求转发 怎么选用?</strong></p><p>请求转发是服务器内部的行为,而重定向需要客户端进行2次请求,所以从效率上来看转发的速度要比重定向速度要快.还有根据重定向和转发的地址栏上的表现行为也可以作为选取标准,如果需要跳转到外部网站就必须选用重定向,最后重定向还可以避免用户刷新页面或者重载页面时,重复调用之前动作和发送数据.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png&quot; alt=&quot;20201030112614&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="Servlet" scheme="http://fightlee.fun/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>javaweb篇-servlet2</title>
    <link href="http://fightlee.fun/javaweb%E7%AF%87-servlet2.html"/>
    <id>http://fightlee.fun/javaweb%E7%AF%87-servlet2.html</id>
    <published>2020-09-21T02:53:07.000Z</published>
    <updated>2020-10-30T03:26:36.529Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png" alt="20201030112614"></p><a id="more"></a><h1 id="JavaWeb-Servlet-二"><a href="#JavaWeb-Servlet-二" class="headerlink" title="JavaWeb-Servlet(二)"></a>JavaWeb-Servlet(二)</h1><h2 id="Web应用目录"><a href="#Web应用目录" class="headerlink" title="Web应用目录"></a>Web应用目录</h2><blockquote><p>直接上图</p></blockquote><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926172925.png" alt="20200926172925" style="zoom:67%;" /><blockquote><ul><li>src目录 : 放置Java源代码目录</li><li>WebContent目录 : 当前Web应用的资源目录,Web应用中的html,css,js,image等静态资源或者jsp文件等,当前目录下的内容会发布到tomcat安装目录中的webapps目录对应的项目名目录下,除了WEB-INF目录下的内容都可以通过路径直接访问.<ul><li>WEB-INF目录 : 当前Web应用的配置信息目录,该目录下的内容对用户不可见,不能通过路径直接访问.<ul><li>lib目录 : 当前Web工程需要的依赖jar包..</li><li>web.xml文件 : Web工程的配置文件.</li></ul></li></ul></li></ul></blockquote><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926173830.png" alt="20200926173830"></p><blockquote><p>上图为对应的Tomcat的发布路径,也就是说当我们通过Eclipse中的run as on server运行Web应用程序后,该程序中的字节码文件和静态资源文件html,css,js,或者动态资源文件jsp等会发布在Tomcat目录下的webapps目录对应的工程名所在的文件夹下.</p><ul><li>classes目录 : java源文件编译过后的class文件.</li></ul></blockquote><h2 id="Http请求方式"><a href="#Http请求方式" class="headerlink" title="Http请求方式"></a>Http请求方式</h2><blockquote><p>首先在深入学习Servlet之前,我们需要来回顾下表单的2种提交方式</p><ol><li><strong>GET</strong>     一般用于从服务器中获取数据,安全性低于GET,将传递给服务器的参数直接添加在action指定的url后,get提交的数据量非常小,一般不能超过2KB</li><li><strong>POST</strong>   一般用于向服务提交数据,安全性较高于GET,传递给服务器的参数通过Http中的机制将参数封装在请求体内,post提交的数据一般默认无限制,但其实和选取的浏览器,操作系统,服务器等有关.</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在html中,通过表单里method属性可以确定表单提交的方式.</p></blockquote><h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><p>Servlet接口下的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"><span class="comment">/*Servlet初始化时的回调*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"><span class="comment">/*获取Servlet中的配置参数信息*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/*获取Servlet一些相关信息*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/*Servlet销毁时的回调*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/*接口中最重要的方法 : 每次客户端请求对应的Servlet都会调用service方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloServlet.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"service was initialized..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"service is running now..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"service was destroyed..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926160516.png" alt="20200926160516" style="zoom:80%;" /><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926160411.png" alt="20200926160411" style="zoom:67%;" /><blockquote><p>从上图可以看出,当我们启动服务器后,输入Servlet中配置好的虚拟路径对其进行访问,Servlet中的init方法和service方法会自动调用.</p></blockquote><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926160751.png" alt="20200926160751" style="zoom:67%;" /><blockquote><p>从上图可以看出当我们对服务器进行关闭时,Servlet中的destroy()方法会自动调用.</p></blockquote><h3 id="init-ServletConfig-config"><a href="#init-ServletConfig-config" class="headerlink" title="init(ServletConfig config)"></a>init(ServletConfig config)</h3><blockquote><p>从上面测试中可以得知,init会在Servlet创建时进行回调,那么我们可以在此方法中对该Servlet完成一些初始化的工作,它是由Servlet的容器所控制的,并且该方法只会调用一次,但是我们可以通过对Servlet中的配置文件对其调用的时机进行修改.</p></blockquote><blockquote><p>找到配置HelloServlet的web.xml文件,在对应的<servlet>标签下添加<load-on-startup>标签,注意需要添加到<servlet-class>之后.</p></blockquote><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line">...</span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标签中的数字必须是一个整数,代表加载优先级,数字越小,优先级越高 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>根据标签的翻译即可得知,该标签的作用为让servlet在服务器启动时即加载.再起启动服务器,观察运行结果.</p></blockquote><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926162017.png" alt="20200926162017" style="zoom:50%;" /><blockquote><p>从上图和之前的运行结果进行比对,得出在Server startup…之时, HelloServlet中的init方法即被调用.然后继续访问该Servlet,init方法不会再次调用,直接调用service方法.</p></blockquote><h4 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h4><blockquote><p>在Servlet中传入了一个ServletConfig对象,该对象有以下几个方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="comment">//获取Servlet名称</span></span><br><span class="line">    String servletName = config.getServletName();</span><br><span class="line">    System.out.println(<span class="string">"servletName : "</span> + servletName);</span><br><span class="line">    <span class="comment">//获取Servlet的初始化参数</span></span><br><span class="line">    String encoding = config.getInitParameter(<span class="string">"encoding"</span>);</span><br><span class="line">    System.out.println(<span class="string">"----getInitParameter---"</span>);</span><br><span class="line">    System.out.println(<span class="string">"encoding : "</span> + encoding);</span><br><span class="line">    <span class="comment">//获取所有的初始化参数</span></span><br><span class="line">    Enumeration&lt;String&gt; params = config.getInitParameterNames();</span><br><span class="line">    System.out.println(<span class="string">"----getInitParameterNames---"</span>);</span><br><span class="line">    <span class="keyword">while</span> (params.hasMoreElements()) &#123;</span><br><span class="line">        String key = (String) params.nextElement();</span><br><span class="line">        String value = config.getInitParameter(key);</span><br><span class="line">        System.out.println(key + <span class="string">" : "</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    ServletContext servletContext = config.getServletContext();</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"service was initialized..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="getServletName"><a href="#getServletName" class="headerlink" title="getServletName()"></a>getServletName()</h5><blockquote><p>获取当前Servlet的名称,从下方运行结果图片可以看到,输出的是web.xml中<servlet-name>标签中的内容.<br><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926163326.png" alt="20200926163326" style="zoom:67%;" /></p></blockquote><h5 id="getInitParameter-String-name-amp-getInitParameterNames"><a href="#getInitParameter-String-name-amp-getInitParameterNames" class="headerlink" title="getInitParameter(String name)&amp;getInitParameterNames()"></a>getInitParameter(String name)&amp;getInitParameterNames()</h5><blockquote><p>获取当前Servlet中的初始化参数值,或者键值对信息</p><p>需要在<servlet>标签中添加<init-param>标签,<param-name>和<param-value></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意标签添加的顺序 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>启动服务器后,观察结果<br><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926164323.png" alt="20200926164323" style="zoom:67%;" /></p></blockquote><h5 id="getServletContext"><a href="#getServletContext" class="headerlink" title="getServletContext()"></a>getServletContext()</h5><blockquote><p>通过该方法会返回一个ServletContext对象.ServletContext是Servlet中一个十分重要的对象,代表当前环境上下文.尤其要注意的是,ServletContext代表的是当前整个Web应用,并不是当前这个Servlet.</p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926165810.png" alt="20200926165810" style="zoom:67%;" /><p>对于ServletContext对象我们放在Servlet最后进行详细分析.那么到此init()方法的作用,以及ServletConfig其用法我们已经清楚,</p></blockquote><h3 id="destroy"><a href="#destroy" class="headerlink" title="destroy()"></a>destroy()</h3><blockquote><p>destroy方法会在服务器关闭时调用,对servlet进行销毁.在调用时,可以手动在destroy方法中释放一些资源,或者在服务器关闭时将某些内存中的数据序列化到本地进行存储等等…</p></blockquote><h3 id="service-ServletRequest-req-ServletResponse-res"><a href="#service-ServletRequest-req-ServletResponse-res" class="headerlink" title="service(ServletRequest req, ServletResponse res)"></a>service(ServletRequest req, ServletResponse res)</h3><blockquote><p>从运行结果来看,每一次当我们请求到该Servlet时,service方法都会调用一次.方法中的俩个参数 ServletRequest &amp; ServletResponse 都是我们后面要学习的重点对象.</p></blockquote><h3 id="getServletConfig"><a href="#getServletConfig" class="headerlink" title="getServletConfig()"></a>getServletConfig()</h3><blockquote><p>此方法返回一个ServletConfig对象..</p></blockquote><h3 id="getServletInfo"><a href="#getServletInfo" class="headerlink" title="getServletInfo()"></a>getServletInfo()</h3><blockquote><p>此方法返回Servlet的作者等信息..</p></blockquote><h2 id="web-xml配置文件"><a href="#web-xml配置文件" class="headerlink" title="web.xml配置文件"></a>web.xml配置文件</h2><blockquote><p>再来瞅一眼之前的web.xml文件,正好也不用向上翻了.</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>01_Servlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="welcome-file-list标签"><a href="#welcome-file-list标签" class="headerlink" title="welcome-file-list标签"></a>welcome-file-list标签</h3><blockquote><p>该标签定义了当前Web应用在访问时的欢迎页面,在项目中我们需要在WebContent中创建首页或者欢迎页面,并将其页面名称配置到<welcome-file-list>标签中的<welcome-file>中.配置好后,当直接访问Web应用根目录时就会自动跳转到该页面<br><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200926172242.png" alt="20200926172242" style="zoom:80%;" /></p></blockquote><h3 id="servlet-amp-servlet-mapping标签"><a href="#servlet-amp-servlet-mapping标签" class="headerlink" title="servlet&amp;servlet-mapping标签"></a>servlet&amp;servlet-mapping标签</h3><blockquote><p><servlet-name> : 配置当前Servlet的名称</p><p><servlet-class> : 配置当前Servlet的全路径.</p><p><servlet-mapping> : 配置访问当前Servlet的匹配规则.</p><p><url-pattern> : 配置访问Servlet的虚拟路径</p></blockquote><h3 id="url-pattern标签"><a href="#url-pattern标签" class="headerlink" title="url-pattern标签"></a>url-pattern标签</h3><blockquote><p>作用 : 在客户端可以通过url-pattern配置的路径来对对应的服务器下的Servlet资源进行访问.</p><p>例 : 如果web.xml中配置 <url-pattern>/hello</url-pattern> 那么在访问该Servlet时只需要在客户端浏览器上输入    /工程名/hello 就可以进行访问</p><p>对于虚拟路径的配置有几种方式</p><ol><li>完全匹配  :  /hello , /abc , /order ..等</li><li>目录匹配  :  /abc/* , /order/* 等</li><li>后缀名匹配 : *.do , *.action等</li><li>缺省值 :  / </li></ol></blockquote><h2 id="Servlet体系"><a href="#Servlet体系" class="headerlink" title="Servlet体系"></a>Servlet体系</h2><h3 id="继承HttpServlet"><a href="#继承HttpServlet" class="headerlink" title="继承HttpServlet"></a>继承HttpServlet</h3><blockquote><p>在实际操作时,我们应当在创建Servlet时避免直接实现Servlet接口,在服务器环境中给我们提供了其他更加便捷的类给我们继承,避免重写太多方法.</p><ol><li>我们在创建Servlet时可以直接继承HttpServlet.重写doGet方法和doPost方法即可.</li><li>使用Eclipse等开发工具直接使用图形化界面创建Servlet,好处就是自动帮助我们对web.xml进行补全</li></ol><p>在使用工具创建时我们还可以对生成的代码,进行简化,应用simple版的servlet模板即可.</p><p>对应步骤如下 : </p><ol><li>先点击上方window – Preferences 然后输入 template按箭头选择</li></ol><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201001140446.png" alt="20201001140446" style="zoom:67%;" /><ol start="2"><li>输入Name,然后复制下方的模板内容,点击OK即可.</li></ol><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201001144408.png" alt="20201001144408" style="zoom:67%;" /></blockquote><h4 id="Servlet模板"><a href="#Servlet模板" class="headerlink" title="Servlet模板"></a>Servlet模板</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;enclosing_package&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;primary_type_name&#125; extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    $&#123;cursor&#125;  </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>操作演示 : <strong>创建好Servlet后,全选删除所有内容,输入s提示即可填入模板内容</strong></p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/fffffff.gif" alt="fffffff" style="zoom:80%;" /><h3 id="剖析HttpServlet"><a href="#剖析HttpServlet" class="headerlink" title="剖析HttpServlet"></a>剖析HttpServlet</h3><blockquote><p>在前文中,我们已经对Servlet接口中的内容进行了完整的学习,如果我们想要对对应的Servlet进行访问就应该进入Servlet中的service方法.那么在继承了HttpServlet后,只有doGet和doPost方法,service方法去哪了呢?</p><p>带着问题我们来看一下HttpServlet中的体系结构</p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201001141721.png" alt="20201001141721"></p><p>从上图可以看出,HttpServlet的父类是GenericServlet,继续打开父类,发现GenericServlet实现了Servlet接口,那么service方法去哪了?</p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201001141856.png" alt="20201001141856"></p><p>打开预览视图,我们发现在GenericServlet中,service方法还是抽象方法,所以还是应该由其子类来实现.</p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201001142203.png" alt="20201001142203" style="zoom:67%;" /><p>那么我们继续观察HttpServlet</p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201001142402.png" alt="20201001142402" style="zoom: 67%;" /><p>从上图可以看出,在HttpServlet中有service方法的实现,并且还有service的重载方法.我们继续往下看</p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201001142505.png" alt="20201001142505" style="zoom:67%;" /><p>在service方法中,将ServletRequest和ServletResponse 2个参数对象强转为 HttpServletRequest,HttpServletResponse对象继续交给重载的service方法调用.</p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201001142811.png" alt="20201001142811" style="zoom: 67%;" /><p>在此service方法中,从截取的部分代码可以读出,通过HttpServletRequest对象获取当前请求的方式</p><p><strong>String method = req.getMethod();</strong></p><p>如果当前的请求方式为GET,则执行<strong>doGet(req,resp);</strong></p><p>如果当前为POST,则执行<strong>doPost(req,resp);</strong></p><p>…</p><p>至此我们就知道了为什么我们继承后应该去实现对应doGet或者doPost方法.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png&quot; alt=&quot;20201030112614&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="Servlet" scheme="http://fightlee.fun/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>javaweb篇-servlet1</title>
    <link href="http://fightlee.fun/javaweb%E7%AF%87-servlet.html"/>
    <id>http://fightlee.fun/javaweb%E7%AF%87-servlet.html</id>
    <published>2020-09-19T01:02:22.000Z</published>
    <updated>2020-10-30T03:26:33.824Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png" alt="20201030112614"></p><a id="more"></a><h1 id="JavaWeb-Servlet-一"><a href="#JavaWeb-Servlet-一" class="headerlink" title="JavaWeb-Servlet(一)"></a>JavaWeb-Servlet(一)</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><blockquote><p>系统 : win7,10(64 位)</p><p>jdk : jdk-8u181-windows-x64.exe</p><p>Eclispe/STS/IDEA : Eclipse&lt;Photon Release (4.8.0)&gt;</p><p>Tomcat : apache-tomcat-8.0.53</p></blockquote><h2 id="Servlet-的基本概念"><a href="#Servlet-的基本概念" class="headerlink" title="Servlet 的基本概念"></a>Servlet 的基本概念</h2><blockquote><p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p><p>使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p><p>Java Servlet 通常情况下与使用 CGI（Common Gateway Interface，公共网关接口）实现的程序可以达到异曲同工的效果。但是相比于 CGI，Servlet 有以下几点优势：</p><ul><li>性能明显更好。</li><li>Servlet 在 Web 服务器的地址空间内执行。这样它就没有必要再创建一个单独的进程来处理每个客户端请求。</li><li>Servlet 是独立于平台的，因为它们是用 Java 编写的。</li><li>服务器上的 Java 安全管理器执行了一系列限制，以保护服务器计算机上的资源。因此，Servlet 是可信的。</li><li>Java 类库的全部功能对 Servlet 来说都是可用的。它可以通过 sockets 和 RMI 机制与 applets、数据库或其他软件进行交互。</li></ul></blockquote><p>以上全是网站上随意 Copy 的,对于 Servlet 而言,同学们只需要认识一点 :</p><p>Servlet 就是一个在服务器中的 Java 小程序,有了 Servlet,我们可以接收来自网页表单的输入内容,或者将数据库&amp;其他源的内容反馈给用户进行显示.</p><p>Servlet 这个 Java 程序需要运行在一个容器中,而这个容器就是我们环境中所提到的 Tomcat,由 Servlet 组成的 Java 应用程序我们又可以称之为 Web 应用程序.</p><p>要注意的是 : Servlet 默认是以多线程模式执行的.</p><h2 id="Eclipse-的配置"><a href="#Eclipse-的配置" class="headerlink" title="Eclipse 的配置"></a>Eclipse 的配置</h2><blockquote><p>安装好 Jdk,Tomcat 和 Eclipse 之后就可以对 Eclipse 进行服务器配置了.</p></blockquote><p>打开 Eclipse,选择熟悉的工作空间.选择 JavaEE 开发界面(一般是默认),在窗口下方找到 Servers 窗口</p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919095416.png" alt="20200919095416" style="zoom: 67%;" /><p>点击超链接后进行服务器配置.选择好对应的 Tomcat 版本后点击 Next</p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919100717.png" alt="20200919100717" style="zoom: 67%;" /><p>如果是第一次配置,在 Browse 处选择在本地的 Tomcat 根目录即可.JRE 的选择可以是默认也可以选择本地 JDK.配置好后点击 Finish 即可.</p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919105808.png" alt="20200919105808" style="zoom: 67%;" /><p>Finish 后在之前的超链接处,出现刚刚配置好的 Tomcat 服务器,直接双击进入 Tomcat 服务器中继续进行发布路径的配置,修改完毕后<strong>,ctrl + s</strong>保存文件配置.</p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919110035.png" alt="20200919110035" style="zoom:50%;" /><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919110244.png" alt="20200919110244" style="zoom:67%;" /><h2 id="创建第一个-Servlet"><a href="#创建第一个-Servlet" class="headerlink" title="创建第一个 Servlet"></a>创建第一个 Servlet</h2><blockquote><p>在对 Eclipse 的 Tomcat 环境进行配置后,就可以开始创建第一个 Servlet 程序了.</p></blockquote><p>创建 Web 工程,右键 new — 选择 Dynamic Web Project , 填写 ProjectName 和修改 module version 为 2.5(如图),再点击 Finish.</p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919111018.png" alt="20200919111018" style="zoom: 67%;" /><p>在工程中的 src 文件夹下创建包和 java 文件.(代码如下)</p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919111448.png" alt="20200919111448" style="zoom:80%;" /><strong>HelloServlet.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest arg0, ServletResponse arg1)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">  arg1.getWriter().write(<span class="string">"Hello World!"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码解析 : 创建一个 HelloServlet 的 Java 文件,然后让其实现 Servlet 接口,在重写的 service 方法中使用 arg1 这个变量得到一个 Writer 对象写出一个字符串”Hello World!”.</p><p>如果想要实现后的形参的名称不是 arg0,arg1 这种需要添加对应源码.添加源码的操作如下.</p></blockquote><h4 id="如何在项目中添加源码"><a href="#如何在项目中添加源码" class="headerlink" title="如何在项目中添加源码"></a>如何在项目中添加源码</h4><p>按住 ctrl + 左键点击 Servlet 接口</p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919112049.png" alt="20200919112049" style="zoom: 67%;" /><p>点击 Attach Source 按钮 , 然后选择下方的 External Folder 浏览到 Tomcat 的源码根路径,继续点击 OK 即可</p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919112202.png" alt="20200919112202" style="zoom: 67%;" /><p>等几秒后 Eclipse 加载完毕,再删掉之前的方法重新实现可得到正确的参数名称.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">  </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  res.getWriter().write(<span class="string">"Hello World!"</span>);</span><br><span class="line">  </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>紧接着需要在WebContet目录中的WEB-INF目录下的web.xml中进行配置,打开web.xml文件</p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919113208.png" alt="20200919113208" style="zoom:67%;" /><p>在web.xml文件中添加如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>01_Servlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 此处为HelloServlet的配置信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>右键选择当前项目 然后 Run as —- Run  on Server , 在出现的界面直接点击 Finish 即可, 等待服务器运行.</p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919113646.png" alt="20200919113646" style="zoom:67%;" /><p>当Console控制台出现 Server Startup 的log信息,就可以在浏览器中输入路径访问Servlet了.</p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919113909.png" alt="20200919113909" style="zoom:67%;" /><p>在浏览器中输入路径(推荐使用Google或者微软自带的Edge浏览器),查看HelloServlet.</p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200919114123.png" alt="20200919114123"></p><blockquote><p>OK , 到这里我们第一个Servlet已经创建完毕并成功运行查看到了HelloServlet中 service方法中的输出.在下一篇中我们来具体的学习Servlet的基本知识.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png&quot; alt=&quot;20201030112614&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://fightlee.fun/categories/java/"/>
    
    
      <category term="Servlet" scheme="http://fightlee.fun/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Part8·面向对象编程·三(图文)</title>
    <link href="http://fightlee.fun/09-java.html"/>
    <id>http://fightlee.fun/09-java.html</id>
    <published>2020-01-04T01:15:28.000Z</published>
    <updated>2020-10-30T03:29:01.847Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png" alt="20201030112614"></p><a id="more"></a><h1 id="前文回顾"><a href="#前文回顾" class="headerlink" title="前文回顾"></a>前文回顾</h1><p>在前文中我们学习到 Java 面向对象编程中的俩个核心概念 , 类(class) 和 对象 . 一个类有 2 个成员,一个<strong>成员属性</strong> 和 <strong>成员方法</strong>,并对方法进行了详细的讲述,现在我们来看一下类中的另一个成员 : <strong>成员属性</strong>.</p><h1 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h1><p>类中的属性其实就是变量的一种表现形式, 在初学变量之时,我们提到过变量的书写位置不同,作用域也不同,详细请回顾 <a href="http://fightlee.fun/08-java.html">Part 1-5 补充</a> 这一章节.在类中定义的变量,我们一般称之为全局变量,也叫<strong>成员变量.</strong></p><p>根据类<strong>创建出对应对象后</strong>,<strong>成员变量便赋予了初始值</strong>. 常见的类型初始化值如下 :</p><table><thead><tr><th align="center">类型</th><th align="center">初始值</th></tr></thead><tbody><tr><td align="center">String or 引用类型</td><td align="center">null</td></tr><tr><td align="center">整型</td><td align="center">0</td></tr><tr><td align="center">浮点型</td><td align="center">0.0</td></tr><tr><td align="center">Boolean</td><td align="center">false</td></tr></tbody></table><h4 id="例-1-创建-Dog-类-并创建其对象-观察对象属性的初始值"><a href="#例-1-创建-Dog-类-并创建其对象-观察对象属性的初始值" class="headerlink" title="例 1 : 创建 Dog 类,并创建其对象,观察对象属性的初始值"></a>例 1 : 创建 Dog 类,并创建其对象,观察对象属性的初始值</h4><p>Dog 类 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义成员变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestDog 类 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        System.out.prinlnt(dog.name); <span class="comment">// 输出 null</span></span><br><span class="line">        System.out.prinlnt(dog.age);  <span class="comment">// 输出 0</span></span><br><span class="line"></span><br><span class="line">        dog.name = <span class="string">"旺财"</span>;</span><br><span class="line">        dog.age = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        System.out.prinlnt(dog.name); <span class="comment">// 输出 旺财</span></span><br><span class="line">        System.out.prinlnt(dog.age);  <span class="comment">// 输出 1</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>从上例可以看出 在创建对象后,没有赋值前的类中的 name 和 age 就已经具备了初始化的值 . 赋值后, 初始值被替换.</strong></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>面向对象编程不是一个很难理解的概念,大家始终记住 2 点 :</p><ol><li>类中存在 2 个成员 , 成员变量 和 成员方法 .</li><li>成员变量和成员方法的调用需要通过对象(<strong>类的实例</strong>)来调用 .</li></ol><h1 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h1><p>重载 : 在同一个类中,方法名相同,参数列表不相同的不同方法称之为 方法的重载 . 举例说明 .</p><h4 id="例-2-计算器类中的加法运算"><a href="#例-2-计算器类中的加法运算" class="headerlink" title="例 2 : 计算器类中的加法运算"></a>例 2 : 计算器类中的加法运算</h4><p>Calucator 类 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calucator</span></span>&#123;</span><br><span class="line">    <span class="comment">//计算2个数的和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算3个数的和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算3个浮点型数的和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//报错</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">       System.out.println(a + b + c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从例 2 我们可以总结出以下几点 :</p><ol><li>一个类中不同的方法可以重名 , 但必须保证这些方法为重载</li><li>重载的表现为参数列表不相同 –&gt; 即 参数的个数不同 或者 参数的类型不同</li><li>重载于返回值类型无关.</li></ol><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><h2 id="构造函数的语法"><a href="#构造函数的语法" class="headerlink" title="构造函数的语法"></a>构造函数的语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] 构造函数名([参数列表])&#123;</span><br><span class="line">    代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造函数的作用"><a href="#构造函数的作用" class="headerlink" title="构造函数的作用"></a>构造函数的作用</h2><ol><li>创建对象 new XXX(); 需要通过构造函数</li><li>初始化 在创建对象后,对该对象进行初始化</li></ol><h2 id="构造函数的使用"><a href="#构造函数的使用" class="headerlink" title="构造函数的使用"></a>构造函数的使用</h2><h4 id="例-3-创建-Student-类-并添加构造函数"><a href="#例-3-创建-Student-类-并添加构造函数" class="headerlink" title="例 3 : 创建 Student 类,并添加构造函数"></a>例 3 : 创建 Student 类,并添加构造函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String gender;</span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//带参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age,String gender)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么要使用构造函数"><a href="#为什么要使用构造函数" class="headerlink" title="为什么要使用构造函数"></a>为什么要使用构造函数</h2><p>根据例 3 我们创建 TestStudent 类来演示构造函数的作用 :</p><p>TestStudenet 类 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建Student对象</span></span><br><span class="line">        Student student1 = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//再给对象赋值</span></span><br><span class="line">        student1.name = <span class="string">"zhangsan"</span>;</span><br><span class="line">        student1.age = <span class="number">12</span>;</span><br><span class="line">        student1.gender = <span class="string">"男"</span>;</span><br><span class="line">      <span class="comment">//上面创建对象并赋值的过程分为了2步,如果我们想创建对象的同时对 对象的属性进行初始化的操作,可以通过构造函数来实现</span></span><br><span class="line">        Student student2 = <span class="keyword">new</span> Student(<span class="string">"王五"</span>,<span class="number">12</span>,<span class="string">"女"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造函数注意"><a href="#构造函数注意" class="headerlink" title="构造函数注意"></a>构造函数注意</h2><ol><li><strong>构造函数的名称必须和类名一致,并且没有返回值类型</strong></li><li><strong>如果一个类中没有添加任何构造函数,Java 虚拟机会默认给类添加空参构造函数,如果手动添加了其他带参构造函数,则 Java 虚拟机不会添加默认空参构造函数</strong></li><li><strong>创建对象时,如果是 new Student(), 该类中必须要有空参构造函数. 如果是 new Student (xxx,xxx,xxx),则该类中必须要有对应数据类型的带参构造函数.否则程序将会报错</strong></li><li><strong>构造函数其实也是体现了函数的重载,方法名相同,参数列表不相同.</strong></li></ol><h1 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h1><p>在例 3 中,我们在 Student 类中的带参构造函数中使用了 this.name 的形式给 类中的成员变量 name 赋值.下面我们来具体学习 this 关键字的作用和使用</p><h2 id="为什么要使用-this-关键字"><a href="#为什么要使用-this-关键字" class="headerlink" title="为什么要使用 this 关键字"></a>为什么要使用 this 关键字</h2><h4 id="例-4-修改之前-Student-类中的带参构造"><a href="#例-4-修改之前-Student-类中的带参构造" class="headerlink" title="例 4 : 修改之前 Student 类中的带参构造"></a>例 4 : 修改之前 Student 类中的带参构造</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200105144458.png" alt="20200105144458.png"></p><p><strong>如果在此处没有添加 this 关键字,我们从图片可以看出 name = name … 下有黄色波浪线,即 name 变量的值 赋值给了本身 name 空间,编译器认为此操作毫无意义,所以报出警告.由此可以看出,这里并不是我们想要实现的将 name 赋值给成员变量 name. 分析小技巧 : 变量就近使用原则.在 Student 的构造函数中,俩个 name 都和方法参数中的 name 挨的最近,所以都是同一 name 变量</strong></p><p><strong>添加 this 后 : 警告消失. this.name 调用的不再是参数中的 name 变量 而是 类中的成员变量 name , <span style="color:red">this 的使用解决了方法中的参数名和成员变量名冲突的问题.</span></strong></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200105145137.png" alt="20200105145137.png"></p><h2 id="this-关键字的使用方式"><a href="#this-关键字的使用方式" class="headerlink" title="this 关键字的使用方式"></a>this 关键字的使用方式</h2><h3 id="this-作用"><a href="#this-作用" class="headerlink" title="this 作用"></a>this 作用</h3><p>对象创建后,Java 虚拟机会给当前对象分配一个引用当前对象本身的指针,该指针称之为 this.</p><h3 id="在构造方法中使用"><a href="#在构造方法中使用" class="headerlink" title="在构造方法中使用"></a>在构造方法中使用</h3><h4 id="例-5-创建-Teacher-类"><a href="#例-5-创建-Teacher-类" class="headerlink" title="例 5 : 创建 Teacher 类"></a>例 5 : 创建 Teacher 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.通过this.xx 调用成员变量赋值</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name,<span class="keyword">int</span> age,String gender)</span></span>&#123;</span><br><span class="line">        <span class="comment">//2.在构造函数中还可以通过this()来调用其他构造函数</span></span><br><span class="line">        <span class="keyword">this</span>(name,age);</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在成员方法中使用"><a href="#在成员方法中使用" class="headerlink" title="在成员方法中使用"></a>在成员方法中使用</h3><h4 id="例-6"><a href="#例-6" class="headerlink" title="例 6 :"></a>例 6 :</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"写"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用this.name调用成员变量name</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">"在朗诵"</span>);</span><br><span class="line">        <span class="comment">//省略this. System.out.println(name + "在朗诵");</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exam</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用this.write()调用成员方法</span></span><br><span class="line">        <span class="keyword">this</span>.write();</span><br><span class="line">        <span class="comment">//write();省略this.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在成员方法中如果名称没有冲突可以省略 this. Java 虚拟机会自动给我们加上</strong></p><h3 id="this-关键字代表谁"><a href="#this-关键字代表谁" class="headerlink" title="this 关键字代表谁?"></a>this 关键字代表谁?</h3><h4 id="例-7-结合例-6"><a href="#例-7-结合例-6" class="headerlink" title="例 7 : 结合例 6"></a>例 7 : 结合例 6</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>);</span><br><span class="line">        stu.read();<span class="comment">//stu对象调用read 则 read方法中的this即为stu对象,stu对象name为zhangsan</span></span><br><span class="line">        <span class="comment">//输出 zhangsan 在朗诵</span></span><br><span class="line"></span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student(<span class="string">"wangwu"</span>);</span><br><span class="line">        stu1.read();<span class="comment">//stu1对象调用read 则 read方法中的this即为stu1对象,stu1对象name为wangwu</span></span><br><span class="line">        <span class="comment">//输出 wangwu 在朗诵</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结论 : 谁调用,this 就是谁.</strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>成员变量(<strong>重点</strong>)</li><li>函数重载(<strong>重点</strong>)</li><li>构造函数(<strong>重点</strong>)</li><li>this 关键字(<strong>重点</strong>)</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20201030112614.png&quot; alt=&quot;20201030112614&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="后台" scheme="http://fightlee.fun/categories/server/"/>
    
    
      <category term="java" scheme="http://fightlee.fun/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Part7.Vue速学(图文)</title>
    <link href="http://fightlee.fun/07-vue.html"/>
    <id>http://fightlee.fun/07-vue.html</id>
    <published>2020-01-03T08:59:20.000Z</published>
    <updated>2020-01-03T17:25:58.960Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cn.vuejs.org/images/logo.png" alt="20191223092306.png" style="zoom: 67%;" /><a id="more"></a><p>在上一章中我们学习了组件的使用,这一章我们继续来深入学习组件…</p><h1 id="子父组件"><a href="#子父组件" class="headerlink" title="子父组件"></a><b style="color:rgb(65,184,131)">子父组件</b></h1><p>所谓子父组件和组件树结构,我们可以等同理解为 dom 树,在 JavaScript 中的 dom 树中,一个 dom 元素中可能包含另一个 dom 元素,同理一个组件中可能包含着另一个组件.我们通过图片和代码来说明</p><p><strong>来自官网图片</strong> : 其中浅灰色区域代表 <strong>父组件</strong> , 深灰色区域代表 <strong>子组件</strong><br><img src="https://cn.vuejs.org/images/components.png" alt="20191223092306.png" style="zoom: 50%;" /></p><h4 id="例-1"><a href="#例-1" class="headerlink" title="例 1"></a>例 1</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 在Vue实例中使用父组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m-parent</span>&gt;</span><span class="tag">&lt;/<span class="name">m-parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在父组件中使用子组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">m-child</span>&gt;</span><span class="tag">&lt;/<span class="name">m-child</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件中的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//1.创建子组件对象</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> child = &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#child'</span></span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">//2.创建父组件对象,并在父组件中注册子组件</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> parent = &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#parent'</span>,</span></span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="actionscript">          <span class="string">'m-child'</span>: child</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">//3.在Vue实例中注册父组件对象</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="actionscript">          <span class="string">'m-parent'</span>: parent</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>总结 : A 组件在 B 组件中注册,则 A 是 B 的子组件, 并且 A 只能在注册过的组件中使用.在例 1 中组件的关系为 , child 在 parent 中注册 , parent 在 Vue 实例中注册 , 也就是说 child 为 parent 的子组件, parent 为 Vue 实例的子组件, 如果我们在 Vue 实例中直接使用 child 组件就会出错,因为 child 组件没有在 Vue 实例中注册.</strong></p><h1 id="子父组件之间传值"><a href="#子父组件之间传值" class="headerlink" title="子父组件之间传值"></a><b style="color:rgb(65,184,131)">子父组件之间传值</b></h1><p>在下面的例子介绍中我们只定义一个组件在 vue 实例中进行注册, 即 该组件和 Vue 实例存在子父之间的关系.</p><h2 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a><b style="color:rgb(65,184,131)">父传子</b></h2><h4 id="例-2-在-Vue-实例中的-data-属性中初始化数组-将数组中的数据传递给组件"><a href="#例-2-在-Vue-实例中的-data-属性中初始化数组-将数组中的数据传递给组件" class="headerlink" title="例 2 : 在 Vue 实例中的 data 属性中初始化数组,将数组中的数据传递给组件"></a>例 2 : 在 Vue 实例中的 data 属性中初始化数组,将数组中的数据传递给组件</h4><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200103183950.png" alt="20200103183950.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父传子<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 3.在vue实例中 的组件上 给子组件中的props定义的orders赋值 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m-test</span> <span class="attr">:orders</span>=<span class="string">"orders"</span> <span class="attr">:category</span>=<span class="string">"category"</span>&gt;</span><span class="tag">&lt;/<span class="name">m-test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义组件内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;category&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 在组件中接收父组件data中的数据 , 并显示 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"order in orders"</span>&gt;</span></span><br><span class="line">            &#123;&#123;order.id&#125;&#125;--&#123;&#123;order.name&#125;&#125;--&#123;&#123;order.price&#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//创建组件对象</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> test = &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#test'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//2.在子组件中定义props, 有2种方式,这里使用的是数组方式,可以同时定义多个props</span></span></span><br><span class="line"><span class="actionscript">        props: [<span class="string">'orders'</span>, <span class="string">'category'</span>]</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">//在Vue实例中注册组件对象</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//1.在vue实例中初始化数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line">          orders: [</span><br><span class="line">            &#123;</span><br><span class="line">              id: 1,</span><br><span class="line">              price: 4,</span><br><span class="line"><span class="actionscript">              name: <span class="string">'营养快线'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              id: 2,</span><br><span class="line">              price: 2,</span><br><span class="line"><span class="actionscript">              name: <span class="string">'AD钙奶'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              id: 3,</span><br><span class="line">              price: 3.5,</span><br><span class="line"><span class="actionscript">              name: <span class="string">'旺仔牛奶'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line"><span class="actionscript">          category: <span class="string">'饮料'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="actionscript">          <span class="string">'m-test'</span>: test</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图 :</p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200103181929.png" alt="20200103181929.png" style="zoom: 80%;" /><h3 id="props-的使用"><a href="#props-的使用" class="headerlink" title="props 的使用"></a>props 的使用</h3><p>在代码中我提到了 props 有 2 种使用方式,一种是数组,一种是对象.数组用法在<strong>例 2</strong>中已经学习过了,我们来看看 对象用法.</p><h4 id="例-3-通过-prop-对象的使用-可以对传入的属性的值的类型校验-定义默认值等功能"><a href="#例-3-通过-prop-对象的使用-可以对传入的属性的值的类型校验-定义默认值等功能" class="headerlink" title="例 3 : 通过 prop 对象的使用,可以对传入的属性的值的类型校验,定义默认值等功能"></a>例 3 : 通过 prop 对象的使用,可以对传入的属性的值的类型校验,定义默认值等功能</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = &#123;</span><br><span class="line">  template: <span class="string">'#test'</span>,</span><br><span class="line">  <span class="comment">//2.在子组件中定义props,对象写法</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    orders: &#123;</span><br><span class="line">      type: <span class="built_in">Array</span>, <span class="comment">//传入类型检查</span></span><br><span class="line">      <span class="keyword">default</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> [] <span class="comment">//默认值</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    category: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'商品'</span>,</span><br><span class="line">      required: <span class="literal">true</span> <span class="comment">//必须传入</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h3><ul><li>String</li><li>Number</li><li>Boolean</li><li>Array</li><li>Object</li><li>Date</li><li>Function</li><li>Symbol</li></ul><h3 id="prop-的驼峰命名问题"><a href="#prop-的驼峰命名问题" class="headerlink" title="prop 的驼峰命名问题"></a>prop 的驼峰命名问题</h3><p>在 props,如果定义的属性为驼峰形式,我们则在 html 中需要使用 kebab-case 命名方式来进行替换 如 :</p><h4 id="例-4"><a href="#例-4" class="headerlink" title="例 4"></a>例 4</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件中给props传值 props为驼峰命名 使用  kebab-case 短横线来代替 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">m-test</span> <span class="attr">:my-category</span>=<span class="string">"category"</span>&gt;</span><span class="tag">&lt;/<span class="name">m-test</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子组件中使用属性为props中定义的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;myCategory&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//创建组件对象</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> test = &#123;</span></span><br><span class="line"><span class="actionscript">    template: <span class="string">'#test'</span>,</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//2.props为驼峰命名</span></span></span><br><span class="line"><span class="actionscript">    props: [<span class="string">'myCategory'</span>]</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><p>来自官网的解释 : 所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p><p>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你<strong>不</strong>应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。</p><p>简单理解 : 父组件通过 prop 向子组件传值时,如果父组件的数据更新后子组件的也会同时更新,但是反过来就不行. 并且我们不能在子组件中修改 prop , 如果我们试图在子组件中更新父组件的数据,Vue 中会提示警告 原因 : 避免数据混乱 .</p><h4 id="例-5"><a href="#例-5" class="headerlink" title="例 5"></a>例 5</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Props 单向数据流<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 2.count 通过 props 传递给 子组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m-test</span> <span class="attr">:count</span>=<span class="string">"count"</span>&gt;</span><span class="tag">&lt;/<span class="name">m-test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 3.在子组件中直接修改 count --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;count&#125;&#125; <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"count++"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> test = &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#test'</span>,</span></span><br><span class="line"><span class="actionscript">        props: [<span class="string">'count'</span>]</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 1.父组件中初始化 count</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line">          count: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="actionscript">          <span class="string">'m-test'</span>: test</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果 :</p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200104002730.png" alt="20200104002730.png"></p><p><strong>为了解决这个问题我们有 2 种方案</strong></p><ol><li>props 中的数据用 data 来接收</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模板中使用 子组件中定义的myCount --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;myCount&#125;&#125; <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"myCount++"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> test = &#123;</span></span><br><span class="line"><span class="actionscript">      template: <span class="string">'#test'</span>,</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'count'</span>],</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//在子组件中使用data来接收props中的值</span></span></span><br><span class="line">      data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123; myCount : <span class="keyword">this</span>.count&#125;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">     ...</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>props 中的数据用 computed 来处理</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Props 单向数据流<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 传递给子组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">m-test</span> <span class="attr">:name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">m-test</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 子组件中使用computed计算属性 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;myName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> test = &#123;</span></span><br><span class="line"><span class="actionscript">      template: <span class="string">'#test'</span>,</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'name'</span>],</span></span><br><span class="line">      computed: &#123;</span><br><span class="line">        myName() &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">//将父组件传递的名称大写再显示</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="keyword">this</span>.name.toUpperCase()</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//父组件中定义名称</span></span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        name: <span class="string">'zhangsan'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>提示 : 如果在子组件中更新的是父组件中的对象或者数组，Vue 不会报错</strong></p><h2 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a><b style="color:rgb(65,184,131)">子传父</b></h2><p>前文讲述了如何将父组件中的数值传递给子组件, 这里我们来看一下子组件如何来修改父组件的状态.</p><h4 id="例-6-比如我们想从子组件中修改父组件中的字体大小"><a href="#例-6-比如我们想从子组件中修改父组件中的字体大小" class="headerlink" title="例 6 : 比如我们想从子组件中修改父组件中的字体大小"></a>例 6 : 比如我们想从子组件中修改父组件中的字体大小</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">"&#123;fontSize: fs + 'px'&#125;"</span>&gt;</span>父组件中的字体<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m-test</span> <span class="attr">:font-size</span>=<span class="string">"fs"</span>&gt;</span><span class="tag">&lt;/<span class="name">m-test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子组件修改父组件状态<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>当前父组件字体大小 : &#123;&#123;parentFontSize + "px"&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> test = &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#test'</span>,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line">          increment() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.parentFontSize++</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        props: [<span class="string">'fontSize'</span>],</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            parentFontSize: <span class="keyword">this</span>.fontSize</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">          fs: 12</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="actionscript">          <span class="string">'m-test'</span>: test</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>我们看此代码的效果 : 现在 在 子组件中 正确的显示出父组件所传入的字体大小为定义的 12</strong></p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200104010023.png" alt="20200104010023.png"></p><p>但是当我们点击 按钮 + 时，只能修改子组件中的 fontSize, 父组件中的状态没有更新，还是之前的单向数据流原因，我们想要更新父组件的状态，需要通过$emit()内置函数触发自定义事件来更新父组件的状态 , 修改代码 :</p><p><strong>1. 修改子组件中的 increment 方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">   increment()&#123;</span><br><span class="line">    <span class="comment">//子组件中字体大小递增</span></span><br><span class="line">    <span class="keyword">this</span>.parentFontSize++</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                通过$emit()触发自定义事件,修改父组件字体</span></span><br><span class="line"><span class="comment">                参数1 ： 自定义事件名称</span></span><br><span class="line"><span class="comment">                参数2 ： 事件触发函数中所接收的参数</span></span><br><span class="line"><span class="comment">                注, $emit需要通过this.来调用</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">'change-size'</span>,<span class="number">1</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>2. 修改父组件中 html 代码 在子组件上声明自定义事件 change-size 并触发函数 changeFontSize</strong><br><strong>注 ： 这里也应当注意驼峰的使用，尽量用 使用 kebab-case 短横线来替代</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">m-test</span> <span class="attr">:font-size</span>=<span class="string">"fs"</span> @<span class="attr">change-size</span>=<span class="string">"changeFontSize"</span>&gt;</span><span class="tag">&lt;/<span class="name">m-test</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3.在父组件中，即 vue 实例中定义触发的函数 change-size</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    fs: <span class="number">12</span></span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'m-test'</span>: test</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">//此处的value为 $emit函数传递的第二个参数</span></span><br><span class="line">    changeFontSize(value) &#123;</span><br><span class="line">      <span class="comment">//对当前的字体大小进行累加</span></span><br><span class="line">      <span class="keyword">this</span>.fs += value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>效果 :</p><p><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/cccc.gif" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><b style="color:rgb(65,184,131)">总结</b></h1><ol><li>在Vue中如何使用子父组件（<strong>重点</strong>）</li><li>子父组件之间传值（<strong>重点</strong>）</li><li>props的使用（<strong>重点</strong>）</li></ol><img src="https://fightlee-blog.oss-cn-shenzhen.aliyuncs.com/img/20200104012547.png" alt="20200104012547.png" style="zoom:80%;" />]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cn.vuejs.org/images/logo.png&quot; alt=&quot;20191223092306.png&quot; style=&quot;zoom: 67%;&quot; /&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://fightlee.fun/categories/web/"/>
    
    
      <category term="vue" scheme="http://fightlee.fun/tags/vue/"/>
    
  </entry>
  
</feed>
